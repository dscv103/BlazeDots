# .gpt5-codex/config.toml — Real MCP Servers Only

[agent]
name        = "gpt5-codex"
role        = "NixOS engineer & release manager"
description = "Writes NixOS (flake-parts + Home Manager) configs with doc-grounded answers. Never invent hashes."
language    = "nix"

[agent.guards]
no_invented_hashes = true
write_confirmation_token = "CONFIRM_SCAFFOLD"
no_side_effects_by_default = true

[generation]
temperature = 0.1
top_p = 0.9
max_output_tokens = 2048
deterministic_style = true

[nix.defaults]
flake_parts  = true
home_manager = true
sops_nix     = true
impermanence = false
disko        = "none"

[automation]
auto_use_mcp = true
autostart_mcp = true
default_pipeline = "nixos_authoring_default"

[[automation.routing]]
if.language_in = ["nix", "toml", "yaml"]
use_pipeline   = "nixos_authoring_default"

[[automation.routing]]
if.prompt_matches = ["*nixos*", "*flake*", "*home manager*", "*flake-parts*", "*nvidia*", "*disko*", "*impermanence*"]
use_pipeline      = "nixos_authoring_default"

# ---- Pipelines (only real servers referenced) ----

[pipelines.nixos_authoring_default]
description = "Plan → docs → NixOS lookups → propose changes (print-only)."
steps = [
  { call = "sequential_thinking:plan.make", with = { goal_from_prompt = true }, save_as = "plan" },
  { call = "context7:c7.pin", with = { id = "plan", content_from = "plan", ttl = "2h" } },

  # Docs grounding (Context7 or Docs MCP)
  { call = "context7:docs.search", with = { q_from_prompt = true, k = 5 }, save_as = "c7_hits", on_error = "continue" },
  { call = "docs_mcp:search", with = { query_from_prompt = true, limit = 5 }, save_as = "docs_hits", on_error = "continue" },

  # Nix‑specific facts via MCP‑NixOS
  { call = "nixos:nixos_search", with = { query_from_prompt = true, type = "packages", channel = "stable" }, save_as = "pkg_hits", on_error = "continue" },
  { call = "nixos:nixos_search", with = { query_from_prompt = true, type = "options",  channel = "stable" }, save_as = "opt_hits", on_error = "continue" }
]

# ---- MCP servers (verified) ----

[mcp]
restart_on_failure = true
backoff_initial_ms = 500
backoff_max_ms     = 8000

[mcp.servers.sequential_thinking]
enabled   = true
autostart = true
command   = "npx"
args      = ["-y", "@modelcontextprotocol/server-sequential-thinking"]

[mcp.servers.context7]
enabled   = true
autostart = true
command   = "npx"
args      = ["-y", "@upstash/context7-mcp"]
# env.CONTEXT7_API_KEY = "..."   # optional

[mcp.servers.docs_mcp]
enabled   = true
autostart = true
command   = "npx"
args      = ["@arabold/docs-mcp-server@latest"]
# For HTTP/SSE mode, swap to a URL-based definition in your client.

[mcp.servers.nixos]
enabled   = true
autostart = true
command   = "uvx"
args      = ["mcp-nixos"]
# Alternatives:
# command = "nix";   args = ["run", "github:utensils/mcp-nixos", "--"]
# command = "docker"; args = ["run", "--rm", "-i", "ghcr.io/utensils/mcp-nixos"]

[output.rules]
show_resolved_inputs_table = true
stable_attr_order = true

[ui]
show_tool_citations = true
show_warning_banners = true
plan_first_always = true
