name: CI Run Guard

on:
  workflow_call:
    outputs:
      should-run:
        description: >-
          true when downstream jobs are allowed to execute based on skip-ci heuristics.
        value: ${{ jobs.evaluate.outputs.should-run }}
      reason:
        description: >-
          Human readable explanation of why the workflow is running or being skipped.
        value: ${{ jobs.evaluate.outputs.reason }}

jobs:
  evaluate:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.determine.outputs.should-run }}
      reason: ${{ steps.determine.outputs.reason }}
    steps:
      - name: Determine run conditions
        id: determine
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            let shouldRun = true;
            let reason = 'Guard conditions satisfied';

            if (eventName === 'push') {
              const headCommitMessage = context.payload.head_commit?.message || '';
              if (headCommitMessage.includes('[skip ci]')) {
                shouldRun = false;
                reason = 'Head commit message contains [skip ci]';
              } else {
                const commits = context.payload.commits || [];
                const modifiedFiles = new Set();

                for (const commit of commits) {
                  for (const file of [...(commit.added || []), ...(commit.modified || []), ...(commit.removed || [])]) {
                    modifiedFiles.add(file);
                  }
                }

                const touchesReadme = Array.from(modifiedFiles).some((file) => file.endsWith('README.md'));
                const touchesNix = Array.from(modifiedFiles).some((file) => file.endsWith('.nix'));

                if (touchesReadme && !touchesNix) {
                  shouldRun = false;
                  reason = 'Push only touches README files without Nix changes';
                }
              }
            }
            if (eventName === 'pull_request') {
              const title = context.payload.pull_request?.title || '';
              if (title.includes('[skip ci]')) {
                shouldRun = false;
                reason = 'Pull request title contains [skip ci]';
              }
            }

            core.setOutput('should-run', shouldRun ? 'true' : 'false');
            core.setOutput('reason', reason);

      - name: Log guard decision
        run: |
          echo "should-run=${{ steps.determine.outputs['should-run'] }}"
          echo "reason=${{ steps.determine.outputs.reason }}"
