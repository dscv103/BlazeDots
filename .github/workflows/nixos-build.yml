name: NixOS Build (flake)

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  discover:
    name: Discover nixosConfigurations
    runs-on: ubuntu-latest
    # Conditional build logic (Phase 1) - skip for docs-only changes
    if: >
      (github.event_name != 'push' ||
        !contains(github.event.head_commit.message, '[skip ci]')) &&
      !(github.event_name == 'push' &&
        contains(join(github.event.commits.*.modified, ' '), 'README.md') &&
        !contains(join(github.event.commits.*.modified, ' '), '.nix'))
    outputs:
      hosts: ${{ steps.get-hosts.outputs.hosts }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            max-jobs = auto
            cores = 0

      # Shared caching infrastructure for discovery (Phase 1)
      - name: Cache Nix store (discovery)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
          key: nix-discovery-v2-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ hashFiles('flake.nix', 'hosts/**/*.nix') }}
          restore-keys: |
            nix-discovery-v2-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-discovery-v2-${{ runner.os }}-

      - name: Show flake metadata
        run: nix flake metadata || true

      - id: get-hosts
        name: Get nixosConfigurations attr names
        run: |
          set -euo pipefail
          # Produces a JSON array of configuration names, e.g. ["laptop","server"]
          echo "hosts=$(nix eval --json .#nixosConfigurations --apply builtins.attrNames)" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.host }}
    needs: discover
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.discover.outputs.hosts || '[]') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            max-jobs = auto
            cores = 0

      # Host-specific shared caching (Phase 1)
      - name: Cache Nix store (build)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/nix
          key: nix-build-v2-${{ matrix.host }}-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ hashFiles('hosts/${{ matrix.host }}/**/*.nix', 'nix/**/*.nix') }}
          restore-keys: |
            nix-build-v2-${{ matrix.host }}-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-build-v2-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-build-v2-${{ runner.os }}-

      - name: Build system closure
        run: |
          set -euo pipefail
          echo "::group::Build nixosConfigurations.${{ matrix.host }}"
          start_time=$(date +%s)
          
          # Build with enhanced logging and error handling
          nix build --accept-flake-config --print-build-logs \
            ".#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel"
          
          result_path=$(readlink -f result)
          echo "Built system: $result_path"
          
          # Calculate build time
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "Build completed in ${duration}s"
          
          # Store build metadata for monitoring
          echo "build_time_seconds=$duration" >> $GITHUB_OUTPUT
          echo "derivation_path=$result_path" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Optimize and export system as .nar
        run: |
          set -euo pipefail
          echo "::group::Export system closure"
          
          out="$(readlink -f ./result)"
          
          # Get closure size before compression
          closure_size=$(nix path-info --closure-size --human-readable "$out" | awk '{print $2}')
          echo "Closure size: $closure_size"
          
          # Export with compression for smaller artifacts
          echo "Exporting system closure..."
          nix store dump-path "$out" | gzip -6 > "${{ matrix.host }}.nar.gz"
          
          # Report compression statistics
          original_size=$(nix store dump-path "$out" | wc -c)
          compressed_size=$(stat -c%s "${{ matrix.host }}.nar.gz")
          compression_ratio=$(( (original_size - compressed_size) * 100 / original_size ))
          
          echo "Original size: $(numfmt --to=iec $original_size)"
          echo "Compressed size: $(numfmt --to=iec $compressed_size)"
          echo "Compression ratio: ${compression_ratio}%"
          echo "::endgroup::"

      - name: Upload optimized artifact
        uses: actions/upload-artifact@v4
        with:
          name: nixos-system-${{ matrix.host }}
          path: ${{ matrix.host }}.nar.gz
          if-no-files-found: error
          compression-level: 0  # Already compressed

      # Optional: push to Cachix if you have a cache set up.
      # - name: Use Cachix (optional)
      #   if: ${{ secrets.CACHIX_AUTH_TOKEN != '' }}
      #   uses: cachix/cachix-action@v14
      #   with:
      #     name: your-cachix-cache
      #     authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      # - name: Push build to Cachix (optional)
      #   if: ${{ secrets.CACHIX_AUTH_TOKEN != '' }}
      #   run: |
      #     nix path-info --json ".#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel" \
      #       | jq -r '.[0]' \
      #       | xargs -I{} cachix push your-cachix-cache {}
