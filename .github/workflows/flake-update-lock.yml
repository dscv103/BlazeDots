name: Update flake.lock

on:
  schedule:
    # Runs every Monday at 08:00 UTC — adjust as you like
    - cron: "0 8 * * 1"
  workflow_dispatch:
    inputs:
      input_name:
        description: "Optional: update only this flake input (e.g. nixpkgs)"
        required: false
        default: ""
      do_check:
        description: "Run 'nix flake check' after updating"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-flake-lock
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      # Ensure flakes are enabled even on minimal setups
      NIX_CONFIG: experimental-features = nix-command flakes
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Fast, reliable Nix install for CI with caching optimization
      - name: Install Nix (optimized)
        uses: DeterminateSystems/nix-installer-action@v20
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            max-jobs = auto
            cores = 0
            keep-outputs = true

      # Optional: cache popular Nix binaries to speed things up
      - name: Enable Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Cache Nix store (update)
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: nix-update-v2-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ hashFiles('flake.nix', 'nix/**/*.nix') }}
          restore-keys: |
            nix-update-v2-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
            nix-update-v2-${{ runner.os }}-

      - name: Configure Git author
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update flake.lock with performance monitoring
        id: update
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Flake Update Process"
          start_time=$(date +%s)
          
          if [[ -n "${{ github.event.inputs.input_name || '' }}" ]]; then
            echo "🎯 Updating only input: ${{ github.event.inputs.input_name }}"
            nix flake lock --update-input "${{ github.event.inputs.input_name }}"
          else
            echo "🔄 Updating all inputs"
            nix flake update
          fi

          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "Update completed in ${duration}s"

          # Check for changes and report details
          if git diff --quiet -- flake.lock; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ No changes detected in flake.lock"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "✅ Changes detected in flake.lock"
            
            # Show what changed for better visibility
            echo "::group::Changes Summary"
            git diff --stat flake.lock
            echo "::endgroup::"
          fi
          echo "::endgroup::"

      - name: nix flake check with enhanced reporting
        if: steps.update.outputs.changed == 'true' && (github.event_name == 'schedule' || github.event.inputs.do_check == 'true')
        run: |
          echo "::group::Validation Check"
          start_time=$(date +%s)
          
          # Run flake check with comprehensive error reporting
          if ! nix flake check --print-build-logs --show-trace; then
            echo "::error::Flake check failed after update. This may indicate breaking changes."
            
            # Try to provide helpful context
            echo "::group::Debugging Information"
            echo "Recent flake.lock changes:"
            git log -1 --oneline
            git diff HEAD~1..HEAD -- flake.lock
            echo "::endgroup::"
            
            exit 1
          fi
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ Validation completed successfully in ${duration}s"
          echo "::endgroup::"

      - name: Create PR
        if: steps.update.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "ci: update flake.lock"
          title: "ci: update flake.lock"
          body: |
            Automated update of `flake.lock`.

            - Trigger: `${{ github.event_name }}`
            - Input: `${{ github.event.inputs.input_name || 'all inputs' }}`
            - Check run: `${{ (github.event_name == 'schedule' || github.event.inputs.do_check == 'true') && 'nix flake check ran' || 'skipped' }}`
          branch: ci/update-flake-lock
          delete-branch: true
          signoff: false
          author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          labels: |
            dependencies
            nix
            automated

      - name: No changes
        if: steps.update.outputs.changed != 'true'
        run: echo "flake.lock already up-to-date. Nothing to do."
