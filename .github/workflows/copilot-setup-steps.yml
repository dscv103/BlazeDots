# .github/workflows/copilot-setup-steps.yml
name: Copilot Setup Steps

on:
  workflow_dispatch:
  push:
    paths: [".github/workflows/copilot-setup-steps.yml"]
  pull_request:
    paths: [".github/workflows/copilot-setup-steps.yml"]

jobs:
  # Must be exactly this for Copilot Cloud Agent
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # ---- Node (for npx-based MCPs) -------------------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"

      # ---- uv (for uvx mcp-nixos) ----------------------------------------
      - name: Install uv (Python launcher)
        uses: astral-sh/setup-uv@v6

      # ---- Nix installation ----------------------------------------------
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      # ---- Optional: jq for host discovery in flake ----------------------
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # ---- MCP servers: sanity checks only -------------------------------
      # (Your mcpServers JSON will call these exactly as configured.)
      - name: Preflight mcp-ripgrep
        run: npx -y mcp-ripgrep@latest --help

      - name: Preflight mcp-nixos
        run: uvx -q mcp-nixos --help

      - name: Preflight sequential-thinking server
        run: npx -y @modelcontextprotocol/server-sequential-thinking --help

      # ---- Nix quality & checks ------------------------------------------
      - name: nixfmt (RFC style) check
        run: |
          set -euo pipefail
          # Prefer the RFC-style formatter from nixpkgs and run in check mode.
          nix run nixpkgs#nixfmt-rfc-style -- --check .

      - name: deadnix (find unused)
        run: |
          set -euo pipefail
          nix run nixpkgs#deadnix -- --fail .

      - name: statix (lint)
        run: |
          set -euo pipefail
          nix run nixpkgs#statix -- check .

      - name: nix flake check
        run: |
          set -euo pipefail
          if [ -f flake.nix ]; then
            nix flake check --keep-going
          else
            echo "No flake.nix found; skipping flake check."
          fi

      # ---- NixOS build (build all nixosConfigurations in the flake) ------
      - name: nixos build (all hosts)
        run: |
          set -euo pipefail
          if [ ! -f flake.nix ]; then
            echo "No flake.nix found; skipping NixOS build."
            exit 0
          fi

          hosts_json="$(nix eval --json .#nixosConfigurations || echo '{}')"
          count="$(printf '%s' "$hosts_json" | jq 'keys | length')"

          if [ "$count" -eq 0 ]; then
            echo "No nixosConfigurations found in flake; skipping NixOS build."
            exit 0
          fi

          for host in $(printf '%s' "$hosts_json" | jq -r 'keys[]'); do
            echo "::group::Building $host"
            nix build \
              --print-build-logs \
              .#nixosConfigurations."$host".config.system.build.toplevel
            echo "::endgroup::"
          done

      # ---- Versions (diagnostics) ----------------------------------------
      - name: Print versions
        run: |
          node -v
          npm -v
          uv --version
          nix --version

      - name: Done
        run: 'echo "Environment ready: MCP servers preflighted; nixfmt-rfc, deadnix, statix, flake check, and NixOS build completed âœ…"'
