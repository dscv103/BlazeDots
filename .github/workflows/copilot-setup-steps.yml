# .github/workflows/copilot-setup-steps.yml
name: Copilot Setup Steps

on:
  # Run manually or when this file changes (PRs or pushes)
  workflow_dispatch:
  push:
    paths: [.github/workflows/copilot-setup-steps.yml]
  pull_request:
    paths: [.github/workflows/copilot-setup-steps.yml]

jobs:
  # Must be exactly this name for Copilot to pick it up
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
      - name: Checkout (optional; agent will checkout if you don't)
        uses: actions/checkout@v5

      # ---- Node / pnpm (Option A: guard cache on lockfile presence) ---------

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      # Node.js WITH pnpm cache (only if a pnpm-lock.yaml exists)
      - name: Install Node.js (with pnpm cache)
        if: ${{ hashFiles('**/pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: |
            **/pnpm-lock.yaml

      # Node.js WITHOUT cache (no lockfile found)
      - name: Install Node.js (no cache)
        if: ${{ hashFiles('**/pnpm-lock.yaml') == '' }}
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      # ---- Build local MCP: tools/software-planning-mcp (if present) --------
      # Note: Only runs if tools/software-planning-mcp/package.json exists

      - name: Build software-planning MCP
        if: ${{ hashFiles('tools/software-planning-mcp/package.json') != '' }}
        working-directory: tools/software-planning-mcp
        shell: bash
        run: |
          set -euo pipefail
          if command -v pnpm >/dev/null 2>&1; then
            pnpm install --frozen-lockfile || pnpm install
            pnpm build || pnpm run build
          else
            npm ci
            npm run build
          fi
          if [ -f build/index.js ]; then
            echo "OK: build/index.js"
          elif [ -f dist/index.js ]; then
            echo "OK: dist/index.js"
          else
            echo "ERROR: neither build/index.js nor dist/index.js exists"
            ls -R .
            exit 1
          fi

      # Create a launcher that resolves entrypoint from repo paths (not _temp)
      - name: Create launcher for software-planning MCP
        if: ${{ hashFiles('tools/software-planning-mcp/package.json') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .github/mcp
          cat > .github/mcp/launch-software-planning.js <<'EOF'
          #!/usr/bin/env node
          const fs = require("fs");
          const path = require("path");
          const { spawn } = require("child_process");

          // Resolve relative to this file (stable regardless of CWD)
          const root = path.resolve(__dirname, "..", "..");
          const mcpDir = path.join(root, "tools", "software-planning-mcp");

          const candidates = [
            process.env.SPMCP_ENTRY,                      // optional override
            path.join(mcpDir, "build", "index.js"),
            path.join(mcpDir, "dist", "index.js"),
          ].filter(Boolean);

          const entry = candidates.find(p => p && fs.existsSync(p));
          if (!entry) {
            console.error("ERROR: software-planning MCP entrypoint not found.");
            console.error("Tried:", candidates);
            process.exit(1);
          }

          spawn(process.execPath, [entry, ...process.argv.slice(2)], { stdio: "inherit" })
            .on("exit", code => process.exit(code));
          EOF
          chmod +x .github/mcp/launch-software-planning.js

      # Sanity check via the same launcher Copilot will use
      - name: MCP path sanity check (use launcher)
        if: ${{ hashFiles('tools/software-planning-mcp/package.json') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          node .github/mcp/launch-software-planning.js --help || true

      # ---- Other toolchains (optional) --------------------------------------

      - name: Install uv (for uvx / mcp-nixos)
        uses: astral-sh/setup-uv@v6

      - name: Install Nix (for flake builds, eval, dev shells)
        uses: cachix/install-nix-action@v31

      # Warm up MCP/CLIs BEFORE Copilot agent firewall applies
      - name: Preinstall mcp-ripgrep (fast code search tools)
        run: npx -y mcp-ripgrep@latest --help

      - name: Preinstall mcp-nixos wheel
        run: uvx -q mcp-nixos --help

      # Optional: global install of sequential-thinking server
      - name: Preinstall sequential-thinking server (optional)
        run: npm i -g @modelcontextprotocol/server-sequential-thinking

      # ---- Quick smoke checks -----------------------------------------------

      - name: Print versions
        run: |
          node -v
          npm -v
          pnpm -v
          uv --version
          nix --version || true

      - name: Nix shell smoke test (non-fatal)
        continue-on-error: true
        run: |
          nix --version
          if [ -f "flake.nix" ]; then
            nix develop -c python -V || true
          fi

      - name: Done
        run: echo "Copilot setup complete âœ…"

# NOTE:
# Point mcp.json at the launcher, e.g.:
# {
#   "mcpServers": {
#     "software-planning-tool": {
#       "command": "node",
#       "args": [".github/mcp/launch-software-planning.js"]
#     }
#   }
# }
# Do NOT use GitHub Actions expressions (${{ ... }) or env vars ($VAR) inside mcp.json.
