# .github/workflows/copilot-setup-steps.yml
name: Copilot Setup Steps

on:
  # Run manually or when this file changes (PRs or pushes)
  workflow_dispatch:
  push:
    paths: [.github/workflows/copilot-setup-steps.yml]
  pull_request:
    paths: [.github/workflows/copilot-setup-steps.yml]

jobs:
  # Must be exactly this name for Copilot to pick it up
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read

    steps:
      - name: Checkout (optional; agent will checkout if you don't)
        uses: actions/checkout@v5

      # ---- Node / pnpm (Option A: guard cache on lockfile presence) ---------

      # Put pnpm on PATH first so setup-node can use pnpm-aware caching later
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      # Node.js WITH pnpm cache (only if a pnpm-lock.yaml exists)
      - name: Install Node.js (with pnpm cache)
        if: ${{ hashFiles('**/pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: |
            **/pnpm-lock.yaml

      # Node.js WITHOUT cache (no lockfile found)
      - name: Install Node.js (no cache)
        if: ${{ hashFiles('**/pnpm-lock.yaml') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # ---- Build local MCP: tools/software-planning-mcp (if present) --------
      # Note: Only runs if tools/software-planning-mcp/package.json exists

      # Install deps & build the local MCP so build/index.js exists
      - name: Build software-planning MCP
        if: ${{ hashFiles('tools/software-planning-mcp/package.json') != '' }}
        working-directory: tools/software-planning-mcp
        shell: bash
        run: |
          set -euo pipefail
          if command -v pnpm >/dev/null 2>&1; then
            pnpm install --frozen-lockfile || pnpm install
            pnpm build
          else
            npm ci
            npm run build
          fi
          test -f build/index.js || { echo "ERROR: build/index.js missing"; exit 1; }

      # Sanity check path & entrypoint (avoid `${{ }}` / `$VARS}` in mcp.json)
      - name: MCP path sanity check
        if: ${{ hashFiles('tools/software-planning-mcp/package.json') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          ls -la tools/software-planning-mcp/build
          node ./tools/software-planning-mcp/build/index.js --help || true

      # ---- Other toolchains (optional) --------------------------------------

      - name: Install uv (for uvx / mcp-nixos)
        uses: astral-sh/setup-uv@v6

      - name: Install Nix (for flake builds, eval, dev shells)
        uses: cachix/install-nix-action@v27

      # Warm up MCP/CLIs BEFORE Copilot agent firewall applies
      - name: Preinstall mcp-ripgrep (fast code search tools)
        run: npx -y mcp-ripgrep@latest --help

      - name: Preinstall mcp-nixos wheel
        run: uvx -q mcp-nixos --help

      # Optional: global install of sequential-thinking server
      - name: Preinstall sequential-thinking server (optional)
        run: npm i -g @modelcontextprotocol/server-sequential-thinking

      # Example: prebuild a separate MCP if you have one (adjust/remove as needed)
      - name: Prebuild software-planning MCP (redundant guard; safe to keep)
        shell: bash
        run: |
          if [ -f "tools/software-planning-mcp/package.json" ]; then
            echo "software-planning-mcp already built above (skipping)"
          else
            echo "tools/software-planning-mcp not found (skipping)"
          fi

      # ---- Quick smoke checks -----------------------------------------------

      - name: Print versions
        run: |
          node -v
          npm -v
          pnpm -v
          uv --version
          nix --version || true

      - name: Nix shell smoke test (non-fatal)
        continue-on-error: true
        run: |
          nix --version
          if [ -f "flake.nix" ]; then
            nix develop -c python -V || true
          fi

      - name: Done
        run: echo "Copilot setup complete âœ…"

# NOTE:
# This workflow conditionally builds local MCP servers if they exist.
# Currently, this repository uses external MCP servers (see mcp.json).
# If you add a local MCP server like tools/software-planning-mcp, reference it in mcp.json like:
# {
#   "mcpServers": {
#     "software-planning-tool": {
#       "command": "node",
#       "args": ["./tools/software-planning-mcp/build/index.js"]
#     }
#   }
# }
# Do NOT use GitHub Actions expressions (${{ ... }}) or env vars ($VAR) in mcp.json.
