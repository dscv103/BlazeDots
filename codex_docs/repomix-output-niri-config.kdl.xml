<repomix><file_summary>This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been formatted for parsing in xml style, security check has been disabled.<purpose>This file contains a packed representation of the entire repository&apos;s contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.</purpose><file_format>The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file</file_format><usage_guidelines>- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.</usage_guidelines><notes>- Some files may have been excluded based on .gitignore rules and Repomix&apos;s configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been formatted for parsing in xml style
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)</notes></file_summary><directory_structure>fastfetch/
  config.jsonc
fish/
  config.fish
  fish_variables
kitty/
  kitty.conf
  theme.conf
  wallust.conf
niri/
  config.kdl
quickshell/
  .github/
    workflows/
      build-and-release.yml
  Bar/
    Modules/
      ActiveWindow.qml
      Applauncher.qml
      AudioDeviceSelector.qml
      Battery.qml
      Bluetooth.qml
      Brightness.qml
      Calendar.qml
      ClockWidget.qml
      CustomTrayMenu.qml
      Media.qml
      SettingsButton.qml
      SidePanelButton.qml
      SystemInfo.qml
      SystemTray.qml
      Taskbar.qml
      Time.qml
      Volume.qml
      Wifi.qml
      Workspace.qml
    Bar.qml
  Components/
    Avatar.qml
    Cava.qml
    CircularProgressBar.qml
    CircularSpectrum.qml
    Corner.qml
    Corners.qml
    IconButton.qml
    PanelWithOverlay.qml
    PillIndicator.qml
    Spinner.qml
    StyledTooltip.qml
    Tabs.qml
    ThemedSlider.qml
    ToggleOption.qml
  Helpers/
    Fuzzysort.js
    Holidays.js
    IdleInhibitor.qml
    IPCHandlers.qml
    Time.js
    Weather.js
  Services/
    MusicManager.qml
    Network.qml
    Niri.qml
    Sysinfo.qml
    WallpaperManager.qml
    WorkspaceManager.qml
  Settings/
    Settings.qml
    Theme.json
    Theme.qml
  Templates/
    templates/
      kitty.conf
      niri.kdl
      quickshell.json
    wallust.toml
  Widgets/
    LockScreen/
      BatteryCharge.qml
      LockScreen.qml
    Notification/
      NotificationHistory.qml
      NotificationIcon.qml
      NotificationManager.qml
      NotificationPopup.qml
    SettingsWindow/
      Tabs/
        Components/
          UnitSelector.qml
          WallpaperSelector.qml
        About.qml
        Bar.qml
        Display.qml
        General.qml
        Misc.qml
        Network.qml
        Record.qml
        ScreenRecorder.qml
        TimeWeather.qml
        Wallpaper.qml
      SettingsWindow.qml
    Sidebar/
      Config/
        CollapsibleCategory.qml
        ProfileSettings.qml
        SettingsModal.qml
        WallpaperSettings.qml
        WeatherSettings.qml
      Panel/
        BluetoothPanel.qml
        Music.qml
        PanelPopup.qml
        PowerProfile.qml
        QuickAccess.qml
        System.qml
        SystemMonitor.qml
        WallpaperPanel.qml
        Weather.qml
        WifiPanel.qml
      Button.qml
    SidePanel/
      BluetoothPanel.qml
      Music.qml
      PanelPopup.qml
      PowerProfile.qml
      SettingsIcon.qml
      Shortcuts.qml
      System.qml
      SystemMonitor.qml
      Weather.qml
      WifiPanel.qml
    Background.qml
    Dock.qml
    LockScreen.qml
    Overview.qml
  .gitignore
  LICENSE
  README.md
  shell.qml
dotmanager.sh
README.md</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path="fastfetch/config.jsonc">{
  &quot;$schema&quot;: &quot;https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json&quot;,
  &quot;logo&quot;: {
    &quot;type&quot;: &quot;kitty-direct&quot;,
    &quot;source&quot;: &quot;~/.config/fastfetch/cachynosey.png&quot;,
    &quot;padding&quot;: {
      &quot;top&quot;: 2,
      &quot;left&quot;: 3
    },
    &quot;width&quot;: 40
  },
  &quot;modules&quot;: [
    &quot;break&quot;,
    {
      &quot;type&quot;: &quot;custom&quot;,
      &quot;format&quot;: &quot;──────────────────────Hardware──────────────────────&quot;
    },
    {
      &quot;type&quot;: &quot;cpu&quot;,
      &quot;key&quot;: &quot; &quot;,
      &quot;showPeCoreCount&quot;: true,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;gpu&quot;,
      &quot;key&quot;: &quot; 󰍛&quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;memory&quot;,
      &quot;key&quot;: &quot; &quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;custom&quot;,
      &quot;format&quot;: &quot;────────────────────────────────────────────────────&quot;
    },
    &quot;break&quot;,
    {
      &quot;type&quot;: &quot;custom&quot;,
      &quot;format&quot;: &quot;──────────────────────Software──────────────────────&quot;
    },
    {
      &quot;type&quot;: &quot;os&quot;,
      &quot;key&quot;: &quot; 󱄅&quot;,
      &quot;keyColor&quot;: &quot;yellow&quot;
    },
    {
      &quot;type&quot;: &quot;kernel&quot;,
      &quot;key&quot;: &quot; &quot;,
      &quot;keyColor&quot;: &quot;yellow&quot;
    },
    {
      &quot;type&quot;: &quot;packages&quot;,
      &quot;key&quot;: &quot; &quot;,
      &quot;keyColor&quot;: &quot;yellow&quot;
    },
    {
      &quot;type&quot;: &quot;wm&quot;,
      &quot;key&quot;: &quot; 󰇄&quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;lm&quot;,
      &quot;key&quot;: &quot; 󰍂&quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;terminal&quot;,
      &quot;key&quot;: &quot; &quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;shell&quot;,
      &quot;key&quot;: &quot; &quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
      &quot;type&quot;: &quot;custom&quot;,
      &quot;format&quot;: &quot;────────────────────────────────────────────────────&quot;
    },
    &quot;break&quot;,
    {
      &quot;type&quot;: &quot;custom&quot;,
      &quot;format&quot;: &quot;────────────────────Uptime / Age────────────────────&quot;
    },
    {
      &quot;type&quot;: &quot;uptime&quot;,
      &quot;key&quot;: &quot;  Uptime &quot;,
      &quot;keyColor&quot;: &quot;33&quot;
    },
    {
    &quot;type&quot;: &quot;command&quot;,
    &quot;key&quot;: &quot;  OS Age &quot;,
    &quot;keyColor&quot;: &quot;33&quot;,
    &quot;text&quot;: &quot;birth_install=$(stat -c %W /); current=$(date +%s); days_difference=$(( (current - birth_install) / 86400 )); echo $days_difference days&quot;
    },
    {
      &quot;type&quot;: &quot;custom&quot;,
      &quot;format&quot;: &quot;────────────────────────────────────────────────────&quot;
    },
    &quot;break&quot;
  ]
}</file><file path="fish/config.fish">if status is-interactive
    # Commands to run in interactive sessions can go here
end


function fish_greeting
    fastfetch
end</file><file path="fish/fish_variables"># This file contains fish universal variable definitions.
# VERSION: 3.0
SETUVAR __fish_initialized:3800
SETUVAR fish_color_autosuggestion:brblack
SETUVAR fish_color_cancel:\x2dr
SETUVAR fish_color_command:normal
SETUVAR fish_color_comment:red
SETUVAR fish_color_cwd:green
SETUVAR fish_color_cwd_root:red
SETUVAR fish_color_end:green
SETUVAR fish_color_error:brred
SETUVAR fish_color_escape:brcyan
SETUVAR fish_color_history_current:\x2d\x2dbold
SETUVAR fish_color_host:normal
SETUVAR fish_color_host_remote:yellow
SETUVAR fish_color_normal:normal
SETUVAR fish_color_operator:brcyan
SETUVAR fish_color_param:cyan
SETUVAR fish_color_quote:yellow
SETUVAR fish_color_redirection:cyan\x1e\x2d\x2dbold
SETUVAR fish_color_search_match:white\x1e\x2d\x2dbackground\x3dbrblack
SETUVAR fish_color_selection:white\x1e\x2d\x2dbold\x1e\x2d\x2dbackground\x3dbrblack
SETUVAR fish_color_status:red
SETUVAR fish_color_user:brgreen
SETUVAR fish_color_valid_path:\x2d\x2dunderline
SETUVAR fish_key_bindings:fish_default_key_bindings
SETUVAR fish_pager_color_completion:normal
SETUVAR fish_pager_color_description:yellow\x1e\x2di
SETUVAR fish_pager_color_prefix:normal\x1e\x2d\x2dbold\x1e\x2d\x2dunderline
SETUVAR fish_pager_color_progress:brwhite\x1e\x2d\x2dbackground\x3dcyan
SETUVAR fish_pager_color_selected_background:\x2dr
SETUVAR pure_begin_prompt_with_current_directory:true
SETUVAR pure_check_for_new_release:false
SETUVAR pure_color_at_sign:pure_color_mute
SETUVAR pure_color_aws_profile:pure_color_warning
SETUVAR pure_color_command_duration:pure_color_warning
SETUVAR pure_color_current_directory:pure_color_primary
SETUVAR pure_color_danger:red
SETUVAR pure_color_dark:black
SETUVAR pure_color_git_branch:pure_color_mute
SETUVAR pure_color_git_dirty:pure_color_mute
SETUVAR pure_color_git_stash:pure_color_info
SETUVAR pure_color_git_unpulled_commits:pure_color_info
SETUVAR pure_color_git_unpushed_commits:pure_color_info
SETUVAR pure_color_hostname:pure_color_mute
SETUVAR pure_color_info:cyan
SETUVAR pure_color_jobs:pure_color_normal
SETUVAR pure_color_k8s_context:pure_color_success
SETUVAR pure_color_k8s_namespace:pure_color_primary
SETUVAR pure_color_k8s_prefix:pure_color_info
SETUVAR pure_color_light:white
SETUVAR pure_color_mute:brblack
SETUVAR pure_color_nixdevshell_prefix:pure_color_info
SETUVAR pure_color_nixdevshell_symbol:pure_color_mute
SETUVAR pure_color_normal:normal
SETUVAR pure_color_prefix_root_prompt:pure_color_danger
SETUVAR pure_color_primary:blue
SETUVAR pure_color_prompt_on_error:pure_color_danger
SETUVAR pure_color_prompt_on_success:pure_color_success
SETUVAR pure_color_success:magenta
SETUVAR pure_color_system_time:pure_color_mute
SETUVAR pure_color_username_normal:pure_color_mute
SETUVAR pure_color_username_root:pure_color_light
SETUVAR pure_color_virtualenv:pure_color_mute
SETUVAR pure_color_warning:yellow
SETUVAR pure_enable_aws_profile:true
SETUVAR pure_enable_container_detection:true
SETUVAR pure_enable_git:true
SETUVAR pure_enable_k8s:false
SETUVAR pure_enable_nixdevshell:false
SETUVAR pure_enable_single_line_prompt:false
SETUVAR pure_enable_virtualenv:true
SETUVAR pure_reverse_prompt_symbol_in_vimode:true
SETUVAR pure_separate_prompt_on_error:false
SETUVAR pure_shorten_prompt_current_directory_length:0
SETUVAR pure_shorten_window_title_current_directory_length:0
SETUVAR pure_show_jobs:false
SETUVAR pure_show_prefix_root_prompt:false
SETUVAR pure_show_subsecond_command_duration:false
SETUVAR pure_show_system_time:false
SETUVAR pure_symbol_aws_profile_prefix:
SETUVAR pure_symbol_container_prefix:
SETUVAR pure_symbol_git_dirty:\x2a
SETUVAR pure_symbol_git_stash:\u2261
SETUVAR pure_symbol_git_unpulled_commits:\u21e3
SETUVAR pure_symbol_git_unpushed_commits:\u21e1
SETUVAR pure_symbol_k8s_prefix:\u2638
SETUVAR pure_symbol_nixdevshell_prefix:\u2744\ufe0f
SETUVAR pure_symbol_prefix_root_prompt:\x23
SETUVAR pure_symbol_prompt:\u276f
SETUVAR pure_symbol_reverse_prompt:\u276e
SETUVAR pure_symbol_ssh_prefix:
SETUVAR pure_symbol_title_bar_separator:\x2d
SETUVAR pure_symbol_virtualenv_prefix:
SETUVAR pure_threshold_command_duration:5
SETUVAR pure_truncate_prompt_current_directory_keeps:\x2d1
SETUVAR pure_truncate_window_title_current_directory_keeps:\x2d1</file><file path="kitty/kitty.conf">include ./wallust.conf</file><file path="kitty/theme.conf"># Enchanted Lavender Dark for Kitty

background              #0C0D11
foreground              #CACEE2
selection_background    #E3C2FF
selection_foreground    #1A1A1A
cursor                  #A8AEFF
cursor_text_color       #1A1A1A
url_color               #9EA0FF

active_tab_foreground   #CACEE2
active_tab_background   #151720
inactive_tab_foreground #6B718A
inactive_tab_background #1D202B
tab_bar_background      #0C0D11

# Normal colors
color0  #0C0D11
color1  #FF6B81
color2  #9AE99A
color3  #FFBB66
color4  #A8AEFF
color5  #E3C2FF
color6  #8EABFF
color7  #CACEE2

# Bright colors
color8  #151720
color9  #FF8497
color10 #B3F7B3
color11 #FFD388
color12 #BFC5FF
color13 #F3DEFF
color14 #A8C7FF
color15 #FFFFFF</file><file path="kitty/wallust.conf"># The kitty terminal template for wallust
# Add to wallust config: kitty = { src=&apos;kitty.conf&apos;, dst=&apos;~/.config/kitty/colors.conf&apos;}
# And add to kitty config: include colors.conf

cursor #CDC8B2

background #0F0F13
foreground #FCFAE6

color0 #3A3A3E
color1 #8C7F5E
color2 #9D957D
color3 #9A96DE
color4 #ABB2C9
color5 #B8B892
color6 #F7F2B8
color7 #F3F0D3
color8 #AAA894
color9 #8C7F5E
color10 #9D957D
color11 #9A96DE
color12 #ABB2C9
color13 #B8B892
color14 #F7F2B8
color15 #F3F0D3

mark1_foreground #F7EF93
mark2_foreground #F3ECA9
mark3_foreground #F7EF93</file><file path="niri/config.kdl">// Niri configuration for CachyOS
// For documentation and full reference, see: https://github.com/YaLTeR/niri/wiki

// ────────────── Input Configuration ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input

input {
    keyboard {
        xkb {
            layout &quot;de&quot; // Use the German keyboard layout
        }
        numlock // Enable numlock on startup
    }

    touchpad {
        tap // Enable tap-to-click
        natural-scroll // Enable natural (macOS-style) scrolling
    }

    focus-follows-mouse // Automatically focus windows under the mouse pointer
    workspace-auto-back-and-forth // Enable workspace back &amp; forth switching
}

// ────────────── Output Configuration ──────────────
// You can run `niri msg outputs` to get the correct name for your displays.
// You will have to remove &quot;/-&quot; and edit it before it takes effect.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs

 output &quot;DP-1&quot; {
    mode &quot;2560x1440@359.979&quot; // Set resolution and refresh rate
    scale 1 // No scaling (use 2 for HiDPI)
}

// ────────────── Keybindings ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Key-Bindings

binds {
    MOD+SHIFT+ESCAPE                     { show-hotkey-overlay; }

    // ─── Applications ───
    MOD+RETURN                          hotkey-overlay-title=&quot;Open Terminal: Kitty&quot; { spawn &quot;kitty&quot;; }
    MOD+CTRL+RETURN                     hotkey-overlay-title=&quot;Open App Launcher: QS&quot; { spawn &quot;qs&quot; &quot;ipc&quot; &quot;call&quot; &quot;globalIPC&quot; &quot;toggleLauncher&quot;; }
    MOD+B                               hotkey-overlay-title=&quot;Open Browser: firefox&quot; { spawn &quot;firefox&quot;; }
    MOD+ALT+L                           hotkey-overlay-title=&quot;Lock Screen: swaylock&quot; { spawn &quot;swaylock&quot;; }
    
    // Please choose your own file manager
    MOD+E                             hotkey-overlay-title=&quot;File Manager: Nautilus&quot; { spawn &quot;nautilus&quot;; }

    // ─── Audio Controls ───
    XF86AUDIORAISEVOLUME                allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-volume&quot; &quot;@DEFAULT_AUDIO_SINK@&quot; &quot;0.1+&quot;; }
    XF86AUDIOLOWERVOLUME                allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-volume&quot; &quot;@DEFAULT_AUDIO_SINK@&quot; &quot;0.1-&quot;; }
    XF86AUDIOMUTE                       allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-mute&quot; &quot;@DEFAULT_AUDIO_SINK@&quot; &quot;toggle&quot;; }
    XF86AUDIOMICMUTE                    allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-mute&quot; &quot;@DEFAULT_AUDIO_SOURCE@&quot; &quot;toggle&quot;; }

    // ─── Window Movement and Focus ───
    MOD+Q                               { close-window; }

    MOD+LEFT                            { focus-column-left; }
    MOD+H                               { focus-column-left; }
    MOD+RIGHT                           { focus-column-right; }
    MOD+L                               { focus-column-right; }
    MOD+UP                              { focus-window-up; }
    MOD+K                               { focus-window-up; }
    MOD+DOWN                            { focus-window-down; }
    MOD+J                               { focus-window-down; }

    MOD+CTRL+LEFT                       { move-column-left; }
    MOD+CTRL+H                          { move-column-left; }
    MOD+CTRL+RIGHT                      { move-column-right; }
    MOD+CTRL+L                          { move-column-right; }
    MOD+CTRL+UP                         { move-window-up; }
    MOD+CTRL+K                          { move-window-up; }
    MOD+CTRL+DOWN                       { move-window-down; }
    MOD+CTRL+J                          { move-window-down; }

    MOD+HOME                            { focus-column-first; }
    MOD+END                             { focus-column-last; }
    MOD+CTRL+HOME                       { move-column-to-first; }
    MOD+CTRL+END                        { move-column-to-last; }

    MOD+SHIFT+LEFT                      { focus-monitor-left; }
    MOD+SHIFT+RIGHT                     { focus-monitor-right; }
    MOD+SHIFT+UP                        { focus-monitor-up; }
    MOD+SHIFT+DOWN                      { focus-monitor-down; }

    MOD+SHIFT+CTRL+LEFT                 { move-column-to-monitor-left; }
    MOD+SHIFT+CTRL+RIGHT                { move-column-to-monitor-right; }
    MOD+SHIFT+CTRL+UP                   { move-column-to-monitor-up; }
    MOD+SHIFT+CTRL+DOWN                 { move-column-to-monitor-down; }

    // ─── Workspace Switching ───
    MOD+WHEELSCROLLDOWN                 cooldown-ms=150 { focus-workspace-down; }
    MOD+WHEELSCROLLUP                   cooldown-ms=150 { focus-workspace-up; }
    MOD+CTRL+WHEELSCROLLDOWN            cooldown-ms=150 { move-column-to-workspace-down; }
    MOD+CTRL+WHEELSCROLLUP              cooldown-ms=150 { move-column-to-workspace-up; }

    MOD+WHEELSCROLLRIGHT                { focus-column-right; }
    MOD+WHEELSCROLLLEFT                 { focus-column-left; }
    MOD+CTRL+WHEELSCROLLRIGHT           { move-column-right; }
    MOD+CTRL+WHEELSCROLLLEFT            { move-column-left; }

    MOD+SHIFT+WHEELSCROLLDOWN           { focus-column-right; }
    MOD+SHIFT+WHEELSCROLLUP             { focus-column-left; }
    MOD+CTRL+SHIFT+WHEELSCROLLDOWN      { move-column-right; }
    MOD+CTRL+SHIFT+WHEELSCROLLUP        { move-column-left; }

    MOD+1                               { focus-workspace 1; }
    MOD+2                               { focus-workspace 2; }
    MOD+3                               { focus-workspace 3; }
    MOD+4                               { focus-workspace 4; }
    MOD+5                               { focus-workspace 5; }
    MOD+6                               { focus-workspace 6; }
    MOD+7                               { focus-workspace 7; }
    MOD+8                               { focus-workspace 8; }
    MOD+9                               { focus-workspace 9; }

    MOD+CTRL+1                          { move-column-to-workspace 1; }
    MOD+CTRL+2                          { move-column-to-workspace 2; }
    MOD+CTRL+3                          { move-column-to-workspace 3; }
    MOD+CTRL+4                          { move-column-to-workspace 4; }
    MOD+CTRL+5                          { move-column-to-workspace 5; }
    MOD+CTRL+6                          { move-column-to-workspace 6; }
    MOD+CTRL+7                          { move-column-to-workspace 7; }
    MOD+CTRL+8                          { move-column-to-workspace 8; }
    MOD+CTRL+9                          { move-column-to-workspace 9; }

    MOD+TAB                             { focus-workspace-previous; }

    // ─── Layout Controls ───
    MOD+CTRL+F                          { expand-column-to-available-width; }
    MOD+C                               { center-column; }
    MOD+CTRL+C                          { center-visible-columns; }
    MOD+MINUS                           { set-column-width &quot;-10%&quot;; }
    MOD+EQUAL                           { set-column-width &quot;+10%&quot;; }
    MOD+SHIFT+MINUS                     { set-window-height &quot;-10%&quot;; }
    MOD+SHIFT+EQUAL                     { set-window-height &quot;+10%&quot;; }

    // ─── Modes ───
    MOD+T                               { toggle-window-floating; }
    MOD+F                               { fullscreen-window; }
    MOD+W                               { toggle-column-tabbed-display; }

    // ─── Screenshots ───
    CTRL+SHIFT+1                        { screenshot; }
    CTRL+SHIFT+2                        { screenshot-screen; }
    CTRL+SHIFT+3                        { screenshot-window; }

    // ─── Emergency Escape Key ───
    // Use this when a fullscreen app blocks your keybinds.
    // It disables any active keyboard shortcut inhibitor, restoring control.
    MOD+ESCAPE                          allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // ─── Exit / Power ───
    CTRL+ALT+DELETE                     { quit; } // Also quits Niri
    MOD+SHIFT+P                         { power-off-monitors; } // Turn off screens (useful for OLED or privacy)
    MOD+O                               repeat=false { toggle-overview; }
}

// ────────────── Startup Applications ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Miscellaneous#spawn-at-startup

    spawn-at-startup &quot;/usr/lib/polkit-kde-authentication-agent-1&quot; &quot;&amp;&quot; // Polkit
    spawn-at-startup &quot;xwayland-satellite&quot; // XWayland support
    spawn-at-startup &quot;swww-daemon&quot; // Wallpaper daemon
    spawn-at-startup &quot;swww img&quot; &quot;/usr/share/wallpapers/cachyos-wallpapers/Skyscraper.png&quot; // Set wallpaper
    spawn-at-startup &quot;qs&quot; // Launch Quickshell
    spawn-at-startup &quot;vesktop&quot; // Launch Vesktop

    prefer-no-csd // Disable program decorations
    screenshot-path null // Disable screenshot saving

// ────────────── Layout Settings ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout

    layout {
        gaps 16 // Gap between windows
        center-focused-column &quot;never&quot; // Don’t auto-center focused column

        preset-column-widths {
            proportion 0.33333
            proportion 0.5
            proportion 0.66667
        }

        focus-ring {
            width 3
            active-color &quot;#ABB2C9&quot;
            inactive-color &quot;#3A3A3E&quot;
        }

        shadow {
            softness 30
            spread 5
            offset x=0 y=5
            color &quot;#0007&quot;
        }

        background-color &quot;transparent&quot;

        struts {}
    }

// ────────────── Animation Settings ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
    animations {
        workspace-switch {
            spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
        }
        window-open {
            duration-ms 200
            curve &quot;ease-out-quad&quot;
        }
        window-close {
            duration-ms 200
            curve &quot;ease-out-cubic&quot;
        }
        horizontal-view-movement {
            spring damping-ratio=1.0 stiffness=900 epsilon=0.0001
        }
        window-movement {
            spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
        }
        window-resize {
            spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
        }
        config-notification-open-close {
            spring damping-ratio=0.6 stiffness=1200 epsilon=0.001
        }
        screenshot-ui-open {
            duration-ms 300
            curve &quot;ease-out-quad&quot;
        }
        overview-open-close {
            spring damping-ratio=1.0 stiffness=900 epsilon=0.0001
        }
    }

// ────────────── Named Workspaces ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

    workspace &quot;browser&quot;
    workspace &quot;chat&quot;

// ────────────── Window Rules ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

    window-rule {
        match at-startup=true app-id=&quot;vesktop&quot;
        open-on-workspace &quot;chat&quot;
        open-maximized true
    }

    window-rule {
        match app-id=&quot;firefox&quot;
        open-on-workspace &quot;browser&quot;
        open-maximized true
    }

    window-rule {
        match app-id=r#&quot;firefox$&quot;# title=&quot;^Picture-in-Picture$&quot;
        open-floating true // Always float Firefox PiP windows
    }

    window-rule {
        geometry-corner-radius 20 // Set every window radius to 20
        clip-to-geometry true
    }

// ────────────── Layer Rules ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layer-Rules

    layer-rule {
        match namespace=&quot;^swww-daemon$&quot;
        place-within-backdrop true
    }

    layer-rule {
        match namespace=&quot;^quickshell-wallpaper$&quot;
    }

    layer-rule {
        match namespace=&quot;^quickshell-overview$&quot;
        place-within-backdrop true
    }

// ────────────── Environment Variables ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Miscellaneous#environment

    environment {
        DISPLAY &quot;:1&quot;
        ELECTRON_OZONE_PLATFORM_HINT &quot;auto&quot;
        QT_QPA_PLATFORM &quot;wayland&quot;
        QT_WAYLAND_DISABLE_WINDOWDECORATION &quot;1&quot;
        XDG_SESSION_TYPE &quot;wayland&quot;
        XDG_CURRENT_DESKTOP &quot;niri&quot;
    }

// ────────────── Misc ──────────────
hotkey-overlay {
    skip-at-startup
}</file><file path="quickshell/.github/workflows/build-and-release.yml">name: Build and Release

on:
  push:
    tags:
      - &apos;v*&apos;
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Zig
      uses: mlugg/setup-zig@v2
      with:
        version: 0.14.0
        
    - name: Clone pikabar source
      run: |
        git clone https://git.pika-os.com/wm-packages/pikabar.git
        
    - name: Create Programs directory
      run: mkdir -p ${{ github.workspace }}/Programs
        
    - name: Build zigstat
      run: |
        cd pikabar/src/zigstat
        zig build-exe src/main.zig -O ReleaseSmall -mcpu x86_64_v2 --name zigstat
        mv zigstat ${{ github.workspace }}/Programs/
        
    - name: Build zigbrightness
      run: |
        cd pikabar/src/zigbrightness
        zig build-exe src/main.zig -O ReleaseSmall -mcpu x86_64_v2 --name zigbrightness
        mv zigbrightness ${{ github.workspace }}/Programs/
        
    - name: Create release archive
      run: |
        # Create a clean output directory
        mkdir -p ../noctalia-release
        
        # Copy all files except .git, .github, and pikabar
        cp -r . ../noctalia-release/
        rm -rf ../noctalia-release/.git
        rm -rf ../noctalia-release/.github
        rm -rf ../noctalia-release/pikabar
        
        # Create the archives
        cd ..
        tar -czf noctalia-${{ github.ref_name }}.tar.gz noctalia-release/
        cp noctalia-${{ github.ref_name }}.tar.gz noctalia-latest.tar.gz
        
        # Move archives to workspace
        mv *.tar.gz ${{ github.workspace }}/
        
    - name: Upload Release Asset
      if: github.event_name == &apos;release&apos;
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./noctalia-${{ github.ref_name }}.tar.gz
        asset_name: noctalia-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Latest Release Asset
      if: github.event_name == &apos;release&apos;
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./noctalia-latest.tar.gz
        asset_name: noctalia-latest.tar.gz
        asset_content_type: application/gzip
        
    - name: Create Release
      if: github.event_name == &apos;push&apos; &amp;&amp; startsWith(github.ref, &apos;refs/tags/&apos;)
      uses: softprops/action-gh-release@v1
      with:
        files: |
          noctalia-${{ github.ref_name }}.tar.gz
          noctalia-latest.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}</file><file path="quickshell/Bar/Modules/ActiveWindow.qml">import QtQuick
import Quickshell
import Quickshell.Wayland
import Quickshell.Widgets
import qs.Components
import qs.Settings

PanelWindow {
    id: activeWindowPanel

    // Lower case &quot;screen&quot; from modelData
    property int barHeight: 36 * Theme.scale(screen)

    screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    WlrLayershell.exclusionMode: ExclusionMode.Ignore
    anchors.top: true
    anchors.left: true
    anchors.right: true
    focusable: false
    margins.top: barHeight
    visible: Settings.settings.showActiveWindow &amp;&amp; !activeWindowWrapper.finallyHidden 
    implicitHeight: activeWindowTitleContainer.height
    implicitWidth: 0
    color: &quot;transparent&quot;

    function getIcon() {
        var icon = Quickshell.iconPath(ToplevelManager.activeToplevel.appId.toLowerCase(), true);
        if (!icon) {
            icon = Quickshell.iconPath(ToplevelManager.activeToplevel.appId, true);
        }
        if (!icon) {
            icon = Quickshell.iconPath(ToplevelManager.activeToplevel.title, true);
        }
        if (!icon) {
            icon = Quickshell.iconPath(ToplevelManager.activeToplevel.title.toLowerCase(), &quot;application-x-executable&quot;);
        }

        return icon;
    }

    Item {
        id: activeWindowWrapper
        width: parent.width
        property int fullHeight: activeWindowTitleContainer.height
        property bool shouldShow: false
        property bool finallyHidden: false

        Timer {
            id: visibilityTimer
            interval: 1500
            running: false
            onTriggered: {
                activeWindowWrapper.shouldShow = false;
                hideTimer.restart();
            }
        }

        Timer {
            id: hideTimer
            interval: 300
            running: false
            onTriggered: {
                activeWindowWrapper.finallyHidden = true;
            }
        }

        Connections {
            target: ToplevelManager
            function onActiveToplevelChanged() {
                if (ToplevelManager.activeToplevel?.appId) {
                    activeWindowWrapper.shouldShow = true;
                    activeWindowWrapper.finallyHidden = false;
                    visibilityTimer.restart();
                } else {
                    activeWindowWrapper.shouldShow = false;
                    hideTimer.restart();
                    visibilityTimer.stop();
                }
            }
        }

        y: shouldShow ? 0 : -activeWindowPanel.barHeight
        height: shouldShow ? fullHeight : 1
        opacity: shouldShow ? 1 : 0
        clip: true

        Behavior on height {
            NumberAnimation {
                duration: 300
                easing.type: Easing.OutQuad
            }
        }
        Behavior on y {
            NumberAnimation {
                duration: 300
                easing.type: Easing.OutQuad
            }
        }
        Behavior on opacity {
            NumberAnimation {
                duration: 250
            }
        }

        Rectangle {
            id: activeWindowTitleContainer
            color: Theme.backgroundPrimary
            width: Math.min(barBackground.width - 200, activeWindowTitle.implicitWidth + (Settings.settings.showActiveWindowIcon ? 28 : 22)) + 16
            height: activeWindowTitle.implicitHeight + 12
            anchors.top: parent.top
            anchors.horizontalCenter: parent.horizontalCenter
            bottomLeftRadius: Math.max(0, width / 2)
            bottomRightRadius: Math.max(0, width / 2)

            IconImage {
                id: icon
                width: 12
                height: 12
                anchors.left: parent.left
                anchors.leftMargin: 14
                anchors.verticalCenter: parent.verticalCenter
                source: ToplevelManager?.activeToplevel ? getIcon() : &quot;&quot;
                visible: Settings.settings.showActiveWindowIcon
                anchors.verticalCenterOffset: -3

            }

            Text {
                id: activeWindowTitle
                text: ToplevelManager?.activeToplevel?.title &amp;&amp; ToplevelManager?.activeToplevel?.title.length &gt; 60 ? ToplevelManager?.activeToplevel?.title.substring(0, 60) + &quot;...&quot; : ToplevelManager?.activeToplevel?.title || &quot;&quot;
                font.pixelSize: 12 * Theme.scale(screen)
                color: Theme.textSecondary
                anchors.left: icon.right
                anchors.leftMargin: Settings.settings.showActiveWindowIcon ? 4 : 6
                anchors.right: parent.right
                anchors.rightMargin: 14
                anchors.verticalCenter: parent.verticalCenter
                anchors.verticalCenterOffset: -3
                horizontalAlignment: Settings.settings.showActiveWindowIcon ? Text.AlignRight : Text.AlignHCenter
                verticalAlignment: Text.AlignVCenter
                maximumLineCount: 1
            }
           
        }
    }
}</file><file path="quickshell/Bar/Modules/Applauncher.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import Quickshell.Wayland
import Quickshell.Widgets
import qs.Components
import qs.Settings

import &quot;../../Helpers/Fuzzysort.js&quot; as Fuzzysort

PanelWithOverlay {
    Timer {
        id: clipboardTimer
        interval: 1000
        repeat: true
        running: appLauncherPanel.visible
        onTriggered: {
            updateClipboardHistory();
        }
    }

    property var clipboardHistory: []
    property bool clipboardInitialized: false

    Process {
        id: clipboardTypeProcess
        property bool isLoading: false
        property var currentTypes: []

        onExited: (exitCode, exitStatus) =&gt; {
            if (exitCode === 0) {
                currentTypes = String(stdout.text).trim().split(&apos;\n&apos;).filter(t =&gt; t);

                const imageType = currentTypes.find(t =&gt; t.startsWith(&apos;image/&apos;));
                if (imageType) {
                    clipboardImageProcess.mimeType = imageType;
                    clipboardImageProcess.command = [&quot;sh&quot;, &quot;-c&quot;, `wl-paste -n -t &quot;${imageType}&quot; | base64 -w 0`];
                    clipboardImageProcess.running = true;
                } else {

                    clipboardHistoryProcess.command = [&quot;wl-paste&quot;, &quot;-n&quot;, &quot;--type&quot;, &quot;text/plain&quot;];
                    clipboardHistoryProcess.running = true;
                }
            } else {

                clipboardTypeProcess.isLoading = false;
            }
        }

        stdout: StdioCollector {}
    }

    Process {
        id: clipboardImageProcess
        property string mimeType: &quot;&quot;

        onExited: (exitCode, exitStatus) =&gt; {
            if (exitCode === 0) {
                const base64 = stdout.text.trim();
                if (base64) {
                    const entry = {
                        type: &apos;image&apos;,
                        mimeType: mimeType,
                        data: `data:${mimeType};base64,${base64}`,
                        timestamp: new Date().getTime()
                    };
                    
    
                    const exists = clipboardHistory.find(item =&gt; 
                        item.type === &apos;image&apos; &amp;&amp; item.data === entry.data
                    );

                    if (!exists) {
                        clipboardHistory = [entry, ...clipboardHistory].slice(0, 20);
                        root.updateFilter();
                    }
                }
            }
            
            if (!clipboardHistoryProcess.isLoading) {
                clipboardInitialized = true;
            }
            clipboardTypeProcess.isLoading = false;
        }

        stdout: StdioCollector {}
    }

    Process {
        id: clipboardHistoryProcess
        property bool isLoading: false

        onExited: (exitCode, exitStatus) =&gt; {
            if (exitCode === 0) {
                const content = String(stdout.text).trim();
                // Only filter out self path to avoid capturing this file
                const isSelfPath = content.indexOf(&quot;/home/lysec/.config/quickshell/Bar/Modules/Applauncher.qml&quot;) !== -1;
                if (content &amp;&amp; !isSelfPath) {
                    const entry = {
                        type: &apos;text&apos;,
                        content: content,
                        timestamp: new Date().getTime()
                    };

    
                    const exists = clipboardHistory.find(item =&gt; {
                        if (item.type === &apos;text&apos;) {
                            return item.content === content;
                        }
        
                        return item === content;
                    });

                    if (!exists) {
        
                        const newHistory = clipboardHistory.map(item =&gt; {
                            if (typeof item === &apos;string&apos;) {
                                return {
                                    type: &apos;text&apos;,
                                    content: item,
                                    timestamp: new Date().getTime()
                                };
                            }
                            return item;
                        });
                        
                        clipboardHistory = [entry, ...newHistory].slice(0, 20);
                    }
                }
            } else {

                clipboardHistoryProcess.isLoading = false;
            }
            clipboardInitialized = true;
            clipboardTypeProcess.isLoading = false;
            root.updateFilter();
        }

        stdout: StdioCollector {}
    }

    Process {
        id: clipboardImageCopyProcess
        property string mimeType: &quot;&quot;
        property string pendingBase64: &quot;&quot;
        // Simple FIFO queue for repeated copy requests
        property var queue: []
        stdinEnabled: true

        command: [
            &quot;sh&quot;,
            &quot;-c&quot;,
            &quot;base64 -d | wl-copy -t &apos;&quot; + mimeType + &quot;&apos;&quot;
        ]
        function copyBase64(mime, base64) {
            // If a copy is in progress or pending, queue the next request
            if (running || (pendingBase64 &amp;&amp; pendingBase64.length &gt; 0)) {
                var q = queue.slice();
                q.push({ mime: mime, base64: base64 });
                queue = q;
                return;
            }
            mimeType = mime;
            pendingBase64 = base64;
            running = true;
        }
        onStarted: {
            // ensure stdin is open for each new run
            stdinEnabled = true;
            if (pendingBase64 &amp;&amp; pendingBase64.length &gt; 0) {
                write(pendingBase64);
            }
            // Close stdin to signal EOF so base64 exits
            stdinEnabled = false;
        }
        onExited: (exitCode, exitStatus) =&gt; {
            pendingBase64 = &quot;&quot;;
            // re-open stdin for the next run so we can copy repeatedly
            stdinEnabled = true;
            if (queue.length &gt; 0) {
                var next = queue[0];
                // pop front
                var q2 = queue.slice(1);
                queue = q2;
                mimeType = next.mime;
                pendingBase64 = next.base64;
                running = true;
            }
        }
        stdout: StdioCollector {}
    }

    // Process to copy arbitrary text via stdin to avoid quoting/ARG_MAX issues
    Process {
        id: clipboardTextCopyProcess
        property string pendingText: &quot;&quot;
        property var queue: []
        stdinEnabled: true

        command: [
            &quot;sh&quot;,
            &quot;-c&quot;,
            &quot;cat | wl-copy -t text/plain;charset=utf-8&quot;
        ]

        function copyText(text) {
            if (running || (pendingText &amp;&amp; pendingText.length &gt; 0)) {
                var q = queue.slice();
                q.push(text);
                queue = q;
                return;
            }
            pendingText = text;
            running = true;
        }

        onStarted: {
            stdinEnabled = true;
            if (pendingText &amp;&amp; pendingText.length &gt; 0) {
                write(pendingText);
            }
            stdinEnabled = false;
        }
        onExited: (exitCode, exitStatus) =&gt; {
            pendingText = &quot;&quot;;
            stdinEnabled = true;
            if (queue.length &gt; 0) {
                var next = queue[0];
                queue = queue.slice(1);
                pendingText = next;
                running = true;
            }
        }
        stdout: StdioCollector {}
    }

    

    function updateClipboardHistory() {
        if (!clipboardTypeProcess.isLoading &amp;&amp; !clipboardHistoryProcess.isLoading) {
            clipboardTypeProcess.isLoading = true;
            clipboardTypeProcess.command = [&quot;wl-paste&quot;, &quot;-l&quot;];
            clipboardTypeProcess.running = true;
        }
    }

    id: appLauncherPanel
    WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand
    
    function isPinned(app) {
        return app &amp;&amp; app.execString &amp;&amp; Settings.settings.pinnedExecs.indexOf(app.execString) !== -1;
    }

    function togglePin(app) {
        if (!app || !app.execString) return;
        var arr = Settings.settings.pinnedExecs ? Settings.settings.pinnedExecs.slice() : [];
        var idx = arr.indexOf(app.execString);
        if (idx === -1) {
            arr.push(app.execString);
        } else {
            arr.splice(idx, 1);
        }
        Settings.settings.pinnedExecs = arr;
        root.updateFilter();
    }
    
    function showAt() {
        appLauncherPanelRect.showAt();
    }

    function hidePanel() {
        appLauncherPanelRect.hidePanel();
    }

    function show() {
        appLauncherPanelRect.showAt();
    }

    function dismiss() {
        appLauncherPanelRect.hidePanel();
    }

    Rectangle {
        id: appLauncherPanelRect
        implicitWidth: 460
        implicitHeight: 640
        color: &quot;transparent&quot;
        visible: parent.visible
        property bool shouldBeVisible: false
        anchors.top: parent.top
        anchors.horizontalCenter: parent.horizontalCenter

        function showAt() {
            appLauncherPanel.visible = true;
            shouldBeVisible = true;
            searchField.forceActiveFocus();
            root.selectedIndex = 0;
            root.appModel = DesktopEntries.applications.values;
            root.updateFilter();
            // Start clipboard refresh immediately on open so &gt;clip is ready
            updateClipboardHistory();
        }

        function hidePanel() {
            shouldBeVisible = false;
            searchField.text = &quot;&quot;;
            root.selectedIndex = 0;
        }

        // Prevent closing when clicking in the panel bg
        MouseArea {
            anchors.fill: parent
        }

        Rectangle {
            id: root
            width: 460
            height: 640
            x: (parent.width - width) / 2
            color: Theme.backgroundPrimary
            bottomLeftRadius: 28
            bottomRightRadius: 28

            property var appModel: DesktopEntries.applications.values
            property var filteredApps: []
            property int selectedIndex: 0
            property int targetY: (parent.height - height) / 2
            y: appLauncherPanelRect.shouldBeVisible ? targetY : -height
            Behavior on y {
                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }
            }
            scale: appLauncherPanelRect.shouldBeVisible ? 1 : 0
            Behavior on scale {
                NumberAnimation {
                    duration: 200
                    easing.type: Easing.InOutCubic
                }
            }
            onScaleChanged: {
                if (scale === 0 &amp;&amp; !appLauncherPanelRect.shouldBeVisible) {
                    appLauncherPanel.visible = false;
                }
            }

            function isMathExpression(str) {
                return /^[-+*/().0-9\s]+$/.test(str);
            }

            function safeEval(expr) {
                try {
                    return Function(&apos;return (&apos; + expr + &apos;)&apos;)();
                } catch (e) {
                    return undefined;
                }
            }

            function updateFilter() {
                var query = searchField.text ? searchField.text.toLowerCase() : &quot;&quot;;
                var apps = root.appModel.slice();
                var results = [];
                

                if (query === &quot;&gt;&quot;) {
                    results.push({
                        isCommand: true,
                        name: &quot;&gt;calc&quot;,
                        content: &quot;Calculator - evaluate mathematical expressions&quot;,
                        icon: &quot;calculate&quot;,
                        execute: function() {
                            searchField.text = &quot;&gt;calc &quot;;
                            searchField.cursorPosition = searchField.text.length;
                        }
                    });
                    
                    results.push({
                        isCommand: true,
                        name: &quot;&gt;clip&quot;,
                        content: &quot;Clipboard history - browse and restore clipboard items&quot;,
                        icon: &quot;content_paste&quot;,
                        execute: function() {
                            searchField.text = &quot;&gt;clip &quot;;
                            searchField.cursorPosition = searchField.text.length;
                        }
                    });
                    
                    root.filteredApps = results;
                    return;
                }
                

                if (query.startsWith(&quot;&gt;clip&quot;)) {
                    if (!clipboardInitialized) {
                        updateClipboardHistory();
                    }
                    const searchTerm = query.slice(5).trim();
                    
                    clipboardHistory.forEach(function(clip, index) {
                        let searchContent = clip.type === &apos;image&apos; ? 
                            clip.mimeType : 
                            clip.content || clip;  // Support both new object format and old string format
                            
                        if (!searchTerm || searchContent.toLowerCase().includes(searchTerm)) {
                            let entry;
                            if (clip.type === &apos;image&apos;) {
                                entry = {
                                    isClipboard: true,
                                    name: &quot;Image from &quot; + new Date(clip.timestamp).toLocaleTimeString(),
                                    content: &quot;Image: &quot; + clip.mimeType,
                                    icon: &quot;image&quot;,
                                    type: &apos;image&apos;,
                                    data: clip.data,
                                    execute: function() {
                                        // Restore image via stdin to avoid command-length limits
                                        const base64Data = clip.data.split(&apos;,&apos;)[1];
                                        clipboardImageCopyProcess.copyBase64(clip.mimeType, base64Data);
                                        Quickshell.execDetached([&quot;notify-send&quot;, &quot;Clipboard&quot;, &quot;Image copied: &quot; + clip.mimeType]);
                                    }
                                };
                            } else {
                                const textContent = clip.content || clip;  // Support both new object format and old string format
                                let displayContent = textContent;
                                let previewContent = &quot;&quot;;
                                
                                // Clean up whitespace for display
                                displayContent = displayContent.replace(/\s+/g, &apos; &apos;).trim();
                                
                                // Truncate long content and show preview
                                if (displayContent.length &gt; 50) {
                                    previewContent = displayContent;
                                    // Show first line or first 50 characters as title
                                    displayContent = displayContent.split(&apos;\n&apos;)[0].substring(0, 50) + &quot;...&quot;;
                                }
                                
                                entry = {
                                    isClipboard: true,
                                    name: displayContent,
                                    content: previewContent || textContent,
                                    icon: &quot;content_paste&quot;,
                                    execute: function() {
                                        // Set Quickshell clipboard as primary path; also stream to wl-copy for system clipboard
                                        Quickshell.clipboardText = String(textContent);
                                        clipboardTextCopyProcess.copyText(String(textContent));
                                        var preview = (textContent.length &gt; 50) ? textContent.slice(0,50) + &quot;…&quot; : textContent;
                                        Quickshell.execDetached([&quot;notify-send&quot;, &quot;Clipboard&quot;, &quot;Text copied: &quot; + preview]);
                                    }
                                };
                            }
                            results.push(entry);
                        }
                    });
                    
                    if (results.length === 0) {
                        results.push({
                            isClipboard: true,
                            name: &quot;No clipboard history&quot;,
                            content: &quot;No matching clipboard entries found&quot;,
                            icon: &quot;content_paste_off&quot;
                        });
                    }
                    
                    root.filteredApps = results;
                    return;
                }
                

                if (query.startsWith(&quot;&gt;calc&quot;)) {
                    var expr = searchField.text.slice(5).trim();
                    if (expr &amp;&amp; isMathExpression(expr)) {
                        var value = safeEval(expr);
                        if (value !== undefined &amp;&amp; value !== null &amp;&amp; value !== &quot;&quot;) {
                            results.push({
                                isCalculator: true,
                                name: `Calculator: ${expr} = ${value}`,
                                result: value,
                                expr: expr,
                                icon: &quot;calculate&quot;
                            });
                        }
                    }
                    
    
                    var pinned = [];
                    var unpinned = [];
                    for (var i = 0; i &lt; results.length; ++i) {
                        var app = results[i];
                        if (app.execString &amp;&amp; Settings.settings.pinnedExecs.indexOf(app.execString) !== -1) {
                            pinned.push(app);
                        } else {
                            unpinned.push(app);
                        }
                    }
                    // Sort pinned apps alphabetically for consistent display
                    pinned.sort(function(a, b) {
                        return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
                    });
                    root.filteredApps = pinned.concat(unpinned);
                    root.selectedIndex = 0;
                    return;
                }
                if (!query) {
                    results = results.concat(apps.sort(function (a, b) {
                        return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
                    }));
                } else {
                    var fuzzyResults = Fuzzysort.go(query, apps, {
                        keys: [&quot;name&quot;, &quot;comment&quot;, &quot;genericName&quot;]
                    });
                    results = results.concat(fuzzyResults.map(function (r) {
                        return r.obj;
                    }));
                }

                var pinned = [];
                var unpinned = [];
                for (var i = 0; i &lt; results.length; ++i) {
                    var app = results[i];
                    if (app.execString &amp;&amp; Settings.settings.pinnedExecs.indexOf(app.execString) !== -1) {
                        pinned.push(app);
                    } else {
                        unpinned.push(app);
                    }
                }
                // Sort pinned alphabetically
                pinned.sort(function(a, b) {
                    return a.name.toLowerCase().localeCompare(b.name.toLowerCase());
                });
                root.filteredApps = pinned.concat(unpinned);
                root.selectedIndex = 0;
            }

            function selectNext() {
                if (filteredApps.length &gt; 0)
                    selectedIndex = Math.min(selectedIndex + 1, filteredApps.length - 1);
            }

            function selectPrev() {
                if (filteredApps.length &gt; 0)
                    selectedIndex = Math.max(selectedIndex - 1, 0);
            }

            function activateSelected() {
                if (filteredApps.length === 0)
                    return;

                var modelData = filteredApps[selectedIndex];
                const termEmu = Quickshell.env(&quot;TERMINAL&quot;) || Quickshell.env(&quot;TERM_PROGRAM&quot;) || &quot;&quot;;

                if (modelData.isCalculator) {
                    Qt.callLater(function () {
                        Quickshell.clipboardText = String(modelData.result);
                        Quickshell.execDetached([&quot;notify-send&quot;, &quot;Calculator Result&quot;, `${modelData.expr} = ${modelData.result} (copied to clipboard)`]);
                    });
                } else if (modelData.isCommand) {
    
                    modelData.execute();
                    return;
                } else if (modelData.runInTerminal &amp;&amp; termEmu){
                    Quickshell.execDetached([termEmu, &quot;-e&quot;, modelData.execString.trim()]);
                } else if (modelData.execute) {
                    modelData.execute();
                } else {
                    var execCmd = modelData.execString || modelData.exec || &quot;&quot;;
                    if (execCmd) {
                        execCmd = execCmd.replace(/\s?%[fFuUdDnNiCkvm]/g, &apos;&apos;);
                        Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, execCmd.trim()]);
                    }
                }

                appLauncherPanel.hidePanel();
                searchField.text = &quot;&quot;;
            }

            Component.onCompleted: updateFilter()

            RowLayout {
                anchors.fill: parent
                anchors.margins: 32
                spacing: 18

        
                Rectangle {
                    id: previewPanel
                    Layout.preferredWidth: 200
                    Layout.fillHeight: true
                    color: Theme.surface
                    radius: 20
                    visible: false

                    Rectangle {
                        anchors.fill: parent
                        anchors.margins: 16
                        color: &quot;transparent&quot;
                        clip: true

                        Image {
                            id: previewImage
                            anchors.fill: parent
                            fillMode: Image.PreserveAspectFit
                            asynchronous: true
                            cache: true
                            smooth: true
                        }
                    }
                }

        
                ColumnLayout {
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                    spacing: 18

            
                    Rectangle {
                        id: searchBar
                        color: Theme.surfaceVariant
                        radius: 20
                        height: 48
                        Layout.fillWidth: true
                        border.color: searchField.activeFocus ? Theme.accentPrimary : Theme.outline
                        border.width: searchField.activeFocus ? 2 : 1

                        RowLayout {
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.verticalCenter: parent.verticalCenter
                            anchors.leftMargin: 14
                            anchors.rightMargin: 14
                            spacing: 10

                            Text {
                                text: &quot;search&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: Theme.fontSizeHeader * Theme.scale(screen)
                                color: searchField.activeFocus ? Theme.accentPrimary : Theme.textSecondary
                                verticalAlignment: Text.AlignVCenter
                                Layout.alignment: Qt.AlignVCenter
                            }

                            TextField {
                                id: searchField
                                placeholderText: &quot;Search apps...&quot;
                                color: Theme.textPrimary
                                placeholderTextColor: Theme.textSecondary
                                background: null
                                font.family: Theme.fontFamily
                                font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
                                Layout.fillWidth: true
                                Layout.alignment: Qt.AlignVCenter
                                onTextChanged: root.updateFilter()
                                selectedTextColor: Theme.onAccent
                                selectionColor: Theme.accentPrimary
                                padding: 0
                                verticalAlignment: TextInput.AlignVCenter
                                leftPadding: 0
                                rightPadding: 0
                                topPadding: 0
                                bottomPadding: 0
                                font.bold: true
                                Component.onCompleted: contentItem.cursorColor = Theme.textPrimary
                                onActiveFocusChanged: contentItem.cursorColor = Theme.textPrimary

                                Keys.onDownPressed: root.selectNext()
                                Keys.onUpPressed: root.selectPrev()
                                Keys.onEnterPressed: root.activateSelected()
                                Keys.onReturnPressed: root.activateSelected()
                                Keys.onEscapePressed: appLauncherPanel.hidePanel()
                            }
                        }

                        Behavior on border.color {
                            ColorAnimation {
                                duration: 120
                            }
                        }

                        Behavior on border.width {
                            NumberAnimation {
                                duration: 120
                            }
                        }
                    }

            
                    Rectangle {
                        color: Theme.surface
                        radius: 20
                        Layout.fillWidth: true
                        Layout.fillHeight: true
                        clip: true
                        property int innerPadding: 16

                        ListView {
                            id: appList
                            anchors.fill: parent
                            anchors.margins: parent.innerPadding
                            spacing: 2
                            model: root.filteredApps
                            currentIndex: root.selectedIndex
                            delegate: Item {
                                id: appDelegate
                                width: appList.width
                                height: (modelData.isClipboard || modelData.isCommand) ? 64 : 48
                                property bool hovered: mouseArea.containsMouse
                                property bool isSelected: index === root.selectedIndex

                                Rectangle {
                                    anchors.fill: parent
                                    color: (hovered || isSelected)
                                        ? Theme.accentPrimary
                                        : (appLauncherPanel.isPinned(modelData) ? Theme.surfaceVariant : &quot;transparent&quot;)
                                    radius: 12
                                    border.color: appLauncherPanel.isPinned(modelData)
                                        ? &quot;transparent&quot;
                                        : (hovered || isSelected ? Theme.accentPrimary : &quot;transparent&quot;)
                                    border.width: appLauncherPanel.isPinned(modelData) ? 0 : (hovered || isSelected ? 2 : 0)

                                    Behavior on color {
                                        ColorAnimation {
                                            duration: 120
                                        }
                                    }

                                    Behavior on border.color {
                                        ColorAnimation {
                                            duration: 120
                                        }
                                    }

                                    Behavior on border.width {
                                        NumberAnimation {
                                            duration: 120
                                        }
                                    }
                                }

                                RowLayout {
                                    anchors.fill: parent
                                    anchors.leftMargin: 10
                                    anchors.rightMargin: 10
                                    spacing: 10

                                    Item {
                                        width: 28
                                        height: 28
                                        property bool iconLoaded: !modelData.isCalculator &amp;&amp; !modelData.isClipboard &amp;&amp; !modelData.isCommand &amp;&amp; iconImg.status === Image.Ready &amp;&amp; iconImg.source !== &quot;&quot; &amp;&amp; iconImg.status !== Image.Error
                                        
                                        Image {
                                            id: clipboardImage
                                            anchors.fill: parent
                                            visible: modelData.type === &apos;image&apos;
                                            source: modelData.data || &quot;&quot;
                                            fillMode: Image.PreserveAspectCrop
                                            asynchronous: true
                                            cache: true

                                            MouseArea {
                                                anchors.fill: parent
                                                hoverEnabled: true
                                                propagateComposedEvents: true
                                                onContainsMouseChanged: {
                                                    if (containsMouse &amp;&amp; modelData.type === &apos;image&apos;) {
                                                        previewImage.source = modelData.data;
                                                        previewPanel.visible = true;
                                                    } else {
                                                        previewPanel.visible = false;
                                                    }
                                                }
                                                onMouseXChanged: mouse.accepted = false
                                                onMouseYChanged: mouse.accepted = false
                                                onClicked: mouse.accepted = false
                                            }
                                        }

                                        IconImage {
                                            id: iconImg
                                            anchors.fill: parent
                                            asynchronous: true
                                            source: modelData.isCalculator ? &quot;qrc:/icons/calculate.svg&quot; : 
                                                    modelData.isClipboard ? &quot;qrc:/icons/&quot; + modelData.icon + &quot;.svg&quot; :
                                                    modelData.isCommand ? &quot;qrc:/icons/&quot; + modelData.icon + &quot;.svg&quot; :
                                                    Quickshell.iconPath(modelData.icon, &quot;application-x-executable&quot;)
                                            visible: (modelData.isCalculator || modelData.isClipboard || modelData.isCommand || parent.iconLoaded) &amp;&amp; modelData.type !== &apos;image&apos;
                                        }
                                        
                                        Text {
                                            anchors.centerIn: parent
                                            visible: !modelData.isCalculator &amp;&amp; !modelData.isClipboard &amp;&amp; !modelData.isCommand &amp;&amp; !parent.iconLoaded &amp;&amp; modelData.type !== &apos;image&apos;
                                            text: &quot;broken_image&quot;
                                            font.family: &quot;Material Symbols Outlined&quot;
                                            font.pixelSize: Theme.fontSizeHeader * Theme.scale(screen)
                                            color: Theme.accentPrimary
                                        }
                                    }

                                    ColumnLayout {
                                        Layout.fillWidth: true
                                        spacing: 1

                                        Text {
                                            text: modelData.name
                                            color: (hovered || isSelected) ? Theme.onAccent : (appLauncherPanel.isPinned(modelData) ? Theme.textPrimary : Theme.textPrimary)
                                            font.family: Theme.fontFamily
                                            font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
                                            font.bold: hovered || isSelected
                                            verticalAlignment: Text.AlignVCenter
                                            elide: Text.ElideRight
                                            Layout.fillWidth: true
                                        }

                                        Text {
                                            text: modelData.isCalculator ? (modelData.expr + &quot; = &quot; + modelData.result) : 
                                                  modelData.isClipboard ? modelData.content :
                                                  modelData.isCommand ? modelData.content :
                                                  (modelData.comment || modelData.genericName || &quot;No description available&quot;)
                                            color: (hovered || isSelected) ? Theme.onAccent : (appLauncherPanel.isPinned(modelData) ? Theme.textSecondary : Theme.textSecondary)
                                            font.family: Theme.fontFamily
                                            font.pixelSize: Theme.fontSizeCaption * Theme.scale(screen)
                                            font.italic: !(modelData.comment || modelData.genericName)
                                            opacity: modelData.isClipboard ? 0.8 : modelData.isCommand ? 0.9 : ((modelData.comment || modelData.genericName) ? 1.0 : 0.6)
                                            elide: Text.ElideRight
                                            maximumLineCount: (modelData.isClipboard || modelData.isCommand) ? 2 : 1
                                            wrapMode: (modelData.isClipboard || modelData.isCommand) ? Text.WordWrap : Text.NoWrap
                                            Layout.fillWidth: true
                                            Layout.preferredHeight: (modelData.isClipboard || modelData.isCommand) ? implicitHeight : contentHeight
                                        }
                                    }

                                    Item {
                                        Layout.fillWidth: true
                                    }

                                    Text {
                                        text: modelData.isCalculator ? &quot;content_copy&quot; : &quot;chevron_right&quot;
                                        font.family: &quot;Material Symbols Outlined&quot;
                                        font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
                                        color: (hovered || isSelected)
                                            ? Theme.onAccent
                                            : (appLauncherPanel.isPinned(modelData) ? Theme.textPrimary : Theme.textSecondary)
                                        verticalAlignment: Text.AlignVCenter
                                        Layout.rightMargin: 8
                                    }

            
                                    Item { width: 8; height: 1 }
                                }

                                Rectangle {
                                    id: ripple
                                    anchors.fill: parent
                                    color: Theme.onAccent
                                    opacity: 0.0
                                }

                                MouseArea {
                                    id: mouseArea
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    acceptedButtons: Qt.LeftButton | Qt.RightButton
                                    onClicked: {
                
                                        if (pinArea.containsMouse) return;
                                        if (mouse.button === Qt.RightButton) {
                                            appLauncherPanel.togglePin(modelData);
                                            return;
                                        }
                                        ripple.opacity = 0.18;
                                        rippleNumberAnimation.start();
                                        root.selectedIndex = index;
                                        root.activateSelected();
                                    }
                                    cursorShape: Qt.PointingHandCursor
                                    onPressed: ripple.opacity = 0.18
                                    onReleased: ripple.opacity = 0.0
                                }

                                NumberAnimation {
                                    id: rippleNumberAnimation
                                    target: ripple
                                    property: &quot;opacity&quot;
                                    to: 0.0
                                    duration: 320
                                }

                                Rectangle {
                                    anchors.left: parent.left
                                    anchors.right: parent.right
                                    anchors.bottom: parent.bottom
                                    height: Math.max(1, 1 * Theme.scale(screen))
                                    color: Theme.outline
                                    opacity: index === appList.count - 1 ? 0 : 0.10
                                }

        
                                Item {
                                    id: pinArea
                                    width: 28; height: 28
                                    z: 100
                                    anchors.right: parent.right
                                    anchors.verticalCenter: parent.verticalCenter

                                    MouseArea {
                                        anchors.fill: parent
                                        preventStealing: true
                                        z: 100
                                        hoverEnabled: true
                                        cursorShape: Qt.PointingHandCursor
                                        acceptedButtons: Qt.LeftButton | Qt.RightButton
                                        propagateComposedEvents: false
                                        onClicked: {
                                            appLauncherPanel.togglePin(modelData);
                                            event.accepted = true;
                                        }
                                    }

                                    Text {
                                        anchors.centerIn: parent
                                        text: &quot;star&quot;
                                        font.family: &quot;Material Symbols Outlined&quot;
                                        font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
                                        color: (parent.MouseArea.containsMouse || hovered || isSelected)
                                            ? Theme.onAccent
                                            : (appLauncherPanel.isPinned(modelData) ? Theme.textPrimary : Theme.textDisabled)
                                        verticalAlignment: Text.AlignVCenter
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Bar/Modules/AudioDeviceSelector.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell.Services.Pipewire
import qs.Components
import qs.Settings

PanelWithOverlay {
    id: ioSelector

    property int tabIndex: 0
    property Item anchorItem: null

    signal panelClosed()

    function sinkNodes() {
        let nodes = Pipewire.nodes &amp;&amp; Pipewire.nodes.values ? Pipewire.nodes.values.filter(function(n) {
            return n.isSink &amp;&amp; n.audio &amp;&amp; n.isStream === false;
        }) : [];
        if (Pipewire.defaultAudioSink)
            nodes = nodes.slice().sort(function(a, b) {
                if (a.id === Pipewire.defaultAudioSink.id)
                    return -1;

                if (b.id === Pipewire.defaultAudioSink.id)
                    return 1;

                return 0;
            });

        return nodes;
    }

    function sourceNodes() {
        let nodes = Pipewire.nodes &amp;&amp; Pipewire.nodes.values ? Pipewire.nodes.values.filter(function(n) {
            return !n.isSink &amp;&amp; n.audio &amp;&amp; n.isStream === false;
        }) : [];
        if (Pipewire.defaultAudioSource)
            nodes = nodes.slice().sort(function(a, b) {
                if (a.id === Pipewire.defaultAudioSource.id)
                    return -1;

                if (b.id === Pipewire.defaultAudioSource.id)
                    return 1;

                return 0;
            });

        return nodes;
    }

    Component.onCompleted: {
        if (Pipewire.nodes &amp;&amp; Pipewire.nodes.values) {
            for (var i = 0; i &lt; Pipewire.nodes.values.length; ++i) {
                var n = Pipewire.nodes.values[i];
            }
        }
    }
    Component.onDestruction: {
    }
    onVisibleChanged: {
        if (!visible)
            panelClosed();

    }

    // Bind all Pipewire nodes so their properties are valid
    PwObjectTracker {
        id: nodeTracker

        objects: Pipewire.nodes
    }

    Rectangle {
        color: Theme.backgroundPrimary
        radius: 20
        width: 340
        height: 340
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.topMargin: 4
        anchors.rightMargin: 4

        // Prevent closing when clicking in the panel bg
        MouseArea {
            anchors.fill: parent
        }

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 16
            spacing: 10

            // Tabs centered inside the window
            RowLayout {
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter
                spacing: 0

                Tabs {
                    id: ioTabs

                    tabsModel: [{
                        &quot;label&quot;: &quot;Output&quot;,
                        &quot;icon&quot;: &quot;volume_up&quot;
                    }, {
                        &quot;label&quot;: &quot;Input&quot;,
                        &quot;icon&quot;: &quot;mic&quot;
                    }]
                    currentIndex: tabIndex
                    onTabChanged: {
                        tabIndex = currentIndex;
                    }
                }

            }

            // Add vertical space between tabs and entries
            Item {
                height: 36
                Layout.fillWidth: true
            }

            // Output Devices
            Flickable {
                id: sinkList

                visible: tabIndex === 0
                contentHeight: sinkColumn.height
                clip: true
                interactive: contentHeight &gt; height
                width: parent.width
                height: 220

                ColumnLayout {
                    id: sinkColumn

                    width: sinkList.width
                    spacing: 6

                    Repeater {
                        model: ioSelector.sinkNodes()

                        Rectangle {
                            width: parent.width
                            height: 36
                            color: &quot;transparent&quot;
                            radius: 6

                            RowLayout {
                                anchors.fill: parent
                                anchors.margins: 6
                                spacing: 8

                                Text {
                                    text: &quot;volume_up&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 16 * Theme.scale(screen)
                                    color: (Pipewire.defaultAudioSink &amp;&amp; Pipewire.defaultAudioSink.id === modelData.id) ? Theme.accentPrimary : Theme.textPrimary
                                    Layout.alignment: Qt.AlignVCenter
                                }

                                ColumnLayout {
                                    Layout.fillWidth: true
                                    spacing: 1
                                    Layout.maximumWidth: sinkList.width - 120 // Reserve space for the Set button

                                    Text {
                                        text: modelData.nickname || modelData.description || modelData.name
                                        font.bold: true
                                        font.pixelSize: 12 * Theme.scale(screen)
                                        color: (Pipewire.defaultAudioSink &amp;&amp; Pipewire.defaultAudioSink.id === modelData.id) ? Theme.accentPrimary : Theme.textPrimary
                                        elide: Text.ElideRight
                                        maximumLineCount: 1
                                        Layout.fillWidth: true
                                    }

                                    Text {
                                        text: modelData.description !== modelData.nickname ? modelData.description : &quot;&quot;
                                        font.pixelSize: 10 * Theme.scale(screen)
                                        color: Theme.textSecondary
                                        elide: Text.ElideRight
                                        maximumLineCount: 1
                                        Layout.fillWidth: true
                                    }

                                }

                                Rectangle {
                                    visible: Pipewire.preferredDefaultAudioSink !== modelData
                                    width: 60
                                    height: 20
                                    radius: 4
                                    color: Theme.accentPrimary
                                    border.color: Theme.accentPrimary
                                    border.width: 1
                                    Layout.alignment: Qt.AlignVCenter

                                    Text {
                                        anchors.centerIn: parent
                                        text: &quot;Set&quot;
                                        color: Theme.onAccent
                                        font.pixelSize: 10 * Theme.scale(screen)
                                        font.bold: true
                                    }

                                    MouseArea {
                                        anchors.fill: parent
                                        cursorShape: Qt.PointingHandCursor
                                        onClicked: Pipewire.preferredDefaultAudioSink = modelData
                                    }

                                }

                                Text {
                                    text: &quot;(Current)&quot;
                                    visible: Pipewire.defaultAudioSink &amp;&amp; Pipewire.defaultAudioSink.id === modelData.id
                                    color: Theme.accentPrimary
                                    font.pixelSize: 10 * Theme.scale(screen)
                                    Layout.alignment: Qt.AlignVCenter
                                }

                            }

                        }

                    }

                }

                ScrollBar.vertical: ScrollBar {
                }

            }

            // Input Devices
            Flickable {
                id: sourceList

                visible: tabIndex === 1
                contentHeight: sourceColumn.height
                clip: true
                interactive: contentHeight &gt; height
                width: parent.width
                height: 220

                ColumnLayout {
                    id: sourceColumn

                    width: sourceList.width
                    spacing: 6

                    Repeater {
                        model: ioSelector.sourceNodes()

                        Rectangle {
                            width: parent.width
                            height: 36
                            color: &quot;transparent&quot;
                            radius: 6

                            RowLayout {
                                anchors.fill: parent
                                anchors.margins: 6
                                spacing: 8

                                Text {
                                    text: &quot;mic&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 16 * Theme.scale(screen)
                                    color: (Pipewire.defaultAudioSource &amp;&amp; Pipewire.defaultAudioSource.id === modelData.id) ? Theme.accentPrimary : Theme.textPrimary
                                    Layout.alignment: Qt.AlignVCenter
                                }

                                ColumnLayout {
                                    Layout.fillWidth: true
                                    spacing: 1
                                    Layout.maximumWidth: sourceList.width - 120 // Reserve space for the Set button

                                    Text {
                                        text: modelData.nickname || modelData.description || modelData.name
                                        font.bold: true
                                        font.pixelSize: 12 * Theme.scale(screen)
                                        color: (Pipewire.defaultAudioSource &amp;&amp; Pipewire.defaultAudioSource.id === modelData.id) ? Theme.accentPrimary : Theme.textPrimary
                                        elide: Text.ElideRight
                                        maximumLineCount: 1
                                        Layout.fillWidth: true
                                    }

                                    Text {
                                        text: modelData.description !== modelData.nickname ? modelData.description : &quot;&quot;
                                        font.pixelSize: 10 * Theme.scale(screen)
                                        color: Theme.textSecondary
                                        elide: Text.ElideRight
                                        maximumLineCount: 1
                                        Layout.fillWidth: true
                                    }

                                }

                                Rectangle {
                                    visible: Pipewire.preferredDefaultAudioSource !== modelData
                                    width: 60
                                    height: 20
                                    radius: 4
                                    color: Theme.accentPrimary
                                    border.color: Theme.accentPrimary
                                    border.width: 1
                                    Layout.alignment: Qt.AlignVCenter

                                    Text {
                                        anchors.centerIn: parent
                                        text: &quot;Set&quot;
                                        color: Theme.onAccent
                                        font.pixelSize: 10 * Theme.scale(screen)
                                        font.bold: true
                                    }

                                    MouseArea {
                                        anchors.fill: parent
                                        cursorShape: Qt.PointingHandCursor
                                        onClicked: Pipewire.preferredDefaultAudioSource = modelData
                                    }

                                }

                                Text {
                                    text: &quot;(Current)&quot;
                                    visible: Pipewire.defaultAudioSource &amp;&amp; Pipewire.defaultAudioSource.id === modelData.id
                                    color: Theme.accentPrimary
                                    font.pixelSize: 10 * Theme.scale(screen)
                                    Layout.alignment: Qt.AlignVCenter
                                }

                            }

                        }

                    }

                }

                ScrollBar.vertical: ScrollBar {
                }

            }

        }

    }

    Connections {
        function onReadyChanged() {
            if (Pipewire.ready &amp;&amp; Pipewire.nodes &amp;&amp; Pipewire.nodes.values) {
                for (var i = 0; i &lt; Pipewire.nodes.values.length; ++i) {
                    var n = Pipewire.nodes.values[i];
                }
            }
        }

        function onDefaultAudioSinkChanged() {
        }

        function onDefaultAudioSourceChanged() {
        }

        target: Pipewire
    }

}</file><file path="quickshell/Bar/Modules/Battery.qml">import QtQuick
import Quickshell
import Quickshell.Services.UPower
import QtQuick.Layouts
import qs.Components
import qs.Settings
import &quot;../../Helpers/Time.js&quot; as Time

Item {
    id: batteryWidget

    // Test mode
    property bool testMode: false
    property int testPercent: 49
    property bool testCharging: true

    property var battery: UPower.displayDevice
    property bool isReady: testMode ? true : (battery &amp;&amp; battery.ready &amp;&amp; battery.isLaptopBattery &amp;&amp; battery.isPresent)
    property real percent: testMode ? testPercent : (isReady ? (battery.percentage * 100) : 0)
    property bool charging: testMode ? testCharging : (isReady ? battery.state === UPowerDeviceState.Charging : false)
    property bool show: isReady &amp;&amp; percent &gt; 0

    // Choose icon based on charge and charging state
    function batteryIcon() {
        if (!show)
            return &quot;&quot;;

        if (charging)
            return &quot;battery_android_bolt&quot;;

        if (percent &gt;= 95)
           return &quot;battery_android_full&quot;;

        // Hardcoded battery symbols
        if (percent &gt;= 85)
            return &quot;battery_android_6&quot;;
        if (percent &gt;= 70)
            return &quot;battery_android_5&quot;;
        if (percent &gt;= 55)
            return &quot;battery_android_4&quot;;
        if (percent &gt;= 40)
            return &quot;battery_android_3&quot;;
        if (percent &gt;= 25)
            return &quot;battery_android_2&quot;;
        if (percent &gt;= 10)
            return &quot;battery_android_1&quot;;
        if (percent &gt;= 0)
            return &quot;battery_android_0&quot;;
    }

    visible: testMode || (isReady &amp;&amp; battery.isLaptopBattery)
    width: pill.width
    height: pill.height

    PillIndicator {
        id: pill
        icon: batteryWidget.batteryIcon()
        text: Math.round(batteryWidget.percent) + &quot;%&quot;
        pillColor: Theme.surfaceVariant
        iconCircleColor: Theme.accentPrimary
        iconTextColor: Theme.backgroundPrimary
        textColor: charging ? Theme.accentPrimary : Theme.textPrimary
        MouseArea {
            anchors.fill: parent
            hoverEnabled: true
            onEntered: {
                pill.showDelayed();
                batteryTooltip.tooltipVisible = true;
            }
            onExited: {
                pill.hide();
                batteryTooltip.tooltipVisible = false;
            }
        }
        StyledTooltip {
            id: batteryTooltip
            positionAbove: false
            text: {
                let lines = [];
                if (!batteryWidget.isReady) {
                    return &quot;&quot;;
                }

                if (batteryWidget.battery.timeToEmpty &gt; 0) {
                    lines.push(&quot;Time left: &quot; + Time.formatVagueHumanReadableTime(batteryWidget.battery.timeToEmpty));
                }

                if (batteryWidget.battery.timeToFull &gt; 0) {
                    lines.push(&quot;Time until full: &quot; + Time.formatVagueHumanReadableTime(batteryWidget.battery.timeToFull));
                }

                if (batteryWidget.battery.changeRate !== undefined) {
                    const rate = batteryWidget.battery.changeRate;
                    if (rate &gt; 0) {
                        lines.push(batteryWidget.charging ? &quot;Charging rate: &quot; + rate.toFixed(2) + &quot; W&quot; : &quot;Discharging rate: &quot; + rate.toFixed(2) + &quot; W&quot;);
                    }
                    else if (rate &lt; 0) {
                        lines.push(&quot;Discharging rate: &quot; + Math.abs(rate).toFixed(2) + &quot; W&quot;);
                    }
                    else {
                        lines.push(&quot;Estimating...&quot;);
                    }
                }
                else {
                    lines.push(batteryWidget.charging ? &quot;Charging&quot; : &quot;Discharging&quot;);
                }


                if (batteryWidget.battery.healthPercentage !== undefined &amp;&amp; batteryWidget.battery.healthPercentage &gt; 0) {
                    lines.push(&quot;Health: &quot; + Math.round(batteryWidget.battery.healthPercentage) + &quot;%&quot;);
                }
                return lines.join(&quot;\n&quot;);
            }
            tooltipVisible: false
            targetItem: pill
            delay: 1500
        }
    }
}</file><file path="quickshell/Bar/Modules/Bluetooth.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import Quickshell.Bluetooth
import Quickshell.Wayland
import qs.Components
import qs.Settings

Item {
    id: root

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property bool menuVisible: false

    width: Settings.settings.bluetoothEnabled ? 22 : 0
    height: Settings.settings.bluetoothEnabled ? 22 : 0

    // Bluetooth icon/button
    Item {
        id: bluetoothIcon

        // Check if any devices are currently connected
        property bool hasConnectedDevices: {
            if (!Bluetooth.defaultAdapter)
                return false;

            for (let i = 0; i &lt; Bluetooth.defaultAdapter.devices.count; i++) {
                if (Bluetooth.defaultAdapter.devices.valueAt(i).connected)
                    return true;

            }
            return false;
        }

        width: 22
        height: 22
        visible: Settings.settings.bluetoothEnabled

        Text {
            id: bluetoothText

            anchors.centerIn: parent
            text: {
                if (!Bluetooth.defaultAdapter || !Bluetooth.defaultAdapter.enabled)
                    return &quot;bluetooth_disabled&quot;;
                else if (parent.hasConnectedDevices)
                    return &quot;bluetooth_connected&quot;;
                else
                    return &quot;bluetooth&quot;;
            }
            font.family: mouseAreaBluetooth.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
            font.pixelSize: 16 * Theme.scale(screen)
            color: mouseAreaBluetooth.containsMouse ? Theme.accentPrimary : Theme.textPrimary
        }

        MouseArea {
            id: mouseAreaBluetooth

            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: {
                if (!bluetoothMenuLoader.active)
                    bluetoothMenuLoader.loading = true;

                if (bluetoothMenuLoader.item) {
                    bluetoothMenuLoader.item.visible = !bluetoothMenuLoader.item.visible;
                    // Enable adapter and start discovery when menu opens
                    if (bluetoothMenuLoader.item.visible &amp;&amp; Bluetooth.defaultAdapter) {
                        if (!Bluetooth.defaultAdapter.enabled)
                            Bluetooth.defaultAdapter.enabled = true;

                        if (!Bluetooth.defaultAdapter.discovering)
                            Bluetooth.defaultAdapter.discovering = true;

                    }
                }
            }
            onEntered: bluetoothTooltip.tooltipVisible = true
            onExited: bluetoothTooltip.tooltipVisible = false
        }

    }

    StyledTooltip {
        id: bluetoothTooltip

        text: &quot;Bluetooth Devices&quot;
        positionAbove: false
        tooltipVisible: false
        targetItem: bluetoothIcon
        delay: 200
    }

    // LazyLoader for Bluetooth menu
    LazyLoader {
        id: bluetoothMenuLoader

        loading: false

        component: PanelWindow {
            id: bluetoothMenu

            implicitWidth: 320
            implicitHeight: 480
            visible: false
            color: &quot;transparent&quot;
            anchors.top: true
            anchors.right: true
            margins.right: 0
            margins.top: 0
            WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand
            onVisibleChanged: {
                // Stop discovery when menu closes to save battery
                if (!visible &amp;&amp; Bluetooth.defaultAdapter &amp;&amp; Bluetooth.defaultAdapter.discovering)
                    Bluetooth.defaultAdapter.discovering = false;

            }

            Rectangle {
                anchors.fill: parent
                color: Theme.backgroundPrimary
                radius: 12

                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 16
                    spacing: 16

                    RowLayout {
                        Layout.fillWidth: true
                        spacing: 12

                        Text {
                            text: &quot;bluetooth&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.accentPrimary
                        }

                        Text {
                            text: &quot;Bluetooth Devices&quot;
                            font.pixelSize: 18 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                            Layout.fillWidth: true
                        }

                        IconButton {
                            icon: &quot;close&quot;
                            onClicked: {
                                bluetoothMenu.visible = false;
                                if (Bluetooth.defaultAdapter &amp;&amp; Bluetooth.defaultAdapter.discovering)
                                    Bluetooth.defaultAdapter.discovering = false;

                            }
                        }

                    }

                    Rectangle {
                        Layout.fillWidth: true
                        height: Math.max(4, 1 * Theme.scale(screen))
                        color: Theme.outline
                        opacity: 0.12
                    }

                    ListView {
                        id: deviceList

                        Layout.fillWidth: true
                        Layout.fillHeight: true
                        model: Bluetooth.defaultAdapter ? Bluetooth.defaultAdapter.devices : []
                        spacing: 8
                        clip: true

                        delegate: Item {
                            width: parent.width
                            height: 48

                            Rectangle {
                                anchors.fill: parent
                                radius: 8
                                color: modelData.connected ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.44) : (deviceMouseArea.containsMouse ? Theme.highlight : &quot;transparent&quot;)

                                RowLayout {
                                    anchors.fill: parent
                                    anchors.margins: 8
                                    spacing: 8

                                    Text {
                                        text: modelData.connected ? &quot;bluetooth&quot; : &quot;bluetooth_disabled&quot;
                                        font.family: &quot;Material Symbols Outlined&quot;
                                        font.pixelSize: 18 * Theme.scale(screen)
                                        color: deviceMouseArea.containsMouse ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                    }

                                    ColumnLayout {
                                        Layout.fillWidth: true
                                        spacing: 2

                                        Text {
                                            text: {
                                                let deviceName = modelData.name || modelData.deviceName || &quot;Unknown Device&quot;;
                                                // Hide MAC addresses and show &quot;Unknown Device&quot; instead
                                                let macPattern = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;
                                                if (macPattern.test(deviceName))
                                                    return &quot;Unknown Device&quot;;

                                                return deviceName;
                                            }
                                            color: deviceMouseArea.containsMouse ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textPrimary)
                                            font.pixelSize: 14 * Theme.scale(screen)
                                            elide: Text.ElideRight
                                            Layout.fillWidth: true
                                        }

                                        Text {
                                            text: {
                                                let deviceName = modelData.name || modelData.deviceName || &quot;&quot;;
                                                let macPattern = /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/;
                                                if (macPattern.test(deviceName))
                                                    // Show MAC address in subtitle for unnamed devices
                                                    return modelData.address + &quot; • &quot; + (modelData.paired ? &quot;Paired&quot; : &quot;Available&quot;);
                                                else
                                                    // Show only status for named devices
                                                    return modelData.paired ? &quot;Paired&quot; : &quot;Available&quot;;
                                            }
                                            color: deviceMouseArea.containsMouse ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                            font.pixelSize: 11 * Theme.scale(screen)
                                            elide: Text.ElideRight
                                            Layout.fillWidth: true
                                        }

                                    }

                                    Item {
                                        Layout.preferredWidth: 22
                                        Layout.preferredHeight: 22
                                        visible: modelData.pairing || modelData.state === BluetoothDeviceState.Connecting || modelData.state === BluetoothDeviceState.Disconnecting

                                        Spinner {
                                            visible: parent.visible
                                            running: parent.visible
                                            color: Theme.accentPrimary
                                            anchors.centerIn: parent
                                            size: 22
                                        }

                                    }

                                }

                                MouseArea {
                                    id: deviceMouseArea

                                    anchors.fill: parent
                                    hoverEnabled: true
                                    onClicked: {
                                        // Handle device actions: disconnect, pair, or connect
                                        if (modelData.connected)
                                            modelData.disconnect();
                                        else if (!modelData.paired)
                                            modelData.pair();
                                        else
                                            modelData.connect();
                                    }
                                }

                            }

                        }

                    }

                    // Discovering indicator
                    RowLayout {
                        Layout.fillWidth: true
                        spacing: 8
                        visible: Bluetooth.defaultAdapter &amp;&amp; Bluetooth.defaultAdapter.discovering

                        Text {
                            text: &quot;Scanning for devices...&quot;
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textSecondary
                        }

                        Spinner {
                            running: true
                            color: Theme.accentPrimary
                            size: 16
                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Bar/Modules/Brightness.qml">import QtQuick
import Quickshell
import Quickshell.Io
import qs.Components
import qs.Settings

Item {
    id: brightnessDisplay
    property int brightness: -1
    property int previousBrightness: -1
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property string monitorName: screen ? screen.name : &quot;DP-1&quot;
    property bool isSettingBrightness: false
    property bool hasPendingSet: false
    property int pendingSetValue: -1
    property bool firstChange: true 

    width: pill.width
    height: pill.height
    
    Process {
        id: getBrightnessProcess
        command: [Quickshell.shellDir + &quot;/Programs/zigbrightness&quot;, &quot;get&quot;, monitorName]

        stdout: StdioCollector {
            onStreamFinished: {
                const output = this.text.trim()
                const val = parseInt(output)
                if (isNaN(val)) return

                if (val &lt; 0) {
                    brightnessDisplay.visible = false
                }
                else if (val &gt;= 0 &amp;&amp; val !== previousBrightness) {
                    brightnessDisplay.visible = true
                    previousBrightness = brightness
                    brightness = val
                    pill.text = brightness + &quot;%&quot;

                    if (firstChange) {
                        firstChange = false
                    }
                    else {
                        pill.show()
                    }
                }
            }
        }
    }
    
    function getBrightness() {
        if (isSettingBrightness) {
            return
        }
        
        getBrightnessProcess.running = true
    }
    
    Process {
        id: setBrightnessProcess
        property int targetValue: -1
        command: [Quickshell.shellDir + &quot;/Programs/zigbrightness&quot;, &quot;set&quot;, monitorName, targetValue.toString()]
        
        stdout: StdioCollector {
            onStreamFinished: {
                const output = this.text.trim()
                const val = parseInt(output)
                
                if (!isNaN(val) &amp;&amp; val &gt;= 0) {
                    brightness = val
                    pill.text = brightness + &quot;%&quot;
                    pill.show()
                }
                
                isSettingBrightness = false
                
                if (hasPendingSet) {
                    hasPendingSet = false
                    const pendingValue = pendingSetValue
                    pendingSetValue = -1
                    setBrightness(pendingValue)
                }
            }
        }
    }
    
    function setBrightness(newValue) {
        newValue = Math.max(0, Math.min(100, newValue))
        
        if (isSettingBrightness) {
            hasPendingSet = true
            pendingSetValue = newValue
            return
        }
        
        isSettingBrightness = true
        setBrightnessProcess.targetValue = newValue
        setBrightnessProcess.running = true
    }

    PillIndicator {
        id: pill
        icon: &quot;brightness_high&quot;
        text: brightness &gt;= 0 ? brightness + &quot;%&quot; : &quot;--&quot;
        pillColor: Theme.surfaceVariant
        iconCircleColor: Theme.accentPrimary
        iconTextColor: Theme.backgroundPrimary
        textColor: Theme.textPrimary
        MouseArea {
            anchors.fill: parent
            hoverEnabled: true
            onEntered: {
                getBrightness()
                brightnessTooltip.tooltipVisible = true
                pill.showDelayed()
            }
            onExited: {
                brightnessTooltip.tooltipVisible = false
                pill.hide()
            }
            
            onWheel: function(wheel) {
                const delta = wheel.angleDelta.y &gt; 0 ? 5 : -5
                const newBrightness = brightness + delta
                setBrightness(newBrightness)
            }
        }
        StyledTooltip {
            id: brightnessTooltip
            text: &quot;Brightness: &quot; + brightness + &quot;%&quot;
            positionAbove: false
            tooltipVisible: false
            targetItem: pill
            delay: 1500
        }
    }

    Component.onCompleted: {
        getBrightness()
    }
}</file><file path="quickshell/Bar/Modules/Calendar.qml">import &quot;../../Helpers/Holidays.js&quot; as Holidays
import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import Quickshell.Wayland
import qs.Components
import qs.Settings

PanelWithOverlay {
    id: calendarOverlay

    Rectangle {
        color: Theme.backgroundPrimary
        radius: 12
        border.color: Theme.backgroundTertiary
        border.width: 1
        width: 340
        height: 380
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.topMargin: 4
        anchors.rightMargin: 4

        // Prevent closing when clicking in the panel bg
        MouseArea {
            anchors.fill: parent
        }

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 16
            spacing: 12

            // Month/Year header with navigation
            RowLayout {
                Layout.fillWidth: true
                spacing: 8

                IconButton {
                    icon: &quot;chevron_left&quot;
                    onClicked: {
                        let newDate = new Date(calendar.year, calendar.month - 1, 1);
                        calendar.year = newDate.getFullYear();
                        calendar.month = newDate.getMonth();
                    }
                }

                Text {
                    Layout.fillWidth: true
                    horizontalAlignment: Text.AlignHCenter
                    text: calendar.title
                    color: Theme.textPrimary
                    opacity: 0.7
                    font.pixelSize: 13 * Theme.scale(screen)
                    font.family: Theme.fontFamily
                    font.bold: true
                }

                IconButton {
                    icon: &quot;chevron_right&quot;
                    onClicked: {
                        let newDate = new Date(calendar.year, calendar.month + 1, 1);
                        calendar.year = newDate.getFullYear();
                        calendar.month = newDate.getMonth();
                    }
                }

            }

            DayOfWeekRow {
                Layout.fillWidth: true
                spacing: 0
                Layout.leftMargin: 8 // Align with grid
                Layout.rightMargin: 8

                delegate: Text {
                    text: shortName
                    color: Theme.textPrimary
                    opacity: 0.8
                    font.pixelSize: 13 * Theme.scale(screen)
                    font.family: Theme.fontFamily
                    font.bold: true
                    horizontalAlignment: Text.AlignHCenter
                    width: 32
                }

            }

            MonthGrid {
                id: calendar

                property var holidays: []

                // Fetch holidays when calendar is opened or month/year changes
                function updateHolidays() {
                    Holidays.getHolidaysForMonth(calendar.year, calendar.month, function(holidays) {
                        calendar.holidays = holidays;
                    });
                }

                Layout.fillWidth: true
                Layout.leftMargin: 8
                Layout.rightMargin: 8
                spacing: 0
                month: Time.date.getMonth()
                year: Time.date.getFullYear()
                onMonthChanged: updateHolidays()
                onYearChanged: updateHolidays()
                Component.onCompleted: updateHolidays()

                // Optionally, update when the panel becomes visible
                Connections {
                    function onVisibleChanged() {
                        if (calendarOverlay.visible) {
                            calendar.month = Time.date.getMonth();
                            calendar.year = Time.date.getFullYear();
                            calendar.updateHolidays();
                        }
                    }

                    target: calendarOverlay
                }

                delegate: Rectangle {
                    property var holidayInfo: calendar.holidays.filter(function(h) {
                        var d = new Date(h.date);
                        return d.getDate() === model.day &amp;&amp; d.getMonth() === model.month &amp;&amp; d.getFullYear() === model.year;
                    })
                    property bool isHoliday: holidayInfo.length &gt; 0

                    width: 32
                    height: 32
                    radius: 8
                    color: {
                        if (model.today)
                            return Theme.accentPrimary;

                        if (mouseArea2.containsMouse)
                            return Theme.backgroundTertiary;

                        return &quot;transparent&quot;;
                    }

                    // Holiday dot indicator
                    Rectangle {
                        visible: isHoliday
                        width: 4
                        height: 4
                        radius: 4
                        color: Theme.accentTertiary
                        anchors.top: parent.top
                        anchors.right: parent.right
                        anchors.topMargin: 4
                        anchors.rightMargin: 4
                        z: 2
                    }

                    Text {
                        anchors.centerIn: parent
                        text: model.day
                        color: model.today ? Theme.onAccent : Theme.textPrimary
                        opacity: model.month === calendar.month ? (mouseArea2.containsMouse ? 1 : 0.7) : 0.3
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.family: Theme.fontFamily
                        font.bold: model.today ? true : false
                    }

                    MouseArea {
                        id: mouseArea2

                        anchors.fill: parent
                        hoverEnabled: true
                        onEntered: {
                            if (isHoliday) {
                                holidayTooltip.text = holidayInfo.map(function(h) {
                                    return h.localName + (h.name !== h.localName ? &quot; (&quot; + h.name + &quot;)&quot; : &quot;&quot;) + (h.global ? &quot; [Global]&quot; : &quot;&quot;);
                                }).join(&quot;, &quot;);
                                holidayTooltip.targetItem = parent;
                                holidayTooltip.tooltipVisible = true;
                            }
                        }
                        onExited: holidayTooltip.tooltipVisible = false
                    }

                    StyledTooltip {
                        id: holidayTooltip

                        text: &quot;&quot;
                        tooltipVisible: false
                        targetItem: null
                        delay: 100
                    }

                    Behavior on color {
                        ColorAnimation {
                            duration: 150
                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Bar/Modules/ClockWidget.qml">import QtQuick
import qs.Settings
import qs.Components

Rectangle {
    id: clockWidget
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property var showTooltip: false
    width: textItem.paintedWidth
    height: textItem.paintedHeight
    color: &quot;transparent&quot;

    Text {
        id: textItem
        text: Time.time
        font.family: Theme.fontFamily
        font.weight: Font.Bold
        font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
        color: Theme.textPrimary
        anchors.centerIn: parent
    }

    MouseArea {
        id: clockMouseArea
        anchors.fill: parent
        hoverEnabled: true
        onEntered: showTooltip = true
        onExited: showTooltip = false
        cursorShape: Qt.PointingHandCursor
        onClicked: function() {
            calendar.visible = !calendar.visible
        }
    }

    Calendar {
        id: calendar
        screen: clockWidget.screen
        visible: false
    }

    StyledTooltip {
        id: dateTooltip
        text: Time.dateString
        positionAbove: false
        tooltipVisible: showTooltip &amp;&amp; !calendar.visible
        targetItem: clockWidget
        delay: 200
    }
}</file><file path="quickshell/Bar/Modules/CustomTrayMenu.qml">pragma ComponentBehavior: Bound
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import Quickshell
import qs.Settings

PopupWindow {
    id: trayMenu
    implicitWidth: 180
    implicitHeight: Math.max(40, listView.contentHeight + 12)
    visible: false
    color: &quot;transparent&quot;

    property QsMenuHandle menu
    property var anchorItem: null
    property real anchorX
    property real anchorY

    anchor.item: anchorItem ? anchorItem : null
    anchor.rect.x: anchorX
    anchor.rect.y: anchorY - 4

    // Recursive function to destroy all open submenus in delegate tree, safely avoiding infinite recursion
    function destroySubmenusRecursively(item) {
        if (!item || !item.contentItem) return;
        var children = item.contentItem.children;
        for (var i = 0; i &lt; children.length; ++i) {
            var child = children[i];
            if (child.subMenu) {
                child.subMenu.hideMenu();
                child.subMenu.destroy();
                child.subMenu = null;
            }
            // Recursively destroy submenus only if the child has contentItem to prevent issues
            if (child.contentItem) {
                destroySubmenusRecursively(child);
            }
        }
    }

    function showAt(item, x, y) {
        if (!item) {
            console.warn(&quot;CustomTrayMenu: anchorItem is undefined, won&apos;t show menu.&quot;);
            return;
        }
        anchorItem = item;
        anchorX = x;
        anchorY = y;
        visible = true;
        forceActiveFocus();
        Qt.callLater(() =&gt; trayMenu.anchor.updateAnchor());
    }

    function hideMenu() {
        visible = false;
        destroySubmenusRecursively(listView);
    }

    Item {
        anchors.fill: parent;
        Keys.onEscapePressed: trayMenu.hideMenu();
    }

    QsMenuOpener {
        id: opener;
        menu: trayMenu.menu;
    }

    Rectangle {
        id: bg;
        anchors.fill: parent;
        color: Theme.backgroundPrimary || &quot;#222&quot;;
        border.color: Theme.outline || &quot;#444&quot;;
        border.width: 1;
        radius: 12;
        z: 0;
    }

    ListView {
        id: listView;
        anchors.fill: parent;
        anchors.margins: 6;
        spacing: 2;
        interactive: false;
        enabled: trayMenu.visible;
        clip: true;

        model: ScriptModel {
            values: opener.children ? [...opener.children.values] : []
        }

        delegate: Rectangle {
            id: entry;
            required property var modelData;

            width: listView.width;
            height: (modelData?.isSeparator) ? 8 : 32;
            color: &quot;transparent&quot;;
            radius: 12;

            property var subMenu: null;

            Rectangle {
                anchors.centerIn: parent;
                width: parent.width - 20;
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Qt.darker(Theme.backgroundPrimary || &quot;#222&quot;, 1.4);
                visible: modelData?.isSeparator ?? false;
            }

            Rectangle {
                id: bg;
                anchors.fill: parent;
                color: mouseArea.containsMouse ? Theme.highlight : &quot;transparent&quot;;
                radius: 8;
                visible: !(modelData?.isSeparator ?? false);
                property color hoverTextColor: mouseArea.containsMouse ? Theme.onAccent : Theme.textPrimary;

                RowLayout {
                    anchors.fill: parent;
                    anchors.leftMargin: 12;
                    anchors.rightMargin: 12;
                    spacing: 8;

                    Text {
                        Layout.fillWidth: true;
                        color: (modelData?.enabled ?? true) ? bg.hoverTextColor : Theme.textDisabled;
                        text: modelData?.text ?? &quot;&quot;;
                        font.family: Theme.fontFamily;
                        font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen);
                        verticalAlignment: Text.AlignVCenter;
                        elide: Text.ElideRight;
                    }

                    Image {
                        Layout.preferredWidth: 16;
                        Layout.preferredHeight: 16;
                        source: modelData?.icon ?? &quot;&quot;;
                        visible: (modelData?.icon ?? &quot;&quot;) !== &quot;&quot;;
                        fillMode: Image.PreserveAspectFit;
                    }

                    Text {
                        // Material Symbols Outlined chevron right for submenu
                        text: modelData?.hasChildren ? &quot;menu&quot; : &quot;&quot;;
                        font.family: &quot;Material Symbols Outlined&quot;;
                        font.pixelSize: 18 * Theme.scale(screen);
                        verticalAlignment: Text.AlignVCenter;
                        visible: modelData?.hasChildren ?? false;
                        color: Theme.textPrimary;
                    }
                }

                MouseArea {
                    id: mouseArea;
                    anchors.fill: parent;
                    hoverEnabled: true;
                    enabled: (modelData?.enabled ?? true) &amp;&amp; !(modelData?.isSeparator ?? false) &amp;&amp; trayMenu.visible;

                    onClicked: {
                        if (modelData &amp;&amp; !modelData.isSeparator) {
                            if (modelData.hasChildren) {
                                // Submenus open on hover; ignore click here
                                return;
                            }
                            modelData.triggered();
                            trayMenu.hideMenu();
                        }
                    }

                    onEntered: {
                        if (!trayMenu.visible) return;

                        if (modelData?.hasChildren) {
                            // Close sibling submenus immediately
                            for (let i = 0; i &lt; listView.contentItem.children.length; i++) {
                                const sibling = listView.contentItem.children[i];
                                if (sibling !== entry &amp;&amp; sibling.subMenu) {
                                    sibling.subMenu.hideMenu();
                                    sibling.subMenu.destroy();
                                    sibling.subMenu = null;
                                }
                            }
                            if (entry.subMenu) {
                                entry.subMenu.hideMenu();
                                entry.subMenu.destroy();
                                entry.subMenu = null;
                            }
                            var globalPos = entry.mapToGlobal(0, 0);
                            var submenuWidth = 180;
                            var gap = 12;
                            var openLeft = (globalPos.x + entry.width + submenuWidth &gt; Screen.width);
                            var anchorX = openLeft ? -submenuWidth - gap : entry.width + gap;

                            entry.subMenu = subMenuComponent.createObject(trayMenu, {
                                menu: modelData,
                                anchorItem: entry,
                                anchorX: anchorX,
                                anchorY: 0
                            });
                            entry.subMenu.showAt(entry, anchorX, 0);
                        } else {
                            // Hovered item without submenu; close siblings
                            for (let i = 0; i &lt; listView.contentItem.children.length; i++) {
                                const sibling = listView.contentItem.children[i];
                                if (sibling.subMenu) {
                                    sibling.subMenu.hideMenu();
                                    sibling.subMenu.destroy();
                                    sibling.subMenu = null;
                                }
                            }
                            if (entry.subMenu) {
                                entry.subMenu.hideMenu();
                                entry.subMenu.destroy();
                                entry.subMenu = null;
                            }
                        }
                    }

                    onExited: {
                        if (entry.subMenu &amp;&amp; !entry.subMenu.containsMouse()) {
                            entry.subMenu.hideMenu();
                            entry.subMenu.destroy();
                            entry.subMenu = null;
                        }
                    }
                }
            }

            // Simplified containsMouse without recursive calls to avoid stack overflow
            function containsMouse() {
                return mouseArea.containsMouse;
            }

            Component.onDestruction: {
                if (subMenu) {
                    subMenu.destroy();
                    subMenu = null;
                }
            }
        }
    }

    Component {
        id: subMenuComponent;

        PopupWindow {
            id: subMenu;
            implicitWidth: 180;
            implicitHeight: Math.max(40, listView.contentHeight + 12);
            visible: false;
            color: &quot;transparent&quot;;

            property QsMenuHandle menu;
            property var anchorItem: null;
            property real anchorX;
            property real anchorY;

            anchor.item: anchorItem ? anchorItem : null;
            anchor.rect.x: anchorX;
            anchor.rect.y: anchorY;

            function showAt(item, x, y) {
                if (!item) {
                    console.warn(&quot;subMenuComponent: anchorItem is undefined, not showing menu.&quot;);
                    return;
                }
                anchorItem = item;
                anchorX = x;
                anchorY = y;
                visible = true;
                Qt.callLater(() =&gt; subMenu.anchor.updateAnchor());
            }

            function hideMenu() {
                visible = false;
                // Close all submenus recursively in this submenu
                for (let i = 0; i &lt; listView.contentItem.children.length; i++) {
                    const child = listView.contentItem.children[i];
                    if (child.subMenu) {
                        child.subMenu.hideMenu();
                        child.subMenu.destroy();
                        child.subMenu = null;
                    }
                }
            }

            // Simplified containsMouse avoiding recursive calls
            function containsMouse() {
                return subMenu.containsMouse;
            }

            Item {
                anchors.fill: parent;
                Keys.onEscapePressed: subMenu.hideMenu();
            }

            QsMenuOpener {
                id: opener;
                menu: subMenu.menu;
            }

            Rectangle {
                id: bg;
                anchors.fill: parent;
                color: Theme.backgroundPrimary || &quot;#222&quot;;
                border.color: Theme.outline || &quot;#444&quot;;
                border.width: 1;
                radius: 12;
                z: 0;
            }

            ListView {
                id: listView;
                anchors.fill: parent;
                anchors.margins: 6;
                spacing: 2;
                interactive: false;
                enabled: subMenu.visible;
                clip: true;

                model: ScriptModel {
                    values: opener.children ? [...opener.children.values] : [];
                }

                delegate: Rectangle {
                    id: entry;
                    required property var modelData;

                    width: listView.width;
                    height: (modelData?.isSeparator) ? 8 : 32;
                    color: &quot;transparent&quot;;
                    radius: 12;

                    property var subMenu: null;

                    Rectangle {
                        anchors.centerIn: parent;
                        width: parent.width - 20;
                        height: Math.max(1, 1 * Theme.scale(screen))
                        color: Qt.darker(Theme.surfaceVariant || &quot;#222&quot;, 1.4);
                        visible: modelData?.isSeparator ?? false;
                    }

                    Rectangle {
                        id: bg;
                        anchors.fill: parent;
                        color: mouseArea.containsMouse ? Theme.highlight : &quot;transparent&quot;;
                        radius: 8;
                        visible: !(modelData?.isSeparator ?? false);
                        property color hoverTextColor: mouseArea.containsMouse ? Theme.onAccent : Theme.textPrimary;

                        RowLayout {
                            anchors.fill: parent;
                            anchors.leftMargin: 12;
                            anchors.rightMargin: 12;
                            spacing: 8;

                            Text {
                                Layout.fillWidth: true;
                                color: (modelData?.enabled ?? true) ? bg.hoverTextColor : Theme.textDisabled;
                                text: modelData?.text ?? &quot;&quot;;
                                font.family: Theme.fontFamily;
                                font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen);
                                verticalAlignment: Text.AlignVCenter;
                                elide: Text.ElideRight;
                            }

                            Image {
                                Layout.preferredWidth: 16;
                                Layout.preferredHeight: 16;
                                source: modelData?.icon ?? &quot;&quot;;
                                visible: (modelData?.icon ?? &quot;&quot;) !== &quot;&quot;;
                                fillMode: Image.PreserveAspectFit;
                            }

                            Text {
                                text: modelData?.hasChildren ? &quot;\uE5CC&quot; : &quot;&quot;;
                                font.family: &quot;Material Symbols Outlined&quot;;
                                font.pixelSize: 18 * Theme.scale(screen);
                                verticalAlignment: Text.AlignVCenter;
                                visible: modelData?.hasChildren ?? false;
                                color: Theme.textPrimary;
                            }
                        }

                        MouseArea {
                            id: mouseArea;
                            anchors.fill: parent;
                            hoverEnabled: true;
                            enabled: (modelData?.enabled ?? true) &amp;&amp; !(modelData?.isSeparator ?? false) &amp;&amp; subMenu.visible;

                            onClicked: {
                                if (modelData &amp;&amp; !modelData.isSeparator) {
                                    if (modelData.hasChildren) {
                                        return;
                                    }
                                    modelData.triggered();
                                    trayMenu.hideMenu();
                                }
                            }

                            onEntered: {
                                if (!subMenu.visible) return;

                                if (modelData?.hasChildren) {
                                    for (let i = 0; i &lt; listView.contentItem.children.length; i++) {
                                        const sibling = listView.contentItem.children[i];
                                        if (sibling !== entry &amp;&amp; sibling.subMenu) {
                                            sibling.subMenu.hideMenu();
                                            sibling.subMenu.destroy();
                                            sibling.subMenu = null;
                                        }
                                    }
                                    if (entry.subMenu) {
                                        entry.subMenu.hideMenu();
                                        entry.subMenu.destroy();
                                        entry.subMenu = null;
                                    }
                                    var globalPos = entry.mapToGlobal(0, 0);
                                    var submenuWidth = 180;
                                    var gap = 12;
                                    var openLeft = (globalPos.x + entry.width + submenuWidth &gt; Screen.width);
                                    var anchorX = openLeft ? -submenuWidth - gap : entry.width + gap;

                                    entry.subMenu = subMenuComponent.createObject(subMenu, {
                                        menu: modelData,
                                        anchorItem: entry,
                                        anchorX: anchorX,
                                        anchorY: 0
                                    });
                                    entry.subMenu.showAt(entry, anchorX, 0);
                                } else {
                                    for (let i = 0; i &lt; listView.contentItem.children.length; i++) {
                                        const sibling = listView.contentItem.children[i];
                                        if (sibling.subMenu) {
                                            sibling.subMenu.hideMenu();
                                            sibling.subMenu.destroy();
                                            sibling.subMenu = null;
                                        }
                                    }
                                    if (entry.subMenu) {
                                        entry.subMenu.hideMenu();
                                        entry.subMenu.destroy();
                                        entry.subMenu = null;
                                    }
                                }
                            }

                            onExited: {
                                if (entry.subMenu &amp;&amp; !entry.subMenu.containsMouse()) {
                                    entry.subMenu.hideMenu();
                                    entry.subMenu.destroy();
                                    entry.subMenu = null;
                                }
                            }
                        }
                    }

                    // Simplified &amp; safe containsMouse avoiding recursion
                    function containsMouse() {
                        return mouseArea.containsMouse;
                    }

                    Component.onDestruction: {
                        if (subMenu) {
                            subMenu.destroy();
                            subMenu = null;
                        }
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Bar/Modules/Media.qml">import QtQuick 
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell.Widgets
import QtQuick.Effects
import qs.Settings
import qs.Services
import qs.Components

Item {
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    id: mediaControl
    width: visible ? mediaRow.width : 0
    height: 36 * Theme.scale(screen)
    visible: Settings.settings.showMediaInBar &amp;&amp; MusicManager.currentPlayer

    RowLayout {
        id: mediaRow
        height: parent.height
        spacing: 8

        Item {
            id: albumArtContainer
            width: 24 * Theme.scale(screen)
            height: 24 * Theme.scale(screen)
            Layout.alignment: Qt.AlignVCenter

            // Circular spectrum visualizer
            CircularSpectrum {
                id: spectrum
                values: MusicManager.cavaValues
                anchors.centerIn: parent
                innerRadius: 10 * Theme.scale(screen)
                outerRadius: 18 * Theme.scale(screen)
                fillColor: Theme.accentPrimary
                strokeColor: Theme.accentPrimary
                strokeWidth: 0
                z: 0
            }

            // Album art image
            Rectangle {
                id: albumArtwork
                width: 20 * Theme.scale(screen)
                height: 20 * Theme.scale(screen)
                anchors.centerIn: parent
                radius: 12 // circle
                color: Qt.darker(Theme.surface, 1.1)
                border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                border.width: 1
                z: 1

                Image {
                    id: albumArt
                    anchors.fill: parent
                    anchors.margins: 1
                    fillMode: Image.PreserveAspectCrop
                    smooth: true
                    mipmap: true
                    cache: false
                    asynchronous: true
                    source: MusicManager.trackArtUrl
                    visible: source.toString() !== &quot;&quot;

                    // Rounded corners using layer
                    layer.enabled: true
                    layer.effect: MultiEffect {
                        maskEnabled: true
                        maskSource: Rectangle {
                            width: albumArt.width
                            height: albumArt.height
                            radius: albumArt.width / 2 // circle
                            visible: false
                        }
                    }
                }

                // Fallback icon
                Text {
                    anchors.centerIn: parent
                    text: &quot;music_note&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 14 * Theme.scale(screen)
                    color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.4)
                    visible: !albumArt.visible
                }

                // Play/Pause overlay (only visible on hover)
                Rectangle {
                    anchors.fill: parent
                    radius: parent.radius
                    color: Qt.rgba(0, 0, 0, 0.5)
                    visible: playButton.containsMouse
                    z: 2

                    Text {
                        anchors.centerIn: parent
                        text: MusicManager.isPlaying ? &quot;pause&quot; : &quot;play_arrow&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 14 * Theme.scale(screen)
                        color: &quot;white&quot;
                    }
                }

                MouseArea {
                    id: playButton
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    hoverEnabled: true
                    enabled: MusicManager.canPlay || MusicManager.canPause
                    onClicked: MusicManager.playPause()
                }
            }
        }

        // Track info
        Text {
            text: MusicManager.trackTitle + &quot; - &quot; + MusicManager.trackArtist
            color: Theme.textPrimary
            font.family: Theme.fontFamily
            font.pixelSize: 12 * Theme.scale(screen)
            elide: Text.ElideRight
            Layout.maximumWidth: 300
            Layout.alignment: Qt.AlignVCenter
        }
    }
}</file><file path="quickshell/Bar/Modules/SettingsButton.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import qs.Settings
import qs.Components
import qs.Widgets.SettingsWindow

Item {
    id: root
    width: 22
    height: 22

    Rectangle {
        id: button
        anchors.fill: parent
        color: &quot;transparent&quot;
        radius: width / 2

        Text {
            anchors.centerIn: parent
            text: &quot;settings&quot;
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 16 * Theme.scale(screen)
            color: mouseArea.containsMouse ? Theme.accentPrimary : Theme.textPrimary
        }

        MouseArea {
            id: mouseArea
            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor

            onClicked: {
                if (!settingsWindowLoader.active) {
                    // Start loading the settings window
                    settingsWindowLoader.loading = true;
                }
                
                if (settingsWindowLoader.item) {
                    // Toggle visibility
                    if (settingsWindowLoader.item.visible) {
                        settingsWindowLoader.item.visible = false;
                    } else {
                        settingsWindowLoader.item.visible = true;
                    }
                }
            }
        }

        StyledTooltip {
            text: &quot;Settings&quot;
            targetItem: mouseArea
            tooltipVisible: mouseArea.containsMouse
        }
    }

    // LazyLoader for SettingsWindow
    LazyLoader {
        id: settingsWindowLoader
        loading: false
        component: SettingsWindow {
            // Handle window closure - just hide it, don&apos;t destroy
            onVisibleChanged: {
                if (!visible) {
                    // Window is hidden, but keep it loaded for reuse
                }
            }
        }
    }
}</file><file path="quickshell/Bar/Modules/SidePanelButton.qml">import QtQuick
import Quickshell
import qs.Settings

Item {
    id: buttonRoot

    property var screen
    width: iconText.implicitWidth + 0
    height: iconText.implicitHeight + 0

    property color hoverColor: Theme.rippleEffect
    property real hoverOpacity: 0.0
    property bool isActive: mouseArea.containsMouse || (sidebarPopup &amp;&amp; sidebarPopup.visible)

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        hoverEnabled: true
        cursorShape: Qt.PointingHandCursor
        onClicked: {
            if (sidebarPopup.visible) {
                sidebarPopup.hidePopup();
            } else {
                sidebarPopup.showAt();
            }
        }
        onEntered: buttonRoot.hoverOpacity = 0.18
        onExited: buttonRoot.hoverOpacity = 0.0
    }

    Rectangle {
        anchors.fill: parent
        color: hoverColor
        opacity: isActive ? 0.18 : hoverOpacity
        radius: height / 2
        z: 0
        visible: (isActive ? 0.18 : hoverOpacity) &gt; 0.01
    }

    Text {
        id: iconText
        text: &quot;dashboard&quot;
        font.family: isActive ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
        font.pixelSize: 16 * Theme.scale(screen)
        color: sidebarPopup.visible ? Theme.accentPrimary : Theme.textPrimary
        anchors.centerIn: parent
        z: 1
    }

    Behavior on hoverOpacity {
        NumberAnimation {
            duration: 120
            easing.type: Easing.OutQuad
        }
    }
}</file><file path="quickshell/Bar/Modules/SystemInfo.qml">import QtQuick
import Quickshell
import qs.Settings
import qs.Services

Row {
    id: layout

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    
    spacing: 10
    visible: Settings.settings.showSystemInfoInBar

    width: Math.floor(cpuUsageLayout.width + cpuTempLayout.width + memoryUsageLayout.width + (2 * 10))

    Row {
        id: cpuUsageLayout
        spacing: 6

        Text {
            id: cpuUsageIcon
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
            text: &quot;speed&quot;
            verticalAlignment: Text.AlignVCenter
            anchors.verticalCenter: parent.verticalCenter
            color: Theme.accentPrimary
        }

        Text {
            id: cpuUsageText
            font.family: Theme.fontFamily
            font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
            color: Theme.textPrimary
            text: Sysinfo.cpuUsageStr
            anchors.verticalCenter: parent.verticalCenter
            verticalAlignment: Text.AlignVCenter
        }
    }

    // CPU Temperature Component
    Row {
        id: cpuTempLayout
        spacing: 3
        Text {
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
            text: &quot;thermometer&quot;
            verticalAlignment: Text.AlignVCenter
            anchors.verticalCenter: parent.verticalCenter
            color: Theme.accentPrimary
        }

        Text {
            font.family: Theme.fontFamily
            font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
            color: Theme.textPrimary
            text: Sysinfo.cpuTempStr
            anchors.verticalCenter: parent.verticalCenter
            verticalAlignment: Text.AlignVCenter
        }
    }

    // Memory Usage Component
    Row {
        id: memoryUsageLayout
        spacing: 3
        Text {
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
            text: &quot;memory&quot;
            color: Theme.accentPrimary
            verticalAlignment: Text.AlignVCenter
            anchors.verticalCenter: parent.verticalCenter
        }

        Text {
            font.family: Theme.fontFamily
            font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
            color: Theme.textPrimary
            text: Sysinfo.memoryUsageStr
            anchors.verticalCenter: parent.verticalCenter
            verticalAlignment: Text.AlignVCenter
        }
    }
}</file><file path="quickshell/Bar/Modules/SystemTray.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell
import QtQuick.Effects
import Quickshell.Services.SystemTray
import Quickshell.Widgets
import qs.Settings
import qs.Components

Row {
    property var bar
    property var shell
    property var trayMenu
    spacing: 8
    Layout.alignment: Qt.AlignVCenter

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property bool containsMouse: false
    property var systemTray: SystemTray

    Repeater {
        model: systemTray.items
        delegate: Item {
            width: 24 * Theme.scale(screen)
            height: 24 * Theme.scale(screen)

            visible: modelData
            property bool isHovered: trayMouseArea.containsMouse

            // No animations - static display

            Rectangle {
                anchors.centerIn: parent
                width: 16 * Theme.scale(screen)
                height: 16 * Theme.scale(screen)
                radius: 6
                color: &quot;transparent&quot;
                clip: true

                IconImage {
                    id: trayIcon
                    anchors.centerIn: parent
                    width: 16 * Theme.scale(screen)
                    height: 16 * Theme.scale(screen)
                    smooth: false
                    asynchronous: true
                    backer.fillMode: Image.PreserveAspectFit
                    source: {
                        let icon = modelData?.icon || &quot;&quot;;
                        if (!icon)
                            return &quot;&quot;;
                        // Process icon path
                        if (icon.includes(&quot;?path=&quot;)) {
                            const [name, path] = icon.split(&quot;?path=&quot;);
                            const fileName = name.substring(name.lastIndexOf(&quot;/&quot;) + 1);
                            return `file://${path}/${fileName}`;
                        }
                        return icon;
                    }
                    opacity: status === Image.Ready ? 1 : 0
                    Component.onCompleted: {}
                }
            }

            MouseArea {
                id: trayMouseArea
                anchors.fill: parent
                hoverEnabled: true
                cursorShape: Qt.PointingHandCursor
                acceptedButtons: Qt.LeftButton | Qt.RightButton | Qt.MiddleButton
                onClicked: mouse =&gt; {
                    if (!modelData)
                        return;

                    if (mouse.button === Qt.LeftButton) {
                        // Close any open menu first
                        if (trayMenu &amp;&amp; trayMenu.visible) {
                            trayMenu.hideMenu();
                        }

                        if (!modelData.onlyMenu) {
                            modelData.activate();
                        }
                    } else if (mouse.button === Qt.MiddleButton) {
                        // Close any open menu first
                        if (trayMenu &amp;&amp; trayMenu.visible) {
                            trayMenu.hideMenu();
                        }

                        modelData.secondaryActivate &amp;&amp; modelData.secondaryActivate();
                    } else if (mouse.button === Qt.RightButton) {
                        trayTooltip.tooltipVisible = false;
                        // If menu is already visible, close it
                        if (trayMenu &amp;&amp; trayMenu.visible) {
                            trayMenu.hideMenu();
                            return;
                        }

                        if (modelData.hasMenu &amp;&amp; modelData.menu &amp;&amp; trayMenu) {
                            // Anchor the menu to the tray icon item (parent) and position it below the icon
                            const menuX = (width / 2) - (trayMenu.width / 2);
                            const menuY = height + 20 * Theme.scale(screen);
                            trayMenu.menu = modelData.menu;
                            trayMenu.showAt(parent, menuX, menuY);
                        } else
                        // console.log(&quot;No menu available for&quot;, modelData.id, &quot;or trayMenu not set&quot;)
                        {}
                    }
                }
                onEntered: trayTooltip.tooltipVisible = true
                onExited: trayTooltip.tooltipVisible = false
            }

            StyledTooltip {
                id: trayTooltip
                text: modelData.tooltipTitle || modelData.name || modelData.id || &quot;Tray Item&quot;
                positionAbove: false
                tooltipVisible: false
                targetItem: trayIcon
                delay: 200
            }

            Component.onDestruction:
            // No cache cleanup needed
            {}
        }
    }
}</file><file path="quickshell/Bar/Modules/Taskbar.qml">import QtQuick
import QtQuick.Controls
import Quickshell
import Quickshell.Wayland
import Quickshell.Widgets
import qs.Settings
import qs.Components

Item {
    id: taskbar
    width: runningAppsRow.width
    height: Settings.settings.taskbarIconSize
    visible: Settings.settings.showTaskbar

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    // Attach custom tooltip
    StyledTooltip {
        id: styledTooltip
        positionAbove: false
    }

    function getAppIcon(toplevel: Toplevel): string {
        if (!toplevel)
            return &quot;&quot;;

        let icon = Quickshell.iconPath(toplevel.appId?.toLowerCase(), true);
        if (!icon) {
            icon = Quickshell.iconPath(toplevel.appId, true);
        }
        if (!icon) {
            icon = Quickshell.iconPath(toplevel.title?.toLowerCase(), true);
        }
        if (!icon) {
            icon = Quickshell.iconPath(toplevel.title, true);
        }
        if (!icon) {
            icon = Quickshell.iconPath(&quot;application-x-executable&quot;, true);
        }

        return icon || &quot;&quot;;
    }

    Row {
        id: runningAppsRow
        spacing: 8
        height: parent.height

        Repeater {
            model: ToplevelManager ? ToplevelManager.toplevels : null

            delegate: Rectangle {
                id: appButton
                width: Settings.settings.taskbarIconSize
                height: Settings.settings.taskbarIconSize
                radius: Math.max(4, Settings.settings.taskbarIconSize * 0.25)
                color: isActive ? Theme.accentPrimary : (hovered ? Theme.surfaceVariant : &quot;transparent&quot;)
                border.color: isActive ? Qt.darker(Theme.accentPrimary, 1.2) : &quot;transparent&quot;
                border.width: 1

                property bool isActive: ToplevelManager.activeToplevel &amp;&amp; ToplevelManager.activeToplevel === modelData
                property bool hovered: mouseArea.containsMouse
                property string appId: modelData ? modelData.appId : &quot;&quot;
                property string appTitle: modelData ? modelData.title : &quot;&quot;

                Behavior on color {
                    ColorAnimation { duration: 150 }
                }

                Behavior on border.color {
                    ColorAnimation { duration: 150 }
                }

                IconImage {
                    id: appIcon
                    width: Math.max(12, Settings.settings.taskbarIconSize * 0.625)
                    height: Math.max(12, Settings.settings.taskbarIconSize * 0.625)
                    anchors.centerIn: parent
                    source: getAppIcon(modelData)
                    visible: source.toString() !== &quot;&quot;
                }

                Text {
                    anchors.centerIn: parent
                    visible: !appIcon.visible
                    text: appButton.appId ? appButton.appId.charAt(0).toUpperCase() : &quot;?&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: Math.max(10, Settings.settings.taskbarIconSize * 0.4375 * Theme.scale(screen))
                    font.bold: true
                    color: appButton.isActive ? Theme.onAccent : Theme.textPrimary
                }

                MouseArea {
                    id: mouseArea
                    anchors.fill: parent
                    hoverEnabled: true
                    cursorShape: Qt.PointingHandCursor

                    onEntered: {
                        var text = appTitle || appId;
                        styledTooltip.text = text.length &gt; 60 ? text.substring(0, 60) + &quot;...&quot; : text;
                        styledTooltip.targetItem = appButton;
                        styledTooltip.tooltipVisible = true;
                    }

                    onExited: {
                        styledTooltip.tooltipVisible = false;
                    }

                    onClicked: function(mouse) {
                        if (mouse.button === Qt.MiddleButton) {
                            if (modelData &amp;&amp; modelData.close) {
                                modelData.close();
                            }
                        }

                        if (mouse.button === Qt.LeftButton) {
                            if (modelData &amp;&amp; modelData.activate) {
                                modelData.activate();
                            }
                        }
                    }

                    onPressed: mouse =&gt; {
                        if (mouse.button === Qt.RightButton) {
                            // context menu logic (optional)
                        }
                    }
                }

                Rectangle {
                    visible: isActive
                    width: 4
                    height: 4
                    radius: 2
                    color: Theme.onAccent
                    anchors.bottom: parent.bottom
                    anchors.horizontalCenter: parent.horizontalCenter
                    anchors.bottomMargin: -6
                }
            }
        }
    }
}</file><file path="quickshell/Bar/Modules/Time.qml">pragma Singleton

import Quickshell
import QtQuick
import qs.Settings

Singleton {
    id: root

    property var date: new Date()
    property string time: Settings.settings.use12HourClock ? Qt.formatDateTime(date, &quot;h:mm AP&quot;) : Qt.formatDateTime(date, &quot;HH:mm&quot;)
    property string dateString: {
        let now = date;
        let dayName = now.toLocaleDateString(Qt.locale(), &quot;ddd&quot;);
        dayName = dayName.charAt(0).toUpperCase() + dayName.slice(1);
        let day = now.getDate();
        let suffix;
        if (day &gt; 3 &amp;&amp; day &lt; 21)
            suffix = &apos;th&apos;;
        else
            switch (day % 10) {
            case 1:
                suffix = &quot;st&quot;;
                break;
            case 2:
                suffix = &quot;nd&quot;;
                break;
            case 3:
                suffix = &quot;rd&quot;;
                break;
            default:
                suffix = &quot;th&quot;;
            }
        let month = now.toLocaleDateString(Qt.locale(), &quot;MMMM&quot;);
        let year = now.toLocaleDateString(Qt.locale(), &quot;yyyy&quot;);
        return `${dayName}, ` + (Settings.settings.reverseDayMonth ? `${month} ${day}${suffix} ${year}` : `${day}${suffix} ${month} ${year}`);
    }

    Timer {
        interval: 1000
        repeat: true
        running: true

        onTriggered: root.date = new Date()
    }
}</file><file path="quickshell/Bar/Modules/Volume.qml">import QtQuick
import Quickshell
import qs.Settings
import qs.Components
import qs.Bar.Modules

Item {
    id: volumeDisplay
    property var shell
    property int volume: 0
    property bool firstChange: true

    width: pillIndicator.width
    height: pillIndicator.height

    function getVolumeColor() {
        if (volume &lt;= 100) return Theme.accentPrimary;
        // Calculate interpolation factor (0 at 100%, 1 at 200%)
        var factor = (volume - 100) / 100;
        // Blend between accent and warning colors
        return Qt.rgba(
            Theme.accentPrimary.r + (Theme.warning.r - Theme.accentPrimary.r) * factor,
            Theme.accentPrimary.g + (Theme.warning.g - Theme.accentPrimary.g) * factor,
            Theme.accentPrimary.b + (Theme.warning.b - Theme.accentPrimary.b) * factor,
            1
        );
    }

    function getIconColor() {
        if (volume &lt;= 100) return Theme.textPrimary;
        return getVolumeColor(); // Only use warning blend when &gt;100%
    }

    PillIndicator {
        id: pillIndicator
        icon: shell &amp;&amp; shell.defaultAudioSink &amp;&amp; shell.defaultAudioSink.audio &amp;&amp; shell.defaultAudioSink.audio.muted
            ? &quot;volume_off&quot;
            : (volume === 0 ? &quot;volume_off&quot; : (volume &lt; 30 ? &quot;volume_down&quot; : &quot;volume_up&quot;))
        text: volume + &quot;%&quot;

        pillColor: Theme.surfaceVariant
        iconCircleColor: getVolumeColor()
        iconTextColor: Theme.backgroundPrimary
        textColor: Theme.textPrimary
        collapsedIconColor: getIconColor()
        autoHide: true

        StyledTooltip {
            id: volumeTooltip
            text: &quot;Volume: &quot; + volume + &quot;%\nLeft click for advanced settings.\nScroll up/down to change volume.&quot;
            positionAbove: false
            tooltipVisible: !ioSelector.visible &amp;&amp; volumeDisplay.containsMouse
            targetItem: pillIndicator
            delay: 1500
        }

        MouseArea {
            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: {
                if (ioSelector.visible) {
                    ioSelector.dismiss();
                } else {
                    ioSelector.show();
                }
            }
        }
    }

    Connections {
        target: shell ?? null
        function onVolumeChanged() {
            if (shell) {
                const clampedVolume = Math.max(0, Math.min(200, shell.volume));
                if (clampedVolume !== volume) {
                    volume = clampedVolume;
                    pillIndicator.text = volume + &quot;%&quot;;
                    pillIndicator.icon = shell.defaultAudioSink &amp;&amp; shell.defaultAudioSink.audio &amp;&amp; shell.defaultAudioSink.audio.muted
                        ? &quot;volume_off&quot;
                        : (volume === 0 ? &quot;volume_off&quot; : (volume &lt; 30 ? &quot;volume_down&quot; : &quot;volume_up&quot;));

                    if (firstChange) {
                        firstChange = false
                    }
                    else {
                        pillIndicator.show();
                    }
                }
            }
        }
    }

    Component.onCompleted: {
        if (shell &amp;&amp; shell.volume !== undefined) {
            volume = Math.max(0, Math.min(200, shell.volume));
        }
    }

    MouseArea {
        anchors.fill: parent
        hoverEnabled: true
        acceptedButtons: Qt.NoButton
        propagateComposedEvents: true
        onEntered: {
            volumeDisplay.containsMouse = true
            pillIndicator.autoHide = false;
            pillIndicator.showDelayed()
        }
        onExited: {
            volumeDisplay.containsMouse = false
            pillIndicator.autoHide = true;
            pillIndicator.hide()
        }
        cursorShape: Qt.PointingHandCursor
        onWheel: (wheel) =&gt; {
            if (!shell) return;
            let step = 5;
            if (wheel.angleDelta.y &gt; 0) {
                shell.updateVolume(Math.min(200, shell.volume + step));
            } else if (wheel.angleDelta.y &lt; 0) {
                shell.updateVolume(Math.max(0, shell.volume - step));
            }
        }
    }

    AudioDeviceSelector {
        id: ioSelector
        onPanelClosed: ioSelector.dismiss()
    }

    property bool containsMouse: false
}</file><file path="quickshell/Bar/Modules/Wifi.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import Quickshell.Wayland
import qs.Components
import qs.Services
import qs.Settings

Item {
    id: root

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property bool menuVisible: false
    property string passwordPromptSsid: &quot;&quot;
    property string passwordInput: &quot;&quot;
    property bool showPasswordPrompt: false

    width: Settings.settings.wifiEnabled ? 22 : 0
    height: Settings.settings.wifiEnabled ? 22 : 0

    Network {
        id: network
    }

    // WiFi icon/button
    Item {
        id: wifiIcon

        property int currentSignal: {
            let maxSignal = 0;
            for (const net in network.networks) {
                if (network.networks[net].connected &amp;&amp; network.networks[net].signal &gt; maxSignal)
                    maxSignal = network.networks[net].signal;

            }
            return maxSignal;
        }

        width: 22
        height: 22
        visible: Settings.settings.wifiEnabled

        Text {
            id: wifiText

            anchors.centerIn: parent
            text: {
                let connected = false;
                for (const net in network.networks) {
                    if (network.networks[net].connected) {
                        connected = true;
                        break;
                    }
                }
                return connected ? network.signalIcon(parent.currentSignal) : &quot;wifi_off&quot;;
            }
            font.family: mouseAreaWifi.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
            font.pixelSize: 16 * Theme.scale(screen)
            color: mouseAreaWifi.containsMouse ? Theme.accentPrimary : Theme.textPrimary
        }

        MouseArea {
            id: mouseAreaWifi

            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: {
                if (!wifiMenuLoader.active)
                    wifiMenuLoader.loading = true;

                if (wifiMenuLoader.item) {
                    wifiMenuLoader.item.visible = !wifiMenuLoader.item.visible;
                    if (wifiMenuLoader.item.visible)
                        network.onMenuOpened();
                    else
                        network.onMenuClosed();
                }
            }
            onEntered: wifiTooltip.tooltipVisible = true
            onExited: wifiTooltip.tooltipVisible = false
        }

    }

    StyledTooltip {
        id: wifiTooltip

        text: &quot;WiFi Networks&quot;
        positionAbove: false
        tooltipVisible: false
        targetItem: wifiIcon
        delay: 200
    }

    // LazyLoader for WiFi menu
    LazyLoader {
        id: wifiMenuLoader

        loading: false

        component: PanelWindow {
            id: wifiMenu

            implicitWidth: 320
            implicitHeight: 480
            visible: false
            color: &quot;transparent&quot;
            anchors.top: true
            anchors.right: true
            margins.right: 0
            margins.top: 0
            WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand

            Rectangle {
                anchors.fill: parent
                color: Theme.backgroundPrimary
                radius: 12

                ColumnLayout {
                    anchors.fill: parent
                    anchors.margins: 16
                    spacing: 16

                    RowLayout {
                        Layout.fillWidth: true
                        spacing: 12

                        Text {
                            text: &quot;wifi&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.accentPrimary
                        }

                        Text {
                            text: &quot;WiFi Networks&quot;
                            font.pixelSize: 18 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                            Layout.fillWidth: true
                        }

                        IconButton {
                            icon: &quot;refresh&quot;
                            onClicked: network.refreshNetworks()
                        }

                        IconButton {
                            icon: &quot;close&quot;
                            onClicked: {
                                wifiMenu.visible = false;
                                network.onMenuClosed();
                            }
                        }

                    }

                    Rectangle {
                        Layout.fillWidth: true
                        height: Math.max(1, 1 * Theme.scale(screen))
                        color: Theme.outline
                        opacity: 0.12
                    }

                    ListView {
                        id: networkList

                        Layout.fillWidth: true
                        Layout.fillHeight: true
                        model: Object.values(network.networks)
                        spacing: 8
                        clip: true

                        delegate: Item {
                            width: parent.width
                            height: modelData.ssid === passwordPromptSsid &amp;&amp; showPasswordPrompt ? 108 : 48 // 48 for network + 60 for password prompt

                            ColumnLayout {
                                anchors.fill: parent
                                spacing: 0

                                Rectangle {
                                    Layout.fillWidth: true
                                    Layout.preferredHeight: 48
                                    radius: 8
                                    color: modelData.connected ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.44) : (networkMouseArea.containsMouse ? Theme.highlight : &quot;transparent&quot;)

                                    RowLayout {
                                        anchors.fill: parent
                                        anchors.margins: 8
                                        spacing: 8

                                        Text {
                                            text: network.signalIcon(modelData.signal)
                                            font.family: &quot;Material Symbols Outlined&quot;
                                            font.pixelSize: 18 * Theme.scale(screen)
                                            color: networkMouseArea.containsMouse ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                        }

                                        ColumnLayout {
                                            Layout.fillWidth: true
                                            spacing: 2

                                            Text {
                                                text: modelData.ssid || &quot;Unknown Network&quot;
                                                color: networkMouseArea.containsMouse ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textPrimary)
                                                font.pixelSize: 14 * Theme.scale(screen)
                                                elide: Text.ElideRight
                                                Layout.fillWidth: true
                                            }

                                            Text {
                                                text: modelData.security &amp;&amp; modelData.security !== &quot;--&quot; ? modelData.security : &quot;Open&quot;
                                                color: networkMouseArea.containsMouse ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                                font.pixelSize: 11 * Theme.scale(screen)
                                                elide: Text.ElideRight
                                                Layout.fillWidth: true
                                            }

                                            Text {
                                                visible: network.connectStatusSsid === modelData.ssid &amp;&amp; network.connectStatus === &quot;error&quot; &amp;&amp; network.connectError.length &gt; 0
                                                text: network.connectError
                                                color: Theme.error
                                                font.pixelSize: 11 * Theme.scale(screen)
                                                elide: Text.ElideRight
                                                Layout.fillWidth: true
                                            }

                                        }

                                        Item {
                                            Layout.preferredWidth: 22
                                            Layout.preferredHeight: 22
                                            visible: network.connectStatusSsid === modelData.ssid &amp;&amp; (network.connectStatus !== &quot;&quot; || network.connectingSsid === modelData.ssid)

                                            Spinner {
                                                visible: network.connectingSsid === modelData.ssid
                                                running: network.connectingSsid === modelData.ssid
                                                color: Theme.accentPrimary
                                                anchors.centerIn: parent
                                                size: 22
                                            }

                                            Text {
                                                visible: network.connectStatus === &quot;success&quot; &amp;&amp; !network.connectingSsid
                                                text: &quot;check_circle&quot;
                                                font.family: &quot;Material Symbols Outlined&quot;
                                                font.pixelSize: 18 * Theme.scale(screen)
                                                color: &quot;#43a047&quot;
                                                anchors.centerIn: parent
                                            }

                                            Text {
                                                visible: network.connectStatus === &quot;error&quot; &amp;&amp; !network.connectingSsid
                                                text: &quot;error&quot;
                                                font.family: &quot;Material Symbols Outlined&quot;
                                                font.pixelSize: 18 * Theme.scale(screen)
                                                color: Theme.error
                                                anchors.centerIn: parent
                                            }

                                        }

                                        Text {
                                            visible: modelData.connected
                                            text: &quot;connected&quot;
                                            color: networkMouseArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                                            font.pixelSize: 11 * Theme.scale(screen)
                                        }

                                    }

                                    MouseArea {
                                        id: networkMouseArea

                                        anchors.fill: parent
                                        hoverEnabled: true
                                        onClicked: {
                                            if (modelData.connected) {
                                                network.disconnectNetwork(modelData.ssid);
                                            } else if (network.isSecured(modelData.security) &amp;&amp; !modelData.existing) {
                                                passwordPromptSsid = modelData.ssid;
                                                showPasswordPrompt = true;
                                                passwordInput = &quot;&quot;; // Clear previous input
                                                Qt.callLater(function() {
                                                    passwordInputField.forceActiveFocus();
                                                });
                                            } else {
                                                network.connectNetwork(modelData.ssid, modelData.security);
                                            }
                                        }
                                    }

                                }

                                // Password prompt section
                                Rectangle {
                                    id: passwordPromptSection

                                    Layout.fillWidth: true
                                    Layout.preferredHeight: modelData.ssid === passwordPromptSsid &amp;&amp; showPasswordPrompt ? 60 : 0
                                    Layout.margins: 8
                                    visible: modelData.ssid === passwordPromptSsid &amp;&amp; showPasswordPrompt
                                    color: Theme.surfaceVariant
                                    radius: 8

                                    RowLayout {
                                        anchors.fill: parent
                                        anchors.margins: 12
                                        spacing: 10

                                        Item {
                                            Layout.fillWidth: true
                                            Layout.preferredHeight: 36

                                            Rectangle {
                                                anchors.fill: parent
                                                radius: 8
                                                color: &quot;transparent&quot;
                                                border.color: passwordInputField.activeFocus ? Theme.accentPrimary : Theme.outline
                                                border.width: 1

                                                TextInput {
                                                    id: passwordInputField

                                                    anchors.fill: parent
                                                    anchors.margins: 12
                                                    text: passwordInput
                                                    font.pixelSize: 13 * Theme.scale(screen)
                                                    color: Theme.textPrimary
                                                    verticalAlignment: TextInput.AlignVCenter
                                                    clip: true
                                                    focus: true
                                                    selectByMouse: true
                                                    activeFocusOnTab: true
                                                    inputMethodHints: Qt.ImhNone
                                                    echoMode: TextInput.Password
                                                    onTextChanged: passwordInput = text
                                                    onAccepted: {
                                                        network.submitPassword(passwordPromptSsid, passwordInput);
                                                        showPasswordPrompt = false;
                                                    }

                                                    MouseArea {
                                                        id: passwordInputMouseArea

                                                        anchors.fill: parent
                                                        onClicked: passwordInputField.forceActiveFocus()
                                                    }

                                                }

                                            }

                                        }

                                        Rectangle {
                                            Layout.preferredWidth: 80
                                            Layout.preferredHeight: 36
                                            radius: 18
                                            color: Theme.accentPrimary
                                            border.color: Theme.accentPrimary
                                            border.width: 0
                                            opacity: 1

                                            MouseArea {
                                                anchors.fill: parent
                                                onClicked: {
                                                    network.submitPassword(passwordPromptSsid, passwordInput);
                                                    showPasswordPrompt = false;
                                                }
                                                cursorShape: Qt.PointingHandCursor
                                                hoverEnabled: true
                                                onEntered: parent.color = Qt.darker(Theme.accentPrimary, 1.1)
                                                onExited: parent.color = Theme.accentPrimary
                                            }

                                            Text {
                                                anchors.centerIn: parent
                                                text: &quot;Connect&quot;
                                                color: Theme.backgroundPrimary
                                                font.pixelSize: 14 * Theme.scale(screen)
                                                font.bold: true
                                            }

                                            Behavior on color {
                                                ColorAnimation {
                                                    duration: 100
                                                }

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Bar/Modules/Workspace.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick.Window
import QtQuick.Effects
import Quickshell
import Quickshell.Io
import qs.Settings
import qs.Services

Item {
    id: root
    required property ShellScreen screen
    property bool isDestroying: false
    property bool hovered: false

    signal workspaceChanged(int workspaceId, color accentColor)

    property ListModel localWorkspaces: ListModel {}
    property real masterProgress: 0.0
    property bool effectsActive: false
    property color effectColor: Theme.accentPrimary

    property int horizontalPadding: 16
    property int spacingBetweenPills: 8

    width: {
        let total = 0;
        for (let i = 0; i &lt; localWorkspaces.count; i++) {
            const ws = localWorkspaces.get(i);
            if (ws.isFocused)
                total += 44;
            else if (ws.isActive)
                total += 28;
            else
                total += 16;
        }
        total += Math.max(localWorkspaces.count - 1, 0) * spacingBetweenPills;
        total += horizontalPadding * 2;
        return total;
    }

    height: 36 * Theme.scale(screen)

    Component.onCompleted: {
        localWorkspaces.clear();
        for (let i = 0; i &lt; WorkspaceManager.workspaces.count; i++) {
            const ws = WorkspaceManager.workspaces.get(i);
            if (ws.output.toLowerCase() === screen.name.toLowerCase()) {
                localWorkspaces.append(ws);
            }
        }
        workspaceRepeater.model = localWorkspaces;
        updateWorkspaceFocus();
    }

    Connections {
        target: WorkspaceManager
        function onWorkspacesChanged() {
            localWorkspaces.clear();
            for (let i = 0; i &lt; WorkspaceManager.workspaces.count; i++) {
                const ws = WorkspaceManager.workspaces.get(i);
                if (ws.output.toLowerCase() === screen.name.toLowerCase()) {
                    localWorkspaces.append(ws);
                }
            }

            workspaceRepeater.model = localWorkspaces;
            updateWorkspaceFocus();
        }
    }

    function triggerUnifiedWave() {
        effectColor = Theme.accentPrimary;
        masterAnimation.restart();
    }

    SequentialAnimation {
        id: masterAnimation
        PropertyAction {
            target: root
            property: &quot;effectsActive&quot;
            value: true
        }
        NumberAnimation {
            target: root
            property: &quot;masterProgress&quot;
            from: 0.0
            to: 1.0
            duration: 1000
            easing.type: Easing.OutQuint
        }
        PropertyAction {
            target: root
            property: &quot;effectsActive&quot;
            value: false
        }
        PropertyAction {
            target: root
            property: &quot;masterProgress&quot;
            value: 0.0
        }
    }

    function updateWorkspaceFocus() {
        for (let i = 0; i &lt; localWorkspaces.count; i++) {
            const ws = localWorkspaces.get(i);
            if (ws.isFocused === true) {
                root.triggerUnifiedWave();
                root.workspaceChanged(ws.id, Theme.accentPrimary);
                break;
            }
        }
    }

    Rectangle {
        id: workspaceBackground
        width: parent.width - 15 * Theme.scale(screen)
        height: 26 * Theme.scale(screen)
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
        radius: 12
        color: Theme.surfaceVariant
        border.color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.1)
        border.width: 1 * Theme.scale(screen)
        layer.enabled: true
        layer.effect: MultiEffect {
            shadowColor: &quot;black&quot;
            // radius: 12

            shadowVerticalOffset: 0
            shadowHorizontalOffset: 0
            shadowOpacity: 0.10
        }
    }

    Row {
        id: pillRow
        spacing: spacingBetweenPills
        anchors.verticalCenter: workspaceBackground.verticalCenter
        width: root.width - horizontalPadding * 2
        x: horizontalPadding
        Repeater {
            id: workspaceRepeater
            model: localWorkspaces
            Item {
                id: workspacePillContainer
                height: 12 * Theme.scale(screen)
                width: {
                    if (model.isFocused)
                        return 44;
                    else if (model.isActive)
                        return 28;
                    else
                        return 16;
                }

                Rectangle {
                    id: workspacePill
                    anchors.fill: parent
                    radius: {
                        if (model.isFocused)
                            return 12;
                        else
                            // half of focused height (if you want to animate this too)
                            return 6;
                    }
                    color: {
                        if (model.isFocused)
                            return Theme.accentPrimary;
                        if (model.isUrgent)
                            return Theme.error;
                        if (model.isActive || model.isOccupied)
                            return Theme.accentTertiary;
                        if (model.isUrgent)
                            return Theme.error;

                        return Theme.outline;
                    }
                    scale: model.isFocused ? 1.0 : 0.9
                    z: 0

                    MouseArea {
                        id: pillMouseArea
                        anchors.fill: parent
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            WorkspaceManager.switchToWorkspace(model.idx);
                        }
                        z: 20
                        hoverEnabled: true
                    }
                    // Material 3-inspired smooth animation for width, height, scale, color, opacity, and radius
                    Behavior on width {
                        NumberAnimation {
                            duration: 350
                            easing.type: Easing.OutBack
                        }
                    }
                    Behavior on height {
                        NumberAnimation {
                            duration: 350
                            easing.type: Easing.OutBack
                        }
                    }
                    Behavior on scale {
                        NumberAnimation {
                            duration: 300
                            easing.type: Easing.OutBack
                        }
                    }
                    Behavior on color {
                        ColorAnimation {
                            duration: 200
                            easing.type: Easing.InOutCubic
                        }
                    }
                    Behavior on opacity {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.InOutCubic
                        }
                    }
                    Behavior on radius {
                        NumberAnimation {
                            duration: 350
                            easing.type: Easing.OutBack
                        }
                    }
                }

                Behavior on width {
                    NumberAnimation {
                        duration: 350
                        easing.type: Easing.OutBack
                    }
                }
                Behavior on height {
                    NumberAnimation {
                        duration: 350
                        easing.type: Easing.OutBack
                    }
                }
                // Burst effect overlay for focused pill (smaller outline)
                Rectangle {
                    id: pillBurst
                    anchors.centerIn: workspacePillContainer
                    width: workspacePillContainer.width + 18 * root.masterProgress * Theme.scale(screen)
                    height: workspacePillContainer.height + 18 * root.masterProgress * Theme.scale(screen)
                    radius: width / 2
                    color: &quot;transparent&quot;
                    border.color: root.effectColor
                    border.width: (2 + 6 * (1.0 - root.masterProgress)) * Theme.scale(screen)
                    opacity: root.effectsActive &amp;&amp; model.isFocused ? (1.0 - root.masterProgress) * 0.7 : 0
                    visible: root.effectsActive &amp;&amp; model.isFocused
                    z: 1
                }
            }
        }
    }

    Component.onDestruction: {
        root.isDestroying = true;
    }
}</file><file path="quickshell/Bar/Bar.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import Quickshell.Wayland
import qs.Bar.Modules
import qs.Components
import qs.Helpers
import qs.Services
import qs.Settings
import qs.Widgets
import qs.Widgets.Notification
import qs.Widgets.SidePanel

// Main bar component - creates panels on selected monitors with widgets and corners
Scope {
    id: rootScope

    property var shell
    property alias visible: barRootItem.visible

    Item {
        id: barRootItem

        anchors.fill: parent

        Variants {
            model: Quickshell.screens

            Item {
                property var modelData

                PanelWindow {
                    id: panel

                    screen: modelData
                    color: &quot;transparent&quot;
                    implicitHeight: barBackground.height
                    anchors.top: true
                    anchors.left: true
                    anchors.right: true
                    visible: Settings.settings.barMonitors.includes(modelData.name) || (Settings.settings.barMonitors.length === 0)
                    Component.onCompleted: {
                        console.log(&quot;Bar initialized on &quot; + screen.name);
                    }

                    Rectangle {
                        id: barBackground

                        width: parent.width
                        height: 36 * Theme.scale(panel.screen)
                        color: Theme.backgroundPrimary
                        anchors.top: parent.top
                        anchors.left: parent.left
                    }

                    Row {
                        id: leftWidgetsRow

                        anchors.verticalCenter: barBackground.verticalCenter
                        anchors.left: barBackground.left
                        anchors.leftMargin: 18 * Theme.scale(panel.screen)
                        spacing: 12 * Theme.scale(panel.screen)

                        SystemInfo {
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Media {
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Taskbar {
                            anchors.verticalCenter: parent.verticalCenter
                        }

                    }

                    ActiveWindow {
                        screen: modelData
                    }

                    Workspace {
                        id: workspace

                        screen: modelData
                        anchors.horizontalCenter: barBackground.horizontalCenter
                        anchors.verticalCenter: barBackground.verticalCenter
                    }

                    Row {
                        id: rightWidgetsRow

                        anchors.verticalCenter: barBackground.verticalCenter
                        anchors.right: barBackground.right
                        anchors.rightMargin: 18 * Theme.scale(panel.screen)
                        spacing: 12 * Theme.scale(panel.screen)

                        SystemTray {
                            id: systemTrayModule

                            shell: rootScope.shell
                            anchors.verticalCenter: parent.verticalCenter
                            bar: panel
                            trayMenu: externalTrayMenu
                        }

                        CustomTrayMenu {
                            id: externalTrayMenu
                        }

                        NotificationIcon {
                            shell: rootScope.shell
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Wifi {
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Bluetooth {
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Battery {
                            id: widgetsBattery

                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Brightness {
                            id: widgetsBrightness

                            screen: modelData
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        Volume {
                            id: widgetsVolume

                            shell: rootScope.shell
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        ClockWidget {
                            screen: modelData
                            anchors.verticalCenter: parent.verticalCenter
                        }

                        PanelPopup {
                            id: sidebarPopup
                            shell: rootScope.shell
                        }

                        SidePanelButton {
                            anchors.verticalCenter: parent.verticalCenter
                            screen: modelData
                        }

                    }

                }

                Loader {
                    active: Settings.settings.showCorners &amp;&amp; (Settings.settings.barMonitors.includes(modelData.name) || (Settings.settings.barMonitors.length === 0))

                    sourceComponent: Item {
                        PanelWindow {
                            id: topLeftPanel

                            anchors.top: true
                            anchors.left: true
                            color: &quot;transparent&quot;
                            screen: modelData
                            margins.top: 36 * Theme.scale(screen) - 1
                            WlrLayershell.exclusionMode: ExclusionMode.Ignore
                            WlrLayershell.layer: WlrLayer.Top
                            WlrLayershell.namespace: &quot;swww-daemon&quot;
                            aboveWindows: false
                            implicitHeight: 24

                            Corner {
                                id: topLeftCorner

                                position: &quot;bottomleft&quot;
                                size: 1.3
                                fillColor: (Theme.backgroundPrimary !== undefined &amp;&amp; Theme.backgroundPrimary !== null) ? Theme.backgroundPrimary : &quot;#222&quot;
                                offsetX: -39
                                offsetY: 0
                                anchors.top: parent.top
                            }

                        }

                        PanelWindow {
                            id: topRightPanel

                            anchors.top: true
                            anchors.right: true
                            color: &quot;transparent&quot;
                            screen: modelData
                            margins.top: 36 * Theme.scale(screen) - 1
                            WlrLayershell.exclusionMode: ExclusionMode.Ignore
                            WlrLayershell.layer: WlrLayer.Top
                            WlrLayershell.namespace: &quot;swww-daemon&quot;
                            aboveWindows: false
                            implicitHeight: 24

                            Corner {
                                id: topRightCorner

                                position: &quot;bottomright&quot;
                                size: 1.3
                                fillColor: (Theme.backgroundPrimary !== undefined &amp;&amp; Theme.backgroundPrimary !== null) ? Theme.backgroundPrimary : &quot;#222&quot;
                                offsetX: 39
                                offsetY: 0
                                anchors.top: parent.top
                            }

                        }

                        PanelWindow {
                            id: bottomLeftPanel

                            anchors.bottom: true
                            anchors.left: true
                            color: &quot;transparent&quot;
                            screen: modelData
                            WlrLayershell.exclusionMode: ExclusionMode.Ignore
                            WlrLayershell.layer: WlrLayer.Top
                            WlrLayershell.namespace: &quot;swww-daemon&quot;
                            aboveWindows: false
                            implicitHeight: 24

                            Corner {
                                id: bottomLeftCorner

                                position: &quot;topleft&quot;
                                size: 1.3
                                fillColor: Theme.backgroundPrimary
                                offsetX: -39
                                offsetY: 0
                                anchors.top: parent.top
                            }

                        }

                        PanelWindow {
                            id: bottomRightPanel

                            anchors.bottom: true
                            anchors.right: true
                            color: &quot;transparent&quot;
                            screen: modelData
                            WlrLayershell.exclusionMode: ExclusionMode.Ignore
                            WlrLayershell.layer: WlrLayer.Top
                            WlrLayershell.namespace: &quot;swww-daemon&quot;
                            aboveWindows: false
                            implicitHeight: 24

                            Corner {
                                id: bottomRightCorner

                                position: &quot;topright&quot;
                                size: 1.3
                                fillColor: Theme.backgroundPrimary
                                offsetX: 39
                                offsetY: 0
                                anchors.top: parent.top
                            }

                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Components/Avatar.qml">import QtQuick
import Quickshell
import Quickshell.Widgets
import qs.Settings
import QtQuick.Effects

Item {
    anchors.fill: parent
    anchors.margins: 2

    Image {
        id: avatarImage
        anchors.fill: parent
        source: &quot;file://&quot; + Settings.settings.profileImage
        visible: false
        mipmap: true
        smooth: true
        asynchronous: true
        fillMode: Image.PreserveAspectCrop
    }

    MultiEffect {
        anchors.fill: parent
        source: avatarImage
        maskEnabled: true
        maskSource: mask
        visible: Settings.settings.profileImage !== &quot;&quot;
    }

    Item {
        id: mask
        anchors.fill: parent
        layer.enabled: true
        visible: false
        Rectangle {
            anchors.fill: parent
            radius: avatarImage.width / 2
        }
    }

    // Fallback icon
    Text {
        anchors.centerIn: parent
        text: &quot;person&quot;
        font.family: &quot;Material Symbols Outlined&quot;
        font.pixelSize: 24 * Theme.scale(screen)
        color: Theme.onAccent
        visible: Settings.settings.profileImage === undefined || Settings.settings.profileImage === &quot;&quot;
        z: 0
    }
}</file><file path="quickshell/Components/Cava.qml">import QtQuick
import Quickshell
import Quickshell.Io
import qs.Services

Scope {
    id: root
    property int count: 32
    property int noiseReduction: 60
    property string channels: &quot;mono&quot;
    property string monoOption: &quot;average&quot;

    property var config: ({
            general: {
                bars: count,
                framerate: 30,
                autosens: 1
            },
            smoothing: {
                monstercat: 1,
                gravity: 1000000,
                noise_reduction: noiseReduction
            },
            output: {
                method: &quot;raw&quot;,
                bit_format: 8,
                channels: channels,
                mono_option: monoOption
            }
        })

    property var values: Array(count).fill(0)

    Process {
        id: process
        property int index: 0
        stdinEnabled: true
        running: MusicManager.isPlaying
        command: [&quot;cava&quot;, &quot;-p&quot;, &quot;/dev/stdin&quot;]
        onExited: {
            stdinEnabled = true;
            index = 0;
            values = Array(count).fill(0);
        }
        onStarted: {
            for (const k in config) {
                if (typeof config[k] !== &quot;object&quot;) {
                    write(k + &quot;=&quot; + config[k] + &quot;\n&quot;);
                    continue;
                }
                write(&quot;[&quot; + k + &quot;]\n&quot;);
                const obj = config[k];
                for (const k2 in obj) {
                    write(k2 + &quot;=&quot; + obj[k2] + &quot;\n&quot;);
                }
            }
            stdinEnabled = false;
        }
        stdout: SplitParser {
            splitMarker: &quot;&quot;
            onRead: data =&gt; {
                const newValues = Array(count).fill(0);
                for (let i = 0; i &lt; values.length; i++) {
                    newValues[i] = values[i];
                }
                if (process.index + data.length &gt; count) {
                    process.index = 0;
                }
                for (let i = 0; i &lt; data.length; i += 1) {
                    newValues[process.index] = Math.min(data.charCodeAt(i), 128) / 128;
                    process.index = (process.index+1) % count;
                }
                values = newValues;
            }
        }
    }
}</file><file path="quickshell/Components/CircularProgressBar.qml">import QtQuick
import qs.Settings

Rectangle {
    id: circularProgressBar
    color: &quot;transparent&quot;
    
    property real progress: 0.0
    property int size: 80
    property color backgroundColor: Theme.surfaceVariant
    property color progressColor: Theme.accentPrimary
    property int strokeWidth: 6 * Theme.scale(screen)
    property bool showText: true
    property string units: &quot;%&quot;
    property string text: Math.round(progress * 100) + units
    property int textSize: 10 * Theme.scale(screen)
    property color textColor: Theme.textPrimary
    
    // Notch properties
    property bool hasNotch: false
    property real notchSize: 0.25
    property string notchIcon: &quot;&quot;
    property int notchIconSize: 12
    property color notchIconColor: Theme.accentPrimary
    
    width: size
    height: size
    
    Canvas {
        id: canvas
        anchors.fill: parent
        
        onPaint: {
            // Setup canvas context and calculate dimensions
            var ctx = getContext(&quot;2d&quot;)
            var centerX = width / 2
            var centerY = height / 2
            var radius = Math.min(width, height) / 2 - strokeWidth / 2
            var startAngle = -Math.PI / 2 // Start from top
            var notchAngle = notchSize * 2 * Math.PI
            var notchStartAngle = -notchAngle / 2
            var notchEndAngle = notchAngle / 2
            
            ctx.reset()
            ctx.strokeStyle = backgroundColor
            ctx.lineWidth = strokeWidth
            ctx.lineCap = &quot;round&quot;
            ctx.beginPath()
            
            if (hasNotch) {
                // Draw background arc with notch gap
                ctx.arc(centerX, centerY, radius, notchEndAngle, 2 * Math.PI + notchStartAngle)
            } else {
                // Draw full background circle
                ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI)
            }
            ctx.stroke()
            
            // Draw progress arc
            if (progress &gt; 0) {
                ctx.strokeStyle = progressColor
                ctx.lineWidth = strokeWidth
                ctx.lineCap = &quot;round&quot;
                ctx.beginPath()
                
                if (hasNotch) {
                    // Calculate progress arc with notch gap
                    var availableAngle = 2 * Math.PI - notchAngle
                    var progressAngle = availableAngle * progress
                    var adjustedStartAngle = notchEndAngle
                    var adjustedEndAngle = adjustedStartAngle + progressAngle
                    if (adjustedEndAngle &gt; 2 * Math.PI + notchStartAngle) {
                        adjustedEndAngle = 2 * Math.PI + notchStartAngle
                    }
                    
                    if (adjustedEndAngle &gt; adjustedStartAngle) {
                        ctx.arc(centerX, centerY, radius, adjustedStartAngle, adjustedEndAngle)
                    }
                } else {
                    // Draw full progress arc
                    ctx.arc(centerX, centerY, radius, startAngle, startAngle + (2 * Math.PI * progress))
                }
                ctx.stroke()
            }
        }
    }
    
    // Center text - always show the percentage
    Text {
        id: centerText
        anchors.centerIn: parent
        text: circularProgressBar.text
        font.pixelSize: textSize
        font.family: Theme.fontFamily
        font.bold: true
        color: textColor
        visible: showText
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
    }
    
    // Notch icon - positioned further to the right
    Text {
        id: notchIconText
        anchors.right: parent.right
        anchors.rightMargin: -4
        anchors.verticalCenter: parent.verticalCenter
        text: notchIcon
        font.family: &quot;Material Symbols Outlined&quot;
        font.pixelSize: notchIconSize
        color: notchIconColor
        visible: hasNotch &amp;&amp; notchIcon !== &quot;&quot;
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
    }
    
    // Animate progress changes
    Behavior on progress {
        NumberAnimation { duration: 300; easing.type: Easing.OutCubic }
    }
    
    // Redraw canvas when properties change
    onProgressChanged: canvas.requestPaint()
    onSizeChanged: canvas.requestPaint()
    onBackgroundColorChanged: canvas.requestPaint()
    onProgressColorChanged: canvas.requestPaint()
    onStrokeWidthChanged: canvas.requestPaint()
    onHasNotchChanged: canvas.requestPaint()
    onNotchSizeChanged: canvas.requestPaint()
}</file><file path="quickshell/Components/CircularSpectrum.qml">import QtQuick
import qs.Components
import qs.Settings

Item {
    id: root

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property int innerRadius: 34 * Theme.scale(screen)
    property int outerRadius: 48 * Theme.scale(screen)
    property color fillColor: &quot;#fff&quot;
    property color strokeColor: &quot;#fff&quot;
    property int strokeWidth: 0 * Theme.scale(screen)
    property var values: []
    property int usableOuter: 48

    width: usableOuter * 2
    height: usableOuter * 2
    onOuterRadiusChanged: () =&gt; {
        usableOuter = Settings.settings.visualizerType === &quot;fire&quot; ? outerRadius * 0.85 : outerRadius;
    }

    Repeater {
        model: root.values.length

        Rectangle {
            property real value: root.values[index]
            property real angle: (index / root.values.length) * 360

            width: Math.max(2 * Theme.scale(screen), (root.innerRadius * 2 * Math.PI) / root.values.length - 4 * Theme.scale(screen))
            height: Settings.settings.visualizerType === &quot;diamond&quot; ? value * 2 * (usableOuter - root.innerRadius) : value * (usableOuter - root.innerRadius)
            radius: width / 2
            color: root.fillColor
            border.color: root.strokeColor
            border.width: root.strokeWidth
            antialiasing: true
            x: Settings.settings.visualizerType === &quot;radial&quot; ? root.width / 2 - width / 2 : root.width / 2 + root.innerRadius * Math.cos(Math.PI / 2 + 2 * Math.PI * index / root.values.length) - width / 2
            y: Settings.settings.visualizerType === &quot;radial&quot; ? root.height / 2 - height : Settings.settings.visualizerType === &quot;diamond&quot; ? root.height / 2 - root.innerRadius * Math.sin(Math.PI / 2 + 2 * Math.PI * index / root.values.length) - height / 2 : root.height / 2 - root.innerRadius * Math.sin(Math.PI / 2 + 2 * Math.PI * index / root.values.length) - height
            transform: [
                Rotation {
                    origin.x: width / 2
                    origin.y: Settings.settings.visualizerType === &quot;diamond&quot; ? height / 2 : height
                    angle: Settings.settings.visualizerType === &quot;radial&quot; ? (index / root.values.length) * 360 : Settings.settings.visualizerType === &quot;fire&quot; ? 0 : (index / root.values.length) * 360 - 90
                },
                Translate {
                    x: Settings.settings.visualizerType === &quot;radial&quot; ? root.innerRadius * Math.cos(2 * Math.PI * index / root.values.length) : 0
                    y: Settings.settings.visualizerType === &quot;radial&quot; ? root.innerRadius * Math.sin(2 * Math.PI * index / root.values.length) : 0
                }
            ]

            Behavior on height {
                SmoothedAnimation {
                    duration: 120
                }

            }

        }

    }

}</file><file path="quickshell/Components/Corner.qml">import QtQuick
import QtQuick.Shapes
import qs.Settings

Shape {
    id: root
    
    property string position: &quot;topleft&quot;  // Corner position: topleft/topright/bottomleft/bottomright
    property real size: 1.0 * Theme.scale(screen)              // Scale multiplier for entire corner
    property int concaveWidth: 100 * size
    property int concaveHeight: 60 * size
    property int offsetX: -20 * Theme.scale(screen)
    property int offsetY: -20 * Theme.scale(screen)
    property color fillColor: Theme.accentPrimary
    property int arcRadius: 20 * size

    property var modelData: null
    
    // Position flags derived from position string - calculated once
    readonly property bool _isTop: position.includes(&quot;top&quot;)
    readonly property bool _isLeft: position.includes(&quot;left&quot;)
    readonly property bool _isRight: position.includes(&quot;right&quot;)
    readonly property bool _isBottom: position.includes(&quot;bottom&quot;)
    
    // Shift the path vertically if offsetY is negative to pull shape up
    readonly property real pathOffsetY: Math.min(offsetY, 0)
    
    // Base coordinates for left corner shape, shifted by pathOffsetY vertically
    readonly property real _baseStartX: 30 * size
    readonly property real _baseStartY: (_isTop ? 20 * size : 0) + pathOffsetY
    readonly property real _baseLineX: 30 * size  
    readonly property real _baseLineY: (_isTop ? 0 : 20 * size) + pathOffsetY
    readonly property real _baseArcX: 50 * size
    readonly property real _baseArcY: (_isTop ? 20 * size : 0) + pathOffsetY
    
    // Mirror coordinates for right corners
    readonly property real _startX: _isRight ? (concaveWidth - _baseStartX) : _baseStartX
    readonly property real _startY: _baseStartY
    readonly property real _lineX: _isRight ? (concaveWidth - _baseLineX) : _baseLineX
    readonly property real _lineY: _baseLineY
    readonly property real _arcX: _isRight ? (concaveWidth - _baseArcX) : _baseArcX
    readonly property real _arcY: _baseArcY
    
    // Arc direction varies by corner to maintain proper concave shape
    readonly property int _arcDirection: {
        if (_isTop &amp;&amp; _isLeft) return PathArc.Counterclockwise
        if (_isTop &amp;&amp; _isRight) return PathArc.Clockwise
        if (_isBottom &amp;&amp; _isLeft) return PathArc.Clockwise
        if (_isBottom &amp;&amp; _isRight) return PathArc.Counterclockwise
        return PathArc.Counterclockwise
    }
    
    width: concaveWidth
    height: concaveHeight
    
    // Position relative to parent based on corner type
    x: _isLeft ? offsetX : (parent ? parent.width - width + offsetX : 0)
    y: _isTop ? offsetY : (parent ? parent.height - height + offsetY : 0)
    
    preferredRendererType: Shape.CurveRenderer  // Use GPU-based renderer
    layer.enabled: false  // Disable layer rendering to save memory
    antialiasing: true    // Use standard antialiasing instead of MSAA

    ShapePath {
        strokeWidth: 0
        fillColor: root.fillColor
        strokeColor: root.fillColor

        startX: root._startX
        startY: root._startY

        PathLine { 
            x: root._lineX
            y: root._lineY 
        }

        PathArc {
            x: root._arcX
            y: root._arcY
            radiusX: root.arcRadius
            radiusY: root.arcRadius
            useLargeArc: false
            direction: root._arcDirection
        }
    }
}</file><file path="quickshell/Components/Corners.qml">import QtQuick
import QtQuick.Shapes
import qs.Settings

Shape {
    id: root
    
    property string position: &quot;topleft&quot;  // Corner position: topleft/topright/bottomleft/bottomright
    property real size: 1.0              // Scale multiplier for entire corner
    property int concaveWidth: 100 * size
    property int concaveHeight: 60 * size
    property int offsetX: -20
    property int offsetY: -20
    property color fillColor: Theme.accentPrimary
    property int arcRadius: 20 * size

    property var modelData: null
    
    // Position flags derived from position string
    property bool _isTop: position.includes(&quot;top&quot;)
    property bool _isLeft: position.includes(&quot;left&quot;)
    property bool _isRight: position.includes(&quot;right&quot;)
    property bool _isBottom: position.includes(&quot;bottom&quot;)
    
    // Shift the path vertically if offsetY is negative to pull shape up
    property real pathOffsetY: Math.min(offsetY, 0)
    
    // Base coordinates for left corner shape, shifted by pathOffsetY vertically
    property real _baseStartX: 30 * size
    property real _baseStartY: (_isTop ? 20 * size : 0) + pathOffsetY
    property real _baseLineX: 30 * size  
    property real _baseLineY: (_isTop ? 0 : 20 * size) + pathOffsetY
    property real _baseArcX: 50 * size
    property real _baseArcY: (_isTop ? 20 * size : 0) + pathOffsetY
    
    // Mirror coordinates for right corners
    property real _startX: _isRight ? (concaveWidth - _baseStartX) : _baseStartX
    property real _startY: _baseStartY
    property real _lineX: _isRight ? (concaveWidth - _baseLineX) : _baseLineX
    property real _lineY: _baseLineY
    property real _arcX: _isRight ? (concaveWidth - _baseArcX) : _baseArcX
    property real _arcY: _baseArcY
    
    // Arc direction varies by corner to maintain proper concave shape
    property int _arcDirection: {
        if (_isTop &amp;&amp; _isLeft) return PathArc.Counterclockwise
        if (_isTop &amp;&amp; _isRight) return PathArc.Clockwise
        if (_isBottom &amp;&amp; _isLeft) return PathArc.Clockwise
        if (_isBottom &amp;&amp; _isRight) return PathArc.Counterclockwise
        return PathArc.Counterclockwise
    }
    
    width: concaveWidth
    height: concaveHeight
    
    // Position relative to parent based on corner type
    x: _isLeft ? offsetX : (parent ? parent.width - width + offsetX : 0)
    y: _isTop ? offsetY : (parent ? parent.height - height + offsetY : 0)
    
    preferredRendererType: Shape.CurveRenderer
    layer.enabled: true
    layer.samples: 4

    ShapePath {
        strokeWidth: 0
        fillColor: root.fillColor
        strokeColor: root.fillColor

        startX: root._startX
        startY: root._startY

        PathLine { 
            x: root._lineX
            y: root._lineY 
        }

        PathArc {
            x: root._arcX
            y: root._arcY
            radiusX: root.arcRadius
            radiusY: root.arcRadius
            useLargeArc: false
            direction: root._arcDirection
        }
    }
}</file><file path="quickshell/Components/IconButton.qml">import QtQuick
import Quickshell
import Quickshell.Widgets
import qs.Settings

MouseArea {
    id: root
    property string icon
    property bool enabled: true
    property bool hovering: false
    property real size: 32
    cursorShape: Qt.PointingHandCursor
    implicitWidth: size
    implicitHeight: size

    hoverEnabled: true
    onEntered: hovering = true
    onExited: hovering = false

    Rectangle {
        anchors.fill: parent
        radius: 8
        color: root.hovering ? Theme.accentPrimary : &quot;transparent&quot;
    }
    Text {
        id: iconText
        anchors.centerIn: parent
        text: root.icon
        font.family: &quot;Material Symbols Outlined&quot;
        font.pixelSize: 24 * Theme.scale(screen)
        color: root.hovering ? Theme.onAccent : Theme.textPrimary
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        opacity: root.enabled ? 1.0 : 0.5
    }
}</file><file path="quickshell/Components/PanelWithOverlay.qml">import QtQuick
import Quickshell
import Quickshell.Wayland
import qs.Settings

PanelWindow {
    id: outerPanel
    property bool showOverlay: Settings.settings.dimPanels
    property int topMargin: 36 * Theme.scale(screen)
    property color overlayColor: showOverlay ? Theme.overlay : &quot;transparent&quot;
    
    function dismiss() {
        visible = false;
    }

    function show() {
        visible = true;
    }

    implicitWidth: screen.width
    implicitHeight: screen.height
    color: visible ? overlayColor : &quot;transparent&quot;
    visible: false
    WlrLayershell.exclusionMode: ExclusionMode.Ignore
    screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    anchors.top: true
    anchors.left: true
    anchors.right: true
    anchors.bottom: true
    margins.top: topMargin

    MouseArea {
        anchors.fill: parent
        onClicked: outerPanel.dismiss()
    }

    Behavior on color {
        ColorAnimation {
            duration: 350
            easing.type: Easing.InOutCubic
        }
    }
}</file><file path="quickshell/Components/PillIndicator.qml">import QtQuick
import QtQuick.Controls
import qs.Settings

Item {
    id: revealPill

    // External properties
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property string icon: &quot;&quot;
    property string text: &quot;&quot;
    property color pillColor: Theme.surfaceVariant
    property color textColor: Theme.textPrimary
    property color iconCircleColor: Theme.accentPrimary
    property color iconTextColor: Theme.backgroundPrimary
    property color collapsedIconColor: Theme.textPrimary
    property int pillHeight: 22 * Theme.scale(screen)
    property int iconSize: 22 * Theme.scale(screen)
    property int pillPaddingHorizontal: 14
    property bool autoHide: false

    // Internal state
    property bool showPill: false
    property bool shouldAnimateHide: false

    // Exposed width logic
    readonly property int pillOverlap: iconSize / 2
    readonly property int maxPillWidth: Math.max(1, textItem.implicitWidth + pillPaddingHorizontal * 2 + pillOverlap)

    signal shown
    signal hidden

    width: iconSize + (showPill ? maxPillWidth - pillOverlap : 0)
    height: pillHeight

    Rectangle {
        id: pill
        width: showPill ? maxPillWidth : 1
        height: pillHeight
        x: (iconCircle.x + iconCircle.width / 2) - width
        opacity: showPill ? 1 : 0
        color: pillColor
        topLeftRadius: pillHeight / 2
        bottomLeftRadius: pillHeight / 2
        anchors.verticalCenter: parent.verticalCenter

        Text {
            id: textItem
            anchors.centerIn: parent
            text: revealPill.text
            font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
            font.family: Theme.fontFamily
            font.weight: Font.Bold
            color: textColor
            visible: showPill
        }

        Behavior on width {
            enabled: showAnim.running || hideAnim.running
            NumberAnimation {
                duration: 250
                easing.type: Easing.OutCubic
            }
        }
        Behavior on opacity {
            enabled: showAnim.running || hideAnim.running
            NumberAnimation {
                duration: 250
                easing.type: Easing.OutCubic
            }
        }
    }

    Rectangle {
        id: iconCircle
        width: iconSize
        height: iconSize
        radius: width / 2
        color: showPill ? iconCircleColor : &quot;transparent&quot;
        anchors.verticalCenter: parent.verticalCenter
        anchors.right: parent.right

        Behavior on color {
            ColorAnimation {
                duration: 200
                easing.type: Easing.InOutQuad
            }
        }

        Text {
            anchors.centerIn: parent
            font.family: showPill ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
            font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
            text: revealPill.icon
            color: showPill ? iconTextColor : collapsedIconColor
        }
    }

    ParallelAnimation {
        id: showAnim
        running: false
        NumberAnimation {
            target: pill
            property: &quot;width&quot;
            from: 1
            to: maxPillWidth
            duration: 250
            easing.type: Easing.OutCubic
        }
        NumberAnimation {
            target: pill
            property: &quot;opacity&quot;
            from: 0
            to: 1
            duration: 250
            easing.type: Easing.OutCubic
        }
        onStarted: {
            showPill = true;
        }
        onStopped: {
            delayedHideAnim.start();
            shown();
        }
    }

    SequentialAnimation {
        id: delayedHideAnim
        running: false
        PauseAnimation {
            duration: 2500
        }
        ScriptAction {
            script: if (shouldAnimateHide)
                hideAnim.start()
        }
    }

    ParallelAnimation {
        id: hideAnim
        running: false
        NumberAnimation {
            target: pill
            property: &quot;width&quot;
            from: maxPillWidth
            to: 1
            duration: 250
            easing.type: Easing.InCubic
        }
        NumberAnimation {
            target: pill
            property: &quot;opacity&quot;
            from: 1
            to: 0
            duration: 250
            easing.type: Easing.InCubic
        }
        onStopped: {
            showPill = false;
            shouldAnimateHide = false;
            hidden();
        }
    }

    function show() {
        if (!showPill) {
            shouldAnimateHide = autoHide;
            showAnim.start();
        } else {
            hideAnim.stop();
            delayedHideAnim.restart();
        }
    }

    function hide() {
        if (showPill) {
            hideAnim.start();
        }
        showTimer.stop();
    }

    function showDelayed() {
        if (!showPill) {
            shouldAnimateHide = autoHide;
            showTimer.start();
        } else {
            hideAnim.stop();
            delayedHideAnim.restart();
        }
    }

    Timer {
        id: showTimer
        interval: 500
        onTriggered: {
            if (!showPill) {
                showAnim.start();
            }
        }
    }
}</file><file path="quickshell/Components/Spinner.qml">import QtQuick
import qs.Settings

Item {
    id: root
    
    property bool running: false
    property color color: &quot;white&quot;
    property int size: 16
    property int strokeWidth: 2 * Theme.scale(screen)
    property int duration: 1000
    
    implicitWidth: size
    implicitHeight: size
    
    Canvas {
        id: spinnerCanvas
        anchors.fill: parent
        
        onPaint: {
            var ctx = getContext(&quot;2d&quot;)
            ctx.reset()
            
            var centerX = width / 2
            var centerY = height / 2
            var radius = Math.min(width, height) / 2 - strokeWidth / 2
            
            ctx.strokeStyle = root.color
            ctx.lineWidth = root.strokeWidth
            ctx.lineCap = &quot;round&quot;
            
            // Draw arc with gap (270 degrees with 90 degree gap)
            ctx.beginPath()
            ctx.arc(centerX, centerY, radius, -Math.PI/2 + rotationAngle, -Math.PI/2 + rotationAngle + Math.PI * 1.5)
            ctx.stroke()
        }
        
        property real rotationAngle: 0
        
        onRotationAngleChanged: {
            requestPaint()
        }
        
        NumberAnimation {
            target: spinnerCanvas
            property: &quot;rotationAngle&quot;
            running: root.running
            from: 0
            to: 2 * Math.PI
            duration: root.duration
            loops: Animation.Infinite
        }
    }
}</file><file path="quickshell/Components/StyledTooltip.qml">import QtQuick
import QtQuick.Window 2.15
import qs.Settings

Window {
    id: tooltipWindow
    property string text: &quot;&quot;
    property bool tooltipVisible: false
    property Item targetItem: null
    property int delay: 300

    property bool positionAbove: true

    flags: Qt.ToolTip | Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint
    color: &quot;transparent&quot;
    visible: false

    property var _timerObj: null

    onTooltipVisibleChanged: {
        if (tooltipVisible) {
            if (delay &gt; 0) {
                if (_timerObj) { _timerObj.destroy(); _timerObj = null; }
                _timerObj = Qt.createQmlObject(
                    &apos;import QtQuick 2.0; Timer { interval: &apos; + delay + &apos;; running: true; repeat: false; onTriggered: tooltipWindow._showNow() }&apos;,
                    tooltipWindow);
            } else {
                _showNow();
            }
        } else {
            _hideNow();
        }
    }

    function _showNow() {
        width = Math.max(50 * Theme.scale(screen), tooltipText.implicitWidth + 24 * Theme.scale(screen))
        height = Math.max(50 * Theme.scale(screen), tooltipText.implicitHeight + 16 * Theme.scale(screen))

        if (!targetItem) return;

        if (positionAbove) {
            // Position tooltip above the target item
            var pos = targetItem.mapToGlobal(0, 0);
            x = pos.x - width / 2 + targetItem.width / 2;
            y = pos.y - height - 12; // 12 px margin above
        } else {
            // Position tooltip below the target item
            var pos = targetItem.mapToGlobal(0, targetItem.height);
            x = pos.x - width / 2 + targetItem.width / 2;
            y = pos.y + 12; // 12 px margin below
        }
        visible = true;
    }

    function _hideNow() {
        visible = false;
        if (_timerObj) { _timerObj.destroy(); _timerObj = null; }
    }

    Connections {
        target: tooltipWindow.targetItem
        function onXChanged() {
            if (tooltipWindow.visible) tooltipWindow._showNow();
        }
        function onYChanged() {
            if (tooltipWindow.visible) tooltipWindow._showNow();
        }
        function onWidthChanged() {
            if (tooltipWindow.visible) tooltipWindow._showNow();
        }
        function onHeightChanged() {
            if (tooltipWindow.visible) tooltipWindow._showNow();
        }
    }

    Rectangle {
        anchors.fill: parent
        radius: 18
        color: Theme.backgroundTertiary || &quot;#222&quot;
        border.color: Theme.outline || &quot;#444&quot;
        border.width: 1 * Theme.scale(screen)
        opacity: 0.97
        z: 1
    }

    Text {
        id: tooltipText
        text: tooltipWindow.text
        color: Theme.textPrimary
        font.family: Theme.fontFamily
        font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
        anchors.centerIn: parent
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        wrapMode: Text.Wrap
        padding: 8
        z: 2
    }

    MouseArea {
        anchors.fill: parent
        hoverEnabled: true
        onExited: tooltipWindow.tooltipVisible = false
        cursorShape: Qt.ArrowCursor
    }

    onTextChanged: {
        width = Math.max(minimumWidth * Theme.scale(screen), tooltipText.implicitWidth + 24 * Theme.scale(screen));
        height = Math.max(minimumHeight * Theme.scale(screen), tooltipText.implicitHeight + 16 * Theme.scale(screen));
    }
}</file><file path="quickshell/Components/Tabs.qml">import QtQuick
import QtQuick.Layouts
import qs.Settings

Item {
    id: root
    property var tabsModel: []
    property int currentIndex: 0
    signal tabChanged(int index)

    RowLayout {
        id: tabBar
        anchors.horizontalCenter: parent.horizontalCenter
        spacing: 16

        Repeater {
            model: root.tabsModel
            delegate: Rectangle {
                id: tabWrapper
                implicitHeight: tab.height * Theme.scale(screen)
                implicitWidth: 56 * Theme.scale(screen)
                color: &quot;transparent&quot;

                property bool hovered: false

                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        if (currentIndex !== index) {
                            currentIndex = index;
                            tabChanged(index);
                        }
                    }
                    cursorShape: Qt.PointingHandCursor
                    hoverEnabled: true
                    onEntered: parent.hovered = true
                    onExited: parent.hovered = false
                }

                ColumnLayout {
                    id: tab
                    spacing: 2
                    anchors.centerIn: parent
                    Layout.fillWidth: true
                    Layout.fillHeight: true

                    // Icon
                    Text {
                        text: modelData.icon
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 22 * Theme.scale(screen)
                        color: index === root.currentIndex ? (Theme ? Theme.accentPrimary : &quot;#7C3AED&quot;) : tabWrapper.hovered ? (Theme ? Theme.accentPrimary : &quot;#7C3AED&quot;) : (Theme ? Theme.textSecondary : &quot;#444&quot;)
                        Layout.alignment: Qt.AlignCenter
                    }

                    // Label
                    Text {
                        text: modelData.label
                        font.pixelSize: 12 * Theme.scale(screen)
                        font.bold: index === root.currentIndex
                        color: index === root.currentIndex ? (Theme ? Theme.accentPrimary : &quot;#7C3AED&quot;) : tabWrapper.hovered ? (Theme ? Theme.accentPrimary : &quot;#7C3AED&quot;) : (Theme ? Theme.textSecondary : &quot;#444&quot;)
                        Layout.alignment: Qt.AlignCenter
                    }

                    // Underline for active tab
                    Rectangle {
                        width: 24 * Theme.scale(screen)
                        height: 2 * Theme.scale(screen)
                        radius: 1
                        color: index === root.currentIndex ? (Theme ? Theme.accentPrimary : &quot;#7C3AED&quot;) : &quot;transparent&quot;
                        Layout.alignment: Qt.AlignCenter
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Components/ThemedSlider.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import qs.Settings

Slider {
    id: slider

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property bool snapAlways: true

    readonly property real trackHeight: 12 * Theme.scale(screen)
    readonly property real knobDiameter: 28 * Theme.scale(screen)
    // Optional color to cut the track beneath the knob (should match surrounding background)
    property var cutoutColor
    readonly property real cutoutExtra: 8 * Theme.scale(screen)

    snapMode: snapAlways ? Slider.SnapAlways : Slider.SnapOnRelease

    implicitHeight: Math.max(trackHeight, knobDiameter)

    background: Rectangle {
        x: slider.leftPadding
        y: slider.topPadding + slider.availableHeight / 2 - height / 2
        implicitWidth: 200
        implicitHeight: trackHeight
        width: slider.availableWidth
        height: implicitHeight
        radius: height / 2
        color: Theme.surfaceVariant

        Rectangle {
            id: activeTrack
            width: slider.visualPosition * parent.width
            height: parent.height
            color: Theme.accentPrimary
            radius: parent.radius

            Behavior on width {
                NumberAnimation { duration: 120; easing.type: Easing.OutQuad }
            }
        }

        // Circular cutout
        Rectangle {
            id: knobCutout
            width: knobDiameter + cutoutExtra
            height: knobDiameter + cutoutExtra
            radius: width / 2
            color: slider.cutoutColor !== undefined ? slider.cutoutColor : Theme.backgroundPrimary
            x: Math.max(0, Math.min(parent.width - width, slider.visualPosition * (parent.width - slider.knobDiameter) - cutoutExtra / 2))
            y: (parent.height - height) / 2
        }
    }

    handle: Item {
        id: handleRoot
        width: knob.implicitWidth
        height: knob.implicitHeight
        x: slider.leftPadding + slider.visualPosition * (slider.availableWidth - width)
        y: slider.topPadding + slider.availableHeight / 2 - height / 2

        // Subtle shadow for a more polished look (keeps theme colors)
        MultiEffect {
            anchors.fill: knob
            source: knob
            shadowEnabled: true
            shadowColor: Theme.shadow
            shadowOpacity: 0.25
            shadowHorizontalOffset: 0
            shadowVerticalOffset: 1
            shadowBlur: 8
        }

        Rectangle {
            id: knob
            implicitWidth: knobDiameter
            implicitHeight: knobDiameter
            radius: width / 2
            color: slider.pressed ? Theme.surfaceVariant : Theme.surface
            border.color: Theme.accentPrimary
            border.width: 2 * Theme.scale(screen)

            // Press feedback halo (using accent color, low opacity)
            Rectangle {
                anchors.centerIn: parent
                width: parent.width + 10 * Theme.scale(screen)
                height: parent.height + 10 * Theme.scale(screen)
                radius: width / 2
                color: Theme.accentPrimary
                opacity: slider.pressed ? 0.16 : 0.0
            }
        }
    }
}</file><file path="quickshell/Components/ToggleOption.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    property string label: &quot;&quot;
    property string description: &quot;&quot;
    property bool value: false
    property var onToggled: function() {
    }

    Layout.fillWidth: true

    RowLayout {
        Layout.fillWidth: true

        ColumnLayout {
            spacing: 4 * Theme.scale(screen)
            Layout.fillWidth: true

            Text {
                text: label
                font.pixelSize: 13 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
            }

            Text {
                text: description
                font.pixelSize: 12 * Theme.scale(screen)
                color: Theme.textSecondary
                wrapMode: Text.WordWrap
                Layout.fillWidth: true
            }

        }

        Rectangle {
            id: switcher

            width: 52 * Theme.scale(screen)
            height: 32 * Theme.scale(screen)
            radius: width * 0.5
            color: value ? Theme.accentPrimary : Theme.surfaceVariant
            border.color: value ? Theme.accentPrimary : Theme.outline
            border.width: 2 * Theme.scale(screen)

            Rectangle {
                width: 28 * Theme.scale(screen)
                height: 28 * Theme.scale(screen)
                radius: width * 0.5
                color: Theme.surface
                border.color: Theme.outline
                border.width: 1 * Theme.scale(screen)
                y: 2* Theme.scale(screen)
                x: value ? switcher.width - width - 2 : 2

                Behavior on x {
                    NumberAnimation {
                        duration: 200
                        easing.type: Easing.OutCubic
                    }

                }

            }

            MouseArea {
                anchors.fill: parent
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    root.onToggled();
                }
            }

        }

    }

    Rectangle {
        height: 8 * Theme.scale(screen)
    }

}</file><file path="quickshell/Helpers/Fuzzysort.js">.pragma library

var single =  (search, target) =&gt; {
    if(!search || !target) return NULL

    var preparedSearch = getPreparedSearch(search)
    if(!isPrepared(target)) target = getPrepared(target)

    var searchBitflags = preparedSearch.bitflags
    if((searchBitflags &amp; target._bitflags) !== searchBitflags) return NULL

    return algorithm(preparedSearch, target)
}

var go = (search, targets, options) =&gt; {
    if(!search) return options?.all ? all(targets, options) : noResults

    var preparedSearch = getPreparedSearch(search)
    var searchBitflags = preparedSearch.bitflags
    var containsSpace  = preparedSearch.containsSpace

    var threshold = denormalizeScore( options?.threshold || 0 )
    var limit     = options?.limit || INFINITY

    var resultsLen = 0; var limitedCount = 0
    var targetsLen = targets.length

    function push_result(result) {
    if(resultsLen &lt; limit) { q.add(result); ++resultsLen }
    else {
        ++limitedCount
        if(result._score &gt; q.peek()._score) q.replaceTop(result)
    }
    }

    // This code is copy/pasted 3 times for performance reasons [options.key, options.keys, no keys]

    // options.key
    if(options?.key) {
    var key = options.key
    for(var i = 0; i &lt; targetsLen; ++i) { var obj = targets[i]
        var target = getValue(obj, key)
        if(!target) continue
        if(!isPrepared(target)) target = getPrepared(target)

        if((searchBitflags &amp; target._bitflags) !== searchBitflags) continue
        var result = algorithm(preparedSearch, target)
        if(result === NULL) continue
        if(result._score &lt; threshold) continue

        result.obj = obj
        push_result(result)
    }

    // options.keys
    } else if(options?.keys) {
    var keys = options.keys
    var keysLen = keys.length

    outer: for(var i = 0; i &lt; targetsLen; ++i) { var obj = targets[i]

        { // early out based on bitflags
        var keysBitflags = 0
        for (var keyI = 0; keyI &lt; keysLen; ++keyI) {
            var key = keys[keyI]
            var target = getValue(obj, key)
            if(!target) { tmpTargets[keyI] = noTarget; continue }
            if(!isPrepared(target)) target = getPrepared(target)
            tmpTargets[keyI] = target

            keysBitflags |= target._bitflags
        }

        if((searchBitflags &amp; keysBitflags) !== searchBitflags) continue
        }

        if(containsSpace) for(let i=0; i&lt;preparedSearch.spaceSearches.length; i++) keysSpacesBestScores[i] = NEGATIVE_INFINITY

        for (var keyI = 0; keyI &lt; keysLen; ++keyI) {
        target = tmpTargets[keyI]
        if(target === noTarget) { tmpResults[keyI] = noTarget; continue }

        tmpResults[keyI] = algorithm(preparedSearch, target, /*allowSpaces=*/false, /*allowPartialMatch=*/containsSpace)
        if(tmpResults[keyI] === NULL) { tmpResults[keyI] = noTarget; continue }

        // todo: this seems weird and wrong. like what if our first match wasn&apos;t good. this should just replace it instead of averaging with it
        // if our second match isn&apos;t good we ignore it instead of averaging with it
        if(containsSpace) for(let i=0; i&lt;preparedSearch.spaceSearches.length; i++) {
            if(allowPartialMatchScores[i] &gt; -1000) {
            if(keysSpacesBestScores[i] &gt; NEGATIVE_INFINITY) {
                var tmp = (keysSpacesBestScores[i] + allowPartialMatchScores[i]) / 4/*bonus score for having multiple matches*/
                if(tmp &gt; keysSpacesBestScores[i]) keysSpacesBestScores[i] = tmp
            }
            }
            if(allowPartialMatchScores[i] &gt; keysSpacesBestScores[i]) keysSpacesBestScores[i] = allowPartialMatchScores[i]
        }
        }

        if(containsSpace) {
        for(let i=0; i&lt;preparedSearch.spaceSearches.length; i++) { if(keysSpacesBestScores[i] === NEGATIVE_INFINITY) continue outer }
        } else {
        var hasAtLeast1Match = false
        for(let i=0; i &lt; keysLen; i++) { if(tmpResults[i]._score !== NEGATIVE_INFINITY) { hasAtLeast1Match = true; break } }
        if(!hasAtLeast1Match) continue
        }

        var objResults = new KeysResult(keysLen)
        for(let i=0; i &lt; keysLen; i++) { objResults[i] = tmpResults[i] }

        if(containsSpace) {
        var score = 0
        for(let i=0; i&lt;preparedSearch.spaceSearches.length; i++) score += keysSpacesBestScores[i]
        } else {
        // todo could rewrite this scoring to be more similar to when there&apos;s spaces
        // if we match multiple keys give us bonus points
        var score = NEGATIVE_INFINITY
        for(let i=0; i&lt;keysLen; i++) {
            var result = objResults[i]
            if(result._score &gt; -1000) {
            if(score &gt; NEGATIVE_INFINITY) {
                var tmp = (score + result._score) / 4/*bonus score for having multiple matches*/
                if(tmp &gt; score) score = tmp
            }
            }
            if(result._score &gt; score) score = result._score
        }
        }

        objResults.obj = obj
        objResults._score = score
        if(options?.scoreFn) {
        score = options.scoreFn(objResults)
        if(!score) continue
        score = denormalizeScore(score)
        objResults._score = score
        }

        if(score &lt; threshold) continue
        push_result(objResults)
    }

    // no keys
    } else {
    for(var i = 0; i &lt; targetsLen; ++i) { var target = targets[i]
        if(!target) continue
        if(!isPrepared(target)) target = getPrepared(target)

        if((searchBitflags &amp; target._bitflags) !== searchBitflags) continue
        var result = algorithm(preparedSearch, target)
        if(result === NULL) continue
        if(result._score &lt; threshold) continue

        push_result(result)
    }
    }

    if(resultsLen === 0) return noResults
    var results = new Array(resultsLen)
    for(var i = resultsLen - 1; i &gt;= 0; --i) results[i] = q.poll()
    results.total = resultsLen + limitedCount
    return results
}


// this is written as 1 function instead of 2 for minification. perf seems fine ...
// except when minified. the perf is very slow
var highlight = (result, open=&apos;&lt;b&gt;&apos;, close=&apos;&lt;/b&gt;&apos;) =&gt; {
    var callback = typeof open === &apos;function&apos; ? open : undefined

    var target      = result.target
    var targetLen   = target.length
    var indexes     = result.indexes
    var highlighted = &apos;&apos;
    var matchI      = 0
    var indexesI    = 0
    var opened      = false
    var parts       = []

    for(var i = 0; i &lt; targetLen; ++i) { var char = target[i]
    if(indexes[indexesI] === i) {
        ++indexesI
        if(!opened) { opened = true
        if(callback) {
            parts.push(highlighted); highlighted = &apos;&apos;
        } else {
            highlighted += open
        }
        }

        if(indexesI === indexes.length) {
        if(callback) {
            highlighted += char
            parts.push(callback(highlighted, matchI++)); highlighted = &apos;&apos;
            parts.push(target.substr(i+1))
        } else {
            highlighted += char + close + target.substr(i+1)
        }
        break
        }
    } else {
        if(opened) { opened = false
        if(callback) {
            parts.push(callback(highlighted, matchI++)); highlighted = &apos;&apos;
        } else {
            highlighted += close
        }
        }
    }
    highlighted += char
    }

    return callback ? parts : highlighted
}


var prepare = (target) =&gt; {
    if(typeof target === &apos;number&apos;) target = &apos;&apos;+target
    else if(typeof target !== &apos;string&apos;) target = &apos;&apos;
    var info = prepareLowerInfo(target)
    return new_result(target, {_targetLower:info._lower, _targetLowerCodes:info.lowerCodes, _bitflags:info.bitflags})
}

var cleanup = () =&gt; { preparedCache.clear(); preparedSearchCache.clear() }


// Below this point is only internal code
// Below this point is only internal code
// Below this point is only internal code
// Below this point is only internal code


class Result {
    get [&apos;indexes&apos;]() { return this._indexes.slice(0, this._indexes.len).sort((a,b)=&gt;a-b) }
    set [&apos;indexes&apos;](indexes) { return this._indexes = indexes }
    [&apos;highlight&apos;](open, close) { return highlight(this, open, close) }
    get [&apos;score&apos;]() { return normalizeScore(this._score) }
    set [&apos;score&apos;](score) { this._score = denormalizeScore(score) }
}

class KeysResult extends Array {
    get [&apos;score&apos;]() { return normalizeScore(this._score) }
    set [&apos;score&apos;](score) { this._score = denormalizeScore(score) }
}

var new_result = (target, options) =&gt; {
    const result = new Result()
    result[&apos;target&apos;]             = target
    result[&apos;obj&apos;]                = options.obj                   ?? NULL
    result._score                = options._score                ?? NEGATIVE_INFINITY
    result._indexes              = options._indexes              ?? []
    result._targetLower          = options._targetLower          ?? &apos;&apos;
    result._targetLowerCodes     = options._targetLowerCodes     ?? NULL
    result._nextBeginningIndexes = options._nextBeginningIndexes ?? NULL
    result._bitflags             = options._bitflags             ?? 0
    return result
}


var normalizeScore = score =&gt; {
    if(score === NEGATIVE_INFINITY) return 0
    if(score &gt; 1) return score
    return Math.E ** ( ((-score + 1)**.04307 - 1) * -2)
}
var denormalizeScore = normalizedScore =&gt; {
    if(normalizedScore === 0) return NEGATIVE_INFINITY
    if(normalizedScore &gt; 1) return normalizedScore
    return 1 - Math.pow((Math.log(normalizedScore) / -2 + 1), 1 / 0.04307)
}


var prepareSearch = (search) =&gt; {
    if(typeof search === &apos;number&apos;) search = &apos;&apos;+search
    else if(typeof search !== &apos;string&apos;) search = &apos;&apos;
    search = search.trim()
    var info = prepareLowerInfo(search)

    var spaceSearches = []
    if(info.containsSpace) {
    var searches = search.split(/\s+/)
    searches = [...new Set(searches)] // distinct
    for(var i=0; i&lt;searches.length; i++) {
        if(searches[i] === &apos;&apos;) continue
        var _info = prepareLowerInfo(searches[i])
        spaceSearches.push({lowerCodes:_info.lowerCodes, _lower:searches[i].toLowerCase(), containsSpace:false})
    }
    }

    return {lowerCodes: info.lowerCodes, _lower: info._lower, containsSpace: info.containsSpace, bitflags: info.bitflags, spaceSearches: spaceSearches}
}



var getPrepared = (target) =&gt; {
    if(target.length &gt; 999) return prepare(target) // don&apos;t cache huge targets
    var targetPrepared = preparedCache.get(target)
    if(targetPrepared !== undefined) return targetPrepared
    targetPrepared = prepare(target)
    preparedCache.set(target, targetPrepared)
    return targetPrepared
}
var getPreparedSearch = (search) =&gt; {
    if(search.length &gt; 999) return prepareSearch(search) // don&apos;t cache huge searches
    var searchPrepared = preparedSearchCache.get(search)
    if(searchPrepared !== undefined) return searchPrepared
    searchPrepared = prepareSearch(search)
    preparedSearchCache.set(search, searchPrepared)
    return searchPrepared
}


var all = (targets, options) =&gt; {
    var results = []; results.total = targets.length // this total can be wrong if some targets are skipped

    var limit = options?.limit || INFINITY

    if(options?.key) {
    for(var i=0;i&lt;targets.length;i++) { var obj = targets[i]
        var target = getValue(obj, options.key)
        if(target == NULL) continue
        if(!isPrepared(target)) target = getPrepared(target)
        var result = new_result(target.target, {_score: target._score, obj: obj})
        results.push(result); if(results.length &gt;= limit) return results
    }
    } else if(options?.keys) {
    for(var i=0;i&lt;targets.length;i++) { var obj = targets[i]
        var objResults = new KeysResult(options.keys.length)
        for (var keyI = options.keys.length - 1; keyI &gt;= 0; --keyI) {
        var target = getValue(obj, options.keys[keyI])
        if(!target) { objResults[keyI] = noTarget; continue }
        if(!isPrepared(target)) target = getPrepared(target)
        target._score = NEGATIVE_INFINITY
        target._indexes.len = 0
        objResults[keyI] = target
        }
        objResults.obj = obj
        objResults._score = NEGATIVE_INFINITY
        results.push(objResults); if(results.length &gt;= limit) return results
    }
    } else {
    for(var i=0;i&lt;targets.length;i++) { var target = targets[i]
        if(target == NULL) continue
        if(!isPrepared(target)) target = getPrepared(target)
        target._score = NEGATIVE_INFINITY
        target._indexes.len = 0
        results.push(target); if(results.length &gt;= limit) return results
    }
    }

    return results
}


var algorithm = (preparedSearch, prepared, allowSpaces=false, allowPartialMatch=false) =&gt; {
    if(allowSpaces===false &amp;&amp; preparedSearch.containsSpace) return algorithmSpaces(preparedSearch, prepared, allowPartialMatch)

    var searchLower      = preparedSearch._lower
    var searchLowerCodes = preparedSearch.lowerCodes
    var searchLowerCode  = searchLowerCodes[0]
    var targetLowerCodes = prepared._targetLowerCodes
    var searchLen        = searchLowerCodes.length
    var targetLen        = targetLowerCodes.length
    var searchI          = 0 // where we at
    var targetI          = 0 // where you at
    var matchesSimpleLen = 0

    // very basic fuzzy match; to remove non-matching targets ASAP!
    // walk through target. find sequential matches.
    // if all chars aren&apos;t found then exit
    for(;;) {
    var isMatch = searchLowerCode === targetLowerCodes[targetI]
    if(isMatch) {
        matchesSimple[matchesSimpleLen++] = targetI
        ++searchI; if(searchI === searchLen) break
        searchLowerCode = searchLowerCodes[searchI]
    }
    ++targetI; if(targetI &gt;= targetLen) return NULL // Failed to find searchI
    }

    var searchI = 0
    var successStrict = false
    var matchesStrictLen = 0

    var nextBeginningIndexes = prepared._nextBeginningIndexes
    if(nextBeginningIndexes === NULL) nextBeginningIndexes = prepared._nextBeginningIndexes = prepareNextBeginningIndexes(prepared.target)
    targetI = matchesSimple[0]===0 ? 0 : nextBeginningIndexes[matchesSimple[0]-1]

    // Our target string successfully matched all characters in sequence!
    // Let&apos;s try a more advanced and strict test to improve the score
    // only count it as a match if it&apos;s consecutive or a beginning character!
    var backtrackCount = 0
    if(targetI !== targetLen) for(;;) {
    if(targetI &gt;= targetLen) {
        // We failed to find a good spot for this search char, go back to the previous search char and force it forward
        if(searchI &lt;= 0) break // We failed to push chars forward for a better match

        ++backtrackCount; if(backtrackCount &gt; 200) break // exponential backtracking is taking too long, just give up and return a bad match

        --searchI
        var lastMatch = matchesStrict[--matchesStrictLen]
        targetI = nextBeginningIndexes[lastMatch]

    } else {
        var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI]
        if(isMatch) {
        matchesStrict[matchesStrictLen++] = targetI
        ++searchI; if(searchI === searchLen) { successStrict = true; break }
        ++targetI
        } else {
        targetI = nextBeginningIndexes[targetI]
        }
    }
    }

    // check if it&apos;s a substring match
    var substringIndex = searchLen &lt;= 1 ? -1 : prepared._targetLower.indexOf(searchLower, matchesSimple[0]) // perf: this is slow
    var isSubstring = !!~substringIndex
    var isSubstringBeginning = !isSubstring ? false : substringIndex===0 || prepared._nextBeginningIndexes[substringIndex-1] === substringIndex

    // if it&apos;s a substring match but not at a beginning index, let&apos;s try to find a substring starting at a beginning index for a better score
    if(isSubstring &amp;&amp; !isSubstringBeginning) {
    for(var i=0; i&lt;nextBeginningIndexes.length; i=nextBeginningIndexes[i]) {
        if(i &lt;= substringIndex) continue

        for(var s=0; s&lt;searchLen; s++) if(searchLowerCodes[s] !== prepared._targetLowerCodes[i+s]) break
        if(s === searchLen) { substringIndex = i; isSubstringBeginning = true; break }
    }
    }

    // tally up the score &amp; keep track of matches for highlighting later
    // if it&apos;s a simple match, we&apos;ll switch to a substring match if a substring exists
    // if it&apos;s a strict match, we&apos;ll switch to a substring match only if that&apos;s a better score

    var calculateScore = matches =&gt; {
    var score = 0

    var extraMatchGroupCount = 0
    for(var i = 1; i &lt; searchLen; ++i) {
        if(matches[i] - matches[i-1] !== 1) {score -= matches[i]; ++extraMatchGroupCount}
    }
    var unmatchedDistance = matches[searchLen-1] - matches[0] - (searchLen-1)

    score -= (12+unmatchedDistance) * extraMatchGroupCount // penality for more groups

    if(matches[0] !== 0) score -= matches[0]*matches[0]*.2 // penality for not starting near the beginning

    if(!successStrict) {
        score *= 1000
    } else {
        // successStrict on a target with too many beginning indexes loses points for being a bad target
        var uniqueBeginningIndexes = 1
        for(var i = nextBeginningIndexes[0]; i &lt; targetLen; i=nextBeginningIndexes[i]) ++uniqueBeginningIndexes

        if(uniqueBeginningIndexes &gt; 24) score *= (uniqueBeginningIndexes-24)*10 // quite arbitrary numbers here ...
    }

    score -= (targetLen - searchLen)/2 // penality for longer targets

    if(isSubstring)          score /= 1+searchLen*searchLen*1 // bonus for being a full substring
    if(isSubstringBeginning) score /= 1+searchLen*searchLen*1 // bonus for substring starting on a beginningIndex

    score -= (targetLen - searchLen)/2 // penality for longer targets

    return score
    }

    if(!successStrict) {
    if(isSubstring) for(var i=0; i&lt;searchLen; ++i) matchesSimple[i] = substringIndex+i // at this point it&apos;s safe to overwrite matchehsSimple with substr matches
    var matchesBest = matchesSimple
    var score = calculateScore(matchesBest)
    } else {
    if(isSubstringBeginning) {
        for(var i=0; i&lt;searchLen; ++i) matchesSimple[i] = substringIndex+i // at this point it&apos;s safe to overwrite matchehsSimple with substr matches
        var matchesBest = matchesSimple
        var score = calculateScore(matchesSimple)
    } else {
        var matchesBest = matchesStrict
        var score = calculateScore(matchesStrict)
    }
    }

    prepared._score = score

    for(var i = 0; i &lt; searchLen; ++i) prepared._indexes[i] = matchesBest[i]
    prepared._indexes.len = searchLen

    const result    = new Result()
    result.target   = prepared.target
    result._score   = prepared._score
    result._indexes = prepared._indexes
    return result
}
var algorithmSpaces = (preparedSearch, target, allowPartialMatch) =&gt; {
    var seen_indexes = new Set()
    var score = 0
    var result = NULL

    var first_seen_index_last_search = 0
    var searches = preparedSearch.spaceSearches
    var searchesLen = searches.length
    var changeslen = 0

    // Return _nextBeginningIndexes back to its normal state
    var resetNextBeginningIndexes = () =&gt; {
    for(let i=changeslen-1; i&gt;=0; i--) target._nextBeginningIndexes[nextBeginningIndexesChanges[i*2 + 0]] = nextBeginningIndexesChanges[i*2 + 1]
    }

    var hasAtLeast1Match = false
    for(var i=0; i&lt;searchesLen; ++i) {
    allowPartialMatchScores[i] = NEGATIVE_INFINITY
    var search = searches[i]

    result = algorithm(search, target)
    if(allowPartialMatch) {
        if(result === NULL) continue
        hasAtLeast1Match = true
    } else {
        if(result === NULL) {resetNextBeginningIndexes(); return NULL}
    }

    // if not the last search, we need to mutate _nextBeginningIndexes for the next search
    var isTheLastSearch = i === searchesLen - 1
    if(!isTheLastSearch) {
        var indexes = result._indexes

        var indexesIsConsecutiveSubstring = true
        for(let i=0; i&lt;indexes.len-1; i++) {
        if(indexes[i+1] - indexes[i] !== 1) {
            indexesIsConsecutiveSubstring = false; break;
        }
        }

        if(indexesIsConsecutiveSubstring) {
        var newBeginningIndex = indexes[indexes.len-1] + 1
        var toReplace = target._nextBeginningIndexes[newBeginningIndex-1]
        for(let i=newBeginningIndex-1; i&gt;=0; i--) {
            if(toReplace !== target._nextBeginningIndexes[i]) break
            target._nextBeginningIndexes[i] = newBeginningIndex
            nextBeginningIndexesChanges[changeslen*2 + 0] = i
            nextBeginningIndexesChanges[changeslen*2 + 1] = toReplace
            changeslen++
        }
        }
    }

    score += result._score / searchesLen
    allowPartialMatchScores[i] = result._score / searchesLen

    // dock points based on order otherwise &quot;c man&quot; returns Manifest.cpp instead of CheatManager.h
    if(result._indexes[0] &lt; first_seen_index_last_search) {
        score -= (first_seen_index_last_search - result._indexes[0]) * 2
    }
    first_seen_index_last_search = result._indexes[0]

    for(var j=0; j&lt;result._indexes.len; ++j) seen_indexes.add(result._indexes[j])
    }

    if(allowPartialMatch &amp;&amp; !hasAtLeast1Match) return NULL

    resetNextBeginningIndexes()

    // allows a search with spaces that&apos;s an exact substring to score well
    var allowSpacesResult = algorithm(preparedSearch, target, /*allowSpaces=*/true)
    if(allowSpacesResult !== NULL &amp;&amp; allowSpacesResult._score &gt; score) {
    if(allowPartialMatch) {
        for(var i=0; i&lt;searchesLen; ++i) {
        allowPartialMatchScores[i] = allowSpacesResult._score / searchesLen
        }
    }
    return allowSpacesResult
    }

    if(allowPartialMatch) result = target
    result._score = score

    var i = 0
    for (let index of seen_indexes) result._indexes[i++] = index
    result._indexes.len = i

    return result
}

// we use this instead of just .normalize(&apos;NFD&apos;).replace(/[\u0300-\u036f]/g, &apos;&apos;) because that screws with japanese characters
var remove_accents = (str) =&gt; str.replace(/\p{Script=Latin}+/gu, match =&gt; match.normalize(&apos;NFD&apos;)).replace(/[\u0300-\u036f]/g, &apos;&apos;)

var prepareLowerInfo = (str) =&gt; {
    str = remove_accents(str)
    var strLen = str.length
    var lower = str.toLowerCase()
    var lowerCodes = [] // new Array(strLen)    sparse array is too slow
    var bitflags = 0
    var containsSpace = false // space isn&apos;t stored in bitflags because of how searching with a space works

    for(var i = 0; i &lt; strLen; ++i) {
    var lowerCode = lowerCodes[i] = lower.charCodeAt(i)

    if(lowerCode === 32) {
        containsSpace = true
        continue // it&apos;s important that we don&apos;t set any bitflags for space
    }

    var bit = lowerCode&gt;=97&amp;&amp;lowerCode&lt;=122 ? lowerCode-97 // alphabet
            : lowerCode&gt;=48&amp;&amp;lowerCode&lt;=57  ? 26           // numbers
                                                            // 3 bits available
            : lowerCode&lt;=127                ? 30           // other ascii
            :                                 31           // other utf8
    bitflags |= 1&lt;&lt;bit
    }

    return {lowerCodes:lowerCodes, bitflags:bitflags, containsSpace:containsSpace, _lower:lower}
}
var prepareBeginningIndexes = (target) =&gt; {
    var targetLen = target.length
    var beginningIndexes = []; var beginningIndexesLen = 0
    var wasUpper = false
    var wasAlphanum = false
    for(var i = 0; i &lt; targetLen; ++i) {
    var targetCode = target.charCodeAt(i)
    var isUpper = targetCode&gt;=65&amp;&amp;targetCode&lt;=90
    var isAlphanum = isUpper || targetCode&gt;=97&amp;&amp;targetCode&lt;=122 || targetCode&gt;=48&amp;&amp;targetCode&lt;=57
    var isBeginning = isUpper &amp;&amp; !wasUpper || !wasAlphanum || !isAlphanum
    wasUpper = isUpper
    wasAlphanum = isAlphanum
    if(isBeginning) beginningIndexes[beginningIndexesLen++] = i
    }
    return beginningIndexes
}
var prepareNextBeginningIndexes = (target) =&gt; {
    target = remove_accents(target)
    var targetLen = target.length
    var beginningIndexes = prepareBeginningIndexes(target)
    var nextBeginningIndexes = [] // new Array(targetLen)     sparse array is too slow
    var lastIsBeginning = beginningIndexes[0]
    var lastIsBeginningI = 0
    for(var i = 0; i &lt; targetLen; ++i) {
    if(lastIsBeginning &gt; i) {
        nextBeginningIndexes[i] = lastIsBeginning
    } else {
        lastIsBeginning = beginningIndexes[++lastIsBeginningI]
        nextBeginningIndexes[i] = lastIsBeginning===undefined ? targetLen : lastIsBeginning
    }
    }
    return nextBeginningIndexes
}

var preparedCache       = new Map()
var preparedSearchCache = new Map()

// the theory behind these being globals is to reduce garbage collection by not making new arrays
var matchesSimple = []; var matchesStrict = []
var nextBeginningIndexesChanges = [] // allows straw berry to match strawberry well, by modifying the end of a substring to be considered a beginning index for the rest of the search
var keysSpacesBestScores = []; var allowPartialMatchScores = []
var tmpTargets = []; var tmpResults = []

// prop = &apos;key&apos;                  2.5ms optimized for this case, seems to be about as fast as direct obj[prop]
// prop = &apos;key1.key2&apos;            10ms
// prop = [&apos;key1&apos;, &apos;key2&apos;]       27ms
// prop = obj =&gt; obj.tags.join() ??ms
var getValue = (obj, prop) =&gt; {
    var tmp = obj[prop]; if(tmp !== undefined) return tmp
    if(typeof prop === &apos;function&apos;) return prop(obj) // this should run first. but that makes string props slower
    var segs = prop
    if(!Array.isArray(prop)) segs = prop.split(&apos;.&apos;)
    var len = segs.length
    var i = -1
    while (obj &amp;&amp; (++i &lt; len)) obj = obj[segs[i]]
    return obj
}

var isPrepared = (x) =&gt; { return typeof x === &apos;object&apos; &amp;&amp; typeof x._bitflags === &apos;number&apos; }
var INFINITY = Infinity; var NEGATIVE_INFINITY = -INFINITY
var noResults = []; noResults.total = 0
var NULL = null

var noTarget = prepare(&apos;&apos;)

// Hacked version of https://github.com/lemire/FastPriorityQueue.js
var fastpriorityqueue=r=&gt;{var e=[],o=0,a={},v=r=&gt;{for(var a=0,v=e[a],c=1;c&lt;o;){var s=c+1;a=c,s&lt;o&amp;&amp;e[s]._score&lt;e[c]._score&amp;&amp;(a=s),e[a-1&gt;&gt;1]=e[a],c=1+(a&lt;&lt;1)}for(var f=a-1&gt;&gt;1;a&gt;0&amp;&amp;v._score&lt;e[f]._score;f=(a=f)-1&gt;&gt;1)e[a]=e[f];e[a]=v};return a.add=(r=&gt;{var a=o;e[o++]=r;for(var v=a-1&gt;&gt;1;a&gt;0&amp;&amp;r._score&lt;e[v]._score;v=(a=v)-1&gt;&gt;1)e[a]=e[v];e[a]=r}),a.poll=(r=&gt;{if(0!==o){var a=e[0];return e[0]=e[--o],v(),a}}),a.peek=(r=&gt;{if(0!==o)return e[0]}),a.replaceTop=(r=&gt;{e[0]=r,v()}),a}
var q = fastpriorityqueue() // reuse this</file><file path="quickshell/Helpers/Holidays.js">var _countryCode = null;
var _regionCode = null;
var _regionName = null;
var _holidaysCache = {};

function getCountryCode(callback) {
    if (_countryCode) {
        callback(_countryCode);
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.open(&quot;GET&quot;, &quot;https://nominatim.openstreetmap.org/search?city=&quot;+ Settings.settings.weatherCity+&quot;&amp;country=&amp;format=json&amp;addressdetails=1&amp;extratags=1&quot;, true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === 200) {
            var response = JSON.parse(xhr.responseText);
            _countryCode = response?.[0]?.address?.country_code ?? &quot;US&quot;;
            _regionCode = response?.[0]?.address?.[&quot;ISO3166-2-lvl4&quot;] ?? &quot;&quot;;
            _regionName = response?.[0]?.address?.state ?? &quot;&quot;;
            callback(_countryCode);
        }
    }
    xhr.send();
}

function getHolidays(year, countryCode, callback) {
    var cacheKey = year + &quot;-&quot; + countryCode;
    if (_holidaysCache[cacheKey]) {
        callback(_holidaysCache[cacheKey]);
        return;
    }
    var url = &quot;https://date.nager.at/api/v3/PublicHolidays/&quot; + year + &quot;/&quot; + countryCode;
    var xhr = new XMLHttpRequest();
    xhr.open(&quot;GET&quot;, url, true);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === 200) {
            var holidays = JSON.parse(xhr.responseText);
            var augmentedHolidays = filterHolidaysByRegion(holidays);
            _holidaysCache[cacheKey] = augmentedHolidays;
            callback(augmentedHolidays);
        }
    }
    xhr.send();
}

function filterHolidaysByRegion(holidays) {
    if (!_regionCode) {
        return holidays;
    }
    const retHolidays = [];
    holidays.forEach(function(holiday) {
        if (holiday.counties?.length &gt; 0) {
            let found = false;
            holiday.counties.forEach(function(county) {
                if (county.toLowerCase() === _regionCode.toLowerCase()) {
                    found = true;
                }
            });
            if (found) {
                var regionText = &quot; (&quot; + _regionName + &quot;)&quot;;
                holiday.name = holiday.name + regionText;
                holiday.localName = holiday.localName + regionText;
                retHolidays.push(holiday);
            }
        } else {
            retHolidays.push(holiday);
        }
    });
    return retHolidays;
}

function getHolidaysForMonth(year, month, callback) {
    getCountryCode(function(countryCode) {
        getHolidays(year, countryCode, function(holidays) {
            var filtered = holidays.filter(function(h) {
                var date = new Date(h.date);
                return date.getFullYear() === year &amp;&amp; date.getMonth() === month;
            });
            callback(filtered);
        });
    });
}</file><file path="quickshell/Helpers/IdleInhibitor.qml">import Quickshell.Io

Process {
    id: idleRoot
    
    // Uses systemd-inhibit to prevent idle/sleep
    command: [&quot;systemd-inhibit&quot;, &quot;--what=idle:sleep&quot;, &quot;--who=noctalia&quot;, &quot;--why=User requested&quot;, &quot;sleep&quot;, &quot;infinity&quot;]
    
    // Track background process state
    property bool isRunning: running
    
    onStarted: {
        console.log(&quot;[IdleInhibitor] Process started - idle inhibited&quot;)
    }
    
    onExited: function(exitCode, exitStatus) {
        console.log(&quot;[IdleInhibitor] Process finished:&quot;, exitCode)
    }


    function start() {
        if (!running) {
            console.log(&quot;[IdleInhibitor] Starting idle inhibitor...&quot;)
            running = true
        }
    }
    
    function stop() {
        if (running) {
            // Force stop the process by setting running to false
            running = false
            console.log(&quot;[IdleInhibitor] Stopping idle inhibitor...&quot;)
        }
    }
    
    function toggle() {
        if (running) {
            stop()
        } else {
            start()
        }
    }
}</file><file path="quickshell/Helpers/IPCHandlers.qml">import QtQuick
import Quickshell.Io
import qs.Bar.Modules
import qs.Helpers
import qs.Widgets.LockScreen
import qs.Widgets.Notification

Item {
    id: root

    property Applauncher appLauncherPanel
    property LockScreen lockScreen
    property IdleInhibitor idleInhibitor
    property NotificationPopup notificationPopup

    IpcHandler {
        target: &quot;globalIPC&quot;

        function toggleIdleInhibitor(): void {
            root.idleInhibitor.toggle()
        }

        function toggleNotificationPopup(): void {
            console.log(&quot;[IPC] NotificationPopup toggle() called&quot;)
            // Use the global toggle function from the notification manager
            root.notificationPopup.togglePopup();
        }

        // Toggle Applauncher visibility
        function toggleLauncher(): void {
            if (!root.appLauncherPanel) {
                console.warn(&quot;AppLauncherIpcHandler: appLauncherPanel not set!&quot;);
                return;
            }
            if (root.appLauncherPanel.visible) {
                root.appLauncherPanel.hidePanel();
            } else {
                console.log(&quot;[IPC] Applauncher show() called&quot;);
                root.appLauncherPanel.showAt();
            }
        }

        // Toggle LockScreen
        function toggleLock(): void {
            if (!root.lockScreen) {
                console.warn(&quot;LockScreenIpcHandler: lockScreen not set!&quot;);
                return;
            }
            console.log(&quot;[IPC] LockScreen show() called&quot;);
            root.lockScreen.locked = true;
        }
    }
}</file><file path="quickshell/Helpers/Time.js">function formatVagueHumanReadableTime(totalSeconds) {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds - (hours * 3600)) / 60);
    const seconds = totalSeconds - (hours * 3600) - (minutes * 60);
 
    var str = &quot;&quot;;
    if (hours) {
        str += hours.toString() + &quot;h&quot;;
    }
    if (minutes) {
        str += minutes.toString() + &quot;m&quot;;
    }
    if (!hours &amp;&amp; !minutes) {
        str += seconds.toString() + &quot;s&quot;;
    }
    return str;
}</file><file path="quickshell/Helpers/Weather.js">function fetchCoordinates(city, callback, errorCallback) {
    var geoUrl = &quot;https://geocoding-api.open-meteo.com/v1/search?name=&quot; + encodeURIComponent(city) + &quot;&amp;language=en&amp;format=json&quot;;
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
                try {
                    var geoData = JSON.parse(xhr.responseText);
                    if (geoData.results &amp;&amp; geoData.results.length &gt; 0) {
                        callback(geoData.results[0].latitude, geoData.results[0].longitude);
                    } else {
                        errorCallback(&quot;City not found.&quot;);
                    }
                } catch (e) {
                    errorCallback(&quot;Failed to parse geocoding data.&quot;);
                }
            } else {
                errorCallback(&quot;Geocoding error: &quot; + xhr.status);
            }
        }
    }
    xhr.open(&quot;GET&quot;, geoUrl);
    xhr.send();
}

function fetchWeather(latitude, longitude, callback, errorCallback) {
    var url = &quot;https://api.open-meteo.com/v1/forecast?latitude=&quot; + latitude + &quot;&amp;longitude=&quot; + longitude + &quot;&amp;current_weather=true&amp;current=relativehumidity_2m,surface_pressure&amp;daily=temperature_2m_max,temperature_2m_min,weathercode&amp;timezone=auto&quot;;
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
        if (xhr.readyState === XMLHttpRequest.DONE) {
            if (xhr.status === 200) {
                try {
                    var weatherData = JSON.parse(xhr.responseText);
                    callback(weatherData);
                } catch (e) {
                    errorCallback(&quot;Failed to parse weather data.&quot;);
                }
            } else {
                errorCallback(&quot;Weather fetch error: &quot; + xhr.status);
            }
        }
    }
    xhr.open(&quot;GET&quot;, url);
    xhr.send();
}

function fetchCityWeather(city, callback, errorCallback) {
    fetchCoordinates(city, function(lat, lon) {
        fetchWeather(lat, lon, function(weatherData) {
            callback({
                city: city,
                latitude: lat,
                longitude: lon,
                weather: weatherData
            });
        }, errorCallback);
    }, errorCallback);
}</file><file path="quickshell/Services/MusicManager.qml">pragma Singleton
import QtQuick
import Quickshell
import Quickshell.Services.Mpris
import qs.Settings
import qs.Components

Singleton {
    id: manager


    property var currentPlayer: null
    property real currentPosition: 0
    property int selectedPlayerIndex: 0
    property bool isPlaying: currentPlayer ? currentPlayer.isPlaying : false
    property string trackTitle: currentPlayer ? (currentPlayer.trackTitle || &quot;Unknown Track&quot;) : &quot;&quot;
    property string trackArtist: currentPlayer ? (currentPlayer.trackArtist || &quot;Unknown Artist&quot;) : &quot;&quot;
    property string trackAlbum: currentPlayer ? (currentPlayer.trackAlbum || &quot;Unknown Album&quot;) : &quot;&quot;
    property string trackArtUrl: currentPlayer ? (currentPlayer.trackArtUrl || &quot;&quot;) : &quot;&quot;
    property real trackLength: currentPlayer ? currentPlayer.length : 0
    property bool canPlay: currentPlayer ? currentPlayer.canPlay : false
    property bool canPause: currentPlayer ? currentPlayer.canPause : false
    property bool canGoNext: currentPlayer ? currentPlayer.canGoNext : false
    property bool canGoPrevious: currentPlayer ? currentPlayer.canGoPrevious : false
    property bool canSeek: currentPlayer ? currentPlayer.canSeek : false
    property bool hasPlayer: getAvailablePlayers().length &gt; 0


    Item {
        Component.onCompleted: {
            updateCurrentPlayer()
        }
    }


    function getAvailablePlayers() {
        if (!Mpris.players || !Mpris.players.values) {
            return []
        }
        
        let allPlayers = Mpris.players.values
        let controllablePlayers = []
        
        for (let i = 0; i &lt; allPlayers.length; i++) {
            let player = allPlayers[i]
            if (player &amp;&amp; player.canControl) {
                controllablePlayers.push(player)
            }
        }
        
        return controllablePlayers
    }


    function findActivePlayer() {
        let availablePlayers = getAvailablePlayers()
        if (availablePlayers.length === 0) {
            return null
        }
        

        if (selectedPlayerIndex &lt; availablePlayers.length) {
            return availablePlayers[selectedPlayerIndex]
        } else {
            selectedPlayerIndex = 0
            return availablePlayers[0]
        }
    }


    // Switch to the most recently active player
    function updateCurrentPlayer() {
        let newPlayer = findActivePlayer()
        if (newPlayer !== currentPlayer) {
            currentPlayer = newPlayer
            currentPosition = currentPlayer ? currentPlayer.position : 0
        }
    }


    function playPause() {
        if (currentPlayer) {
            if (currentPlayer.isPlaying) {
                currentPlayer.pause()
            } else {
                currentPlayer.play()
            }
        }
    }

    function play() {
        if (currentPlayer &amp;&amp; currentPlayer.canPlay) {
            currentPlayer.play()
        }
    }

    function pause() {
        if (currentPlayer &amp;&amp; currentPlayer.canPause) {
            currentPlayer.pause()
        }
    }

    function next() {
        if (currentPlayer &amp;&amp; currentPlayer.canGoNext) {
            currentPlayer.next()
        }
    }

    function previous() {
        if (currentPlayer &amp;&amp; currentPlayer.canGoPrevious) {
            currentPlayer.previous()
        }
    }

    function seek(position) {
        if (currentPlayer &amp;&amp; currentPlayer.canSeek) {
            currentPlayer.position = position
            currentPosition = position
        }
    }

    // Seek to position based on ratio (0.0 to 1.0)
    function seekByRatio(ratio) {
        if (currentPlayer &amp;&amp; currentPlayer.canSeek &amp;&amp; currentPlayer.length &gt; 0) {
            let seekPosition = ratio * currentPlayer.length
            currentPlayer.position = seekPosition
            currentPosition = seekPosition
        }
    }

    // Update progress bar every second while playing
    Timer {
        id: positionTimer
        interval: 1000
        running: currentPlayer &amp;&amp; currentPlayer.isPlaying &amp;&amp; currentPlayer.length &gt; 0 &amp;&amp; currentPlayer.playbackState === MprisPlaybackState.Playing
        repeat: true
        onTriggered: {
            if (currentPlayer &amp;&amp; currentPlayer.isPlaying &amp;&amp; currentPlayer.playbackState === MprisPlaybackState.Playing) {
                currentPosition = currentPlayer.position
            } else {
                running = false
            }
        }
    }

    // Reset position when switching to inactive player
    onCurrentPlayerChanged: {
        if (!currentPlayer || !currentPlayer.isPlaying || currentPlayer.playbackState !== MprisPlaybackState.Playing) {
            currentPosition = 0
        }
    }

    // Update current player when available players change
    Connections {
        target: Mpris.players
        function onValuesChanged() {
            updateCurrentPlayer()
        }
    }

    Cava {
        id: cava
        count: 44
    }

    // Expose cava values
    property alias cavaValues: cava.values
}</file><file path="quickshell/Services/Network.qml">import QtQuick
import Quickshell.Io

QtObject {
    id: root

    property var networks: ({})
    property string connectingSsid: &quot;&quot;
    property string connectStatus: &quot;&quot;
    property string connectStatusSsid: &quot;&quot;
    property string connectError: &quot;&quot;
    property string detectedInterface: &quot;&quot;

    function signalIcon(signal) {
        if (signal &gt;= 80)
            return &quot;network_wifi&quot;;
        if (signal &gt;= 60)
            return &quot;network_wifi_3_bar&quot;;
        if (signal &gt;= 40)
            return &quot;network_wifi_2_bar&quot;;
        if (signal &gt;= 20)
            return &quot;network_wifi_1_bar&quot;;
        return &quot;wifi_0_bar&quot;;
    }

    function isSecured(security) {
        return security &amp;&amp; security.trim() !== &quot;&quot; &amp;&amp; security.trim() !== &quot;--&quot;;
    }

    function refreshNetworks() {
        existingNetwork.running = true;
    }

    function connectNetwork(ssid, security) {
        pendingConnect = {
            ssid: ssid,
            security: security,
            password: &quot;&quot;
        };
        doConnect();
    }

    function submitPassword(ssid, password) {
        pendingConnect = {
            ssid: ssid,
            security: networks[ssid].security,
            password: password
        };
        doConnect();
    }

    function disconnectNetwork(ssid) {
        disconnectProfileProcess.connectionName = ssid;
        disconnectProfileProcess.running = true;
    }

    property var pendingConnect: null

    function doConnect() {
        const params = pendingConnect;
        if (!params)
            return;

        connectingSsid = params.ssid;
        connectStatus = &quot;&quot;;
        connectStatusSsid = params.ssid;


        const targetNetwork = networks[params.ssid];

        if (targetNetwork &amp;&amp; targetNetwork.existing) {
            upConnectionProcess.profileName = params.ssid;
            upConnectionProcess.running = true;
            pendingConnect = null;
            return;
        }


        if (params.security &amp;&amp; params.security !== &quot;--&quot;) {
            getInterfaceProcess.running = true;
            return;
        }
        connectProcess.security = params.security;
        connectProcess.ssid = params.ssid;
        connectProcess.password = params.password;
        connectProcess.running = true;
        pendingConnect = null;
    }

    property int refreshInterval: 25000

    // Only refresh when we have an active connection
    property bool hasActiveConnection: {
        for (const net in networks) {
            if (networks[net].connected) {
                return true;
            }
        }
        return false;
    }

    property Timer refreshTimer: Timer {
        interval: root.refreshInterval
        // Only run timer when we&apos;re connected to a network
        running: root.hasActiveConnection
        repeat: true
        onTriggered: root.refreshNetworks()
    }

    // Force a refresh when menu is opened
    function onMenuOpened() {
        refreshNetworks();
    }

    function onMenuClosed() {
        // No need to do anything special on close
    }

    property Process disconnectProfileProcess: Process {
        id: disconnectProfileProcess
        property string connectionName: &quot;&quot;
        running: false
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;down&quot;, connectionName]
        onRunningChanged: {
            if (!running) {
                root.refreshNetworks();
            }
        }
    }

    property Process existingNetwork: Process {
        id: existingNetwork
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;NAME,TYPE&quot;, &quot;connection&quot;, &quot;show&quot;]
        stdout: StdioCollector {
            onStreamFinished: {
                const lines = text.split(&quot;\n&quot;);
                const networksMap = {};

                for (let i = 0; i &lt; lines.length; ++i) {
                    const line = lines[i].trim();
                    if (!line)
                        continue;

                    const parts = line.split(&quot;:&quot;);
                    if (parts.length &lt; 2) {
                        console.warn(&quot;Malformed nmcli output line:&quot;, line);
                        continue;
                    }

                    const ssid = parts[0];
                    const type = parts[1];

                    if (ssid) {
                        networksMap[ssid] = {
                            ssid: ssid,
                            type: type
                        };
                    }
                }
                scanProcess.existingNetwork = networksMap;
                scanProcess.running = true;
            }
        }
    }

    property Process scanProcess: Process {
        id: scanProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;SSID,SECURITY,SIGNAL,IN-USE&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;list&quot;]

        property var existingNetwork

        stdout: StdioCollector {
            onStreamFinished: {
                const lines = text.split(&quot;\n&quot;);
                const networksMap = {};

                for (let i = 0; i &lt; lines.length; ++i) {
                    const line = lines[i].trim();
                    if (!line)
                        continue;

                    const parts = line.split(&quot;:&quot;);
                    if (parts.length &lt; 4) {
                        console.warn(&quot;Malformed nmcli output line:&quot;, line);
                        continue;
                    }
                    const ssid = parts[0];
                    const security = parts[1];
                    const signal = parseInt(parts[2]);
                    const inUse = parts[3] === &quot;*&quot;;

                    if (ssid) {
                        if (!networksMap[ssid]) {
                            networksMap[ssid] = {
                                ssid: ssid,
                                security: security,
                                signal: signal,
                                connected: inUse,
                                existing: ssid in scanProcess.existingNetwork
                            };
                        } else {
                            const existingNet = networksMap[ssid];
                            if (inUse) {
                                existingNet.connected = true;
                            }
                            if (signal &gt; existingNet.signal) {
                                existingNet.signal = signal;
                                existingNet.security = security;
                            }
                        }
                    }
                }

                root.networks = networksMap;
                scanProcess.existingNetwork = {};
            }
        }
    }

    property Process connectProcess: Process {
        id: connectProcess
        property string ssid: &quot;&quot;
        property string password: &quot;&quot;
        property string security: &quot;&quot;
        running: false
        command: {
            if (password) {
                return [&quot;nmcli&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;connect&quot;, `&apos;${ssid}&apos;`, &quot;password&quot;, password];
            } else {
                return [&quot;nmcli&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;connect&quot;, `&apos;${ssid}&apos;`];
            }
        }
        stdout: StdioCollector {
            onStreamFinished: {
                root.connectingSsid = &quot;&quot;;
                root.connectStatus = &quot;success&quot;;
                root.connectStatusSsid = connectProcess.ssid;
                root.connectError = &quot;&quot;;
                root.refreshNetworks();
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                root.connectingSsid = &quot;&quot;;
                root.connectStatus = &quot;error&quot;;
                root.connectStatusSsid = connectProcess.ssid;
                root.connectError = text;
            }
        }
    }

    property Process getInterfaceProcess: Process {
        id: getInterfaceProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;DEVICE,TYPE,STATE&quot;, &quot;device&quot;]
        stdout: StdioCollector {
            onStreamFinished: {
                var lines = text.split(&quot;\n&quot;);
                for (var i = 0; i &lt; lines.length; ++i) {
                    var parts = lines[i].split(&quot;:&quot;);
                    if (parts[1] === &quot;wifi&quot; &amp;&amp; parts[2] !== &quot;unavailable&quot;) {
                        root.detectedInterface = parts[0];
                        break;
                    }
                }
                if (root.detectedInterface) {
                    var params = root.pendingConnect;
                    addConnectionProcess.ifname = root.detectedInterface;
                    addConnectionProcess.ssid = params.ssid;
                    addConnectionProcess.password = params.password;
                    addConnectionProcess.profileName = params.ssid;
                    addConnectionProcess.security = params.security;
                    addConnectionProcess.running = true;
                } else {
                    root.connectStatus = &quot;error&quot;;
                    root.connectStatusSsid = root.pendingConnect.ssid;
                    root.connectError = &quot;No Wi-Fi interface found.&quot;;
                    root.connectingSsid = &quot;&quot;;
                    root.pendingConnect = null;
                }
            }
        }
    }

    property Process addConnectionProcess: Process {
        id: addConnectionProcess
        property string ifname: &quot;&quot;
        property string ssid: &quot;&quot;
        property string password: &quot;&quot;
        property string profileName: &quot;&quot;
        property string security: &quot;&quot;
        running: false
        command: {
            var cmd = [&quot;nmcli&quot;, &quot;connection&quot;, &quot;add&quot;, &quot;type&quot;, &quot;wifi&quot;, &quot;ifname&quot;, ifname, &quot;con-name&quot;, profileName, &quot;ssid&quot;, ssid];
            if (security &amp;&amp; security !== &quot;--&quot;) {
                cmd.push(&quot;wifi-sec.key-mgmt&quot;);
                cmd.push(&quot;wpa-psk&quot;);
                cmd.push(&quot;wifi-sec.psk&quot;);
                cmd.push(password);
            }
            return cmd;
        }
        stdout: StdioCollector {
            onStreamFinished: {
                upConnectionProcess.profileName = addConnectionProcess.profileName;
                upConnectionProcess.running = true;
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                upConnectionProcess.profileName = addConnectionProcess.profileName;
                upConnectionProcess.running = true;
            }
        }
    }

    property Process upConnectionProcess: Process {
        id: upConnectionProcess
        property string profileName: &quot;&quot;
        running: false
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;up&quot;, &quot;id&quot;, profileName]
        stdout: StdioCollector {
            onStreamFinished: {
                root.connectingSsid = &quot;&quot;;
                root.connectStatus = &quot;success&quot;;
                root.connectStatusSsid = root.pendingConnect ? root.pendingConnect.ssid : &quot;&quot;;
                root.connectError = &quot;&quot;;
                root.pendingConnect = null;
                root.refreshNetworks();
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                root.connectingSsid = &quot;&quot;;
                root.connectStatus = &quot;error&quot;;
                root.connectStatusSsid = root.pendingConnect ? root.pendingConnect.ssid : &quot;&quot;;
                root.connectError = text;
                root.pendingConnect = null;
            }
        }
    }

    Component.onCompleted: {
        refreshNetworks();
    }
}</file><file path="quickshell/Services/Niri.qml">pragma Singleton
pragma ComponentBehavior: Bound

import QtQuick
import Quickshell
import Quickshell.Io

Singleton {
    id: root

    property var workspaces: []
    property var windows: []
    property int focusedWindowIndex: -1
    property bool inOverview: false
    property string focusedWindowTitle: &quot;(No active window)&quot;

    function updateFocusedWindowTitle() {
        if (focusedWindowIndex &gt;= 0 &amp;&amp; focusedWindowIndex &lt; windows.length) {
            focusedWindowTitle = windows[focusedWindowIndex].title || &quot;(Unnamed window)&quot;;
        } else {
            focusedWindowTitle = &quot;(No active window)&quot;;
        }
    }
    
    onWindowsChanged: updateFocusedWindowTitle()
    onFocusedWindowIndexChanged: updateFocusedWindowTitle()
    
    Component.onCompleted: {
        eventStream.running = true;
    }

    Process {
        id: workspaceProcess
        running: false
        command: [&quot;niri&quot;, &quot;msg&quot;, &quot;--json&quot;, &quot;workspaces&quot;]
        
        stdout: SplitParser {
            onRead: function(line) {
                try {
                    const workspacesData = JSON.parse(line);
                    const workspacesList = [];
                    
                    for (const ws of workspacesData) {
                        workspacesList.push({
                            id: ws.id,
                            idx: ws.idx,
                            name: ws.name || &quot;&quot;,
                            output: ws.output || &quot;&quot;,
                            isFocused: ws.is_focused === true,
                            isActive: ws.is_active === true,
                            isUrgent: ws.is_urgent === true,
                            isOccupied: ws.active_window_id ? true : false
                        });
                    }

                    workspacesList.sort((a, b) =&gt; {
                        if (a.output !== b.output) {
                            return a.output.localeCompare(b.output);
                        }
                        return a.id - b.id;
                    });
                    
                    root.workspaces = workspacesList;
                } catch (e) {
                    console.error(&quot;Failed to parse workspaces:&quot;, e, line);
                }
            }
        }
    }
    
    Process {
        id: eventStream        
        running: false
        command: [&quot;niri&quot;, &quot;msg&quot;, &quot;--json&quot;, &quot;event-stream&quot;]

        stdout: SplitParser {
            onRead: data =&gt; {
                try {
                    const event = JSON.parse(data.trim());

                    if (event.WorkspacesChanged) {
                        workspaceProcess.running = true;
                    } else if (event.WindowsChanged) {
                        try {
                            const windowsData = event.WindowsChanged.windows;
                            const windowsList = [];
                            for (const win of windowsData) {
                                windowsList.push({
                                    id: win.id,
                                    title: win.title || &quot;&quot;,
                                    appId: win.app_id || &quot;&quot;,
                                    workspaceId: win.workspace_id || null,
                                    isFocused: win.is_focused === true
                                });
                            }
                            
                            windowsList.sort((a, b) =&gt; a.id - b.id);
                            root.windows = windowsList;
                            for (let i = 0; i &lt; windowsList.length; i++) {
                                if (windowsList[i].isFocused) {
                                    root.focusedWindowIndex = i;
                                    break;
                                }
                            }
                        } catch (e) {
                            console.error(&quot;Error parsing windows event:&quot;, e);
                        }
                    } else if (event.WorkspaceActivated) {
                        workspaceProcess.running = true;
                    } else if (event.WindowFocusChanged) {
                        try {
                            const focusedId = event.WindowFocusChanged.id;
                            if (focusedId) {
                                root.focusedWindowIndex = root.windows.findIndex(w =&gt; w.id === focusedId);
                                if (root.focusedWindowIndex &lt; 0) {
                                    root.focusedWindowIndex = 0;
                                }
                            } else {
                                root.focusedWindowIndex = -1;
                            }
                        } catch (e) {
                            console.error(&quot;Error parsing window focus event:&quot;, e);
                        }
                    } else if (event.OverviewOpenedOrClosed) {
                        try {
                            root.inOverview = event.OverviewOpenedOrClosed.is_open === true;
                        } catch (e) {
                            console.error(&quot;Error parsing overview state:&quot;, e);
                        }
                    }
                } catch (e) {
                    console.error(&quot;Error parsing event stream:&quot;, e, data);
                }
            }
        }
    }
}</file><file path="quickshell/Services/Sysinfo.qml">pragma Singleton
import QtQuick
import Qt.labs.folderlistmodel
import Quickshell
import Quickshell.Io
import qs.Settings

Singleton {
    id: manager

    property string updateInterval: &quot;2s&quot;
    property string cpuUsageStr: &quot;&quot;
    property string cpuTempStr: &quot;&quot;
    property string memoryUsageStr: &quot;&quot;
    property string memoryUsagePerStr: &quot;&quot;
    property real cpuUsage: 0
    property real memoryUsage: 0
    property real cpuTemp: 0
    property real diskUsage: 0
    property real memoryUsagePer: 0
    property string diskUsageStr: &quot;&quot;

    Process {
        id: zigstatProcess
        running: true
        command: [Quickshell.shellDir + &quot;/Programs/zigstat&quot;, updateInterval]
        stdout: SplitParser {
            onRead: function (line) {
                try {
                    const data = JSON.parse(line);
                    cpuUsage = +data.cpu;
                    cpuTemp = +data.cputemp;
                    memoryUsage = +data.mem;
                    memoryUsagePer = +data.memper;
                    diskUsage = +data.diskper;
                    cpuUsageStr = data.cpu + &quot;%&quot;;
                    cpuTempStr = data.cputemp + &quot;°C&quot;;
                    memoryUsageStr = data.mem + &quot;G&quot;;
                    memoryUsagePerStr = data.memper + &quot;%&quot;;
                    diskUsageStr = data.diskper + &quot;%&quot;;
                } catch (e) {
                    console.error(&quot;Failed to parse zigstat output:&quot;, e);
                }
            }
        }
    }
}</file><file path="quickshell/Services/WallpaperManager.qml">pragma Singleton
import QtQuick
import Qt.labs.folderlistmodel
import Quickshell
import Quickshell.Io
import qs.Settings

Singleton {
    id: manager

    Item {
        Component.onCompleted: {
            loadWallpapers();
            setCurrentWallpaper(currentWallpaper, true);
            toggleRandomWallpaper();
        }
    }

    property var wallpaperList: []
    property string currentWallpaper: Settings.settings.currentWallpaper
    property bool scanning: false
    property string transitionType: Settings.settings.transitionType
    property var randomChoices: [&quot;fade&quot;, &quot;left&quot;, &quot;right&quot;, &quot;top&quot;, &quot;bottom&quot;, &quot;wipe&quot;, &quot;wave&quot;, &quot;grow&quot;, &quot;center&quot;, &quot;any&quot;, &quot;outer&quot;]

    function loadWallpapers() {
        scanning = true;
        wallpaperList = [];
        folderModel.folder = &quot;&quot;;
        folderModel.folder = &quot;file://&quot; + (Settings.settings.wallpaperFolder !== undefined ? Settings.settings.wallpaperFolder : &quot;&quot;);
    }

    function changeWallpaper(path) {
        setCurrentWallpaper(path);
    }

    function setCurrentWallpaper(path, isInitial) {
        currentWallpaper = path;
        if (!isInitial) {
            Settings.settings.currentWallpaper = path;
        }
        if (Settings.settings.useSWWW) {
            if (Settings.settings.transitionType === &quot;random&quot;) {
                transitionType = randomChoices[Math.floor(Math.random() * randomChoices.length)];
            } else {
                transitionType = Settings.settings.transitionType;
            }
            changeWallpaperProcess.running = true;
        }

        if (randomWallpaperTimer.running) {
            randomWallpaperTimer.restart();
        }

        generateTheme();
    }

    function setRandomWallpaper() {
        var randomIndex = Math.floor(Math.random() * wallpaperList.length);
        var randomPath = wallpaperList[randomIndex];
        if (!randomPath) {
            return;
        }
        setCurrentWallpaper(randomPath);
    }

    function toggleRandomWallpaper() {
        if (Settings.settings.randomWallpaper &amp;&amp; !randomWallpaperTimer.running) {
            randomWallpaperTimer.start();
            setRandomWallpaper();
        } else if (!Settings.settings.randomWallpaper &amp;&amp; randomWallpaperTimer.running) {
            randomWallpaperTimer.stop();
        }
    }
    
    function restartRandomWallpaperTimer() {
        if (Settings.settings.randomWallpaper) {
            randomWallpaperTimer.stop();
            randomWallpaperTimer.start();
        }
    }

    function generateTheme() {
        if (Settings.settings.useWallpaperTheme) {
            generateThemeProcess.running = true;
        }
    }

    Timer {
        id: randomWallpaperTimer
        interval: Settings.settings.wallpaperInterval * 1000
        running: false
        repeat: true
        onTriggered: setRandomWallpaper()
        triggeredOnStart: false
    }

    FolderListModel {
        id: folderModel
        // Swww supports many images format but Quickshell only support a subset of those.
        nameFilters: [&quot;*.jpg&quot;, &quot;*.jpeg&quot;, &quot;*.png&quot;, &quot;*.gif&quot;, &quot;*.pnm&quot;, &quot;*.bmp&quot;]
        showDirs: false
        sortField: FolderListModel.Name
        onStatusChanged: {
            if (status === FolderListModel.Ready) {
                var files = [];
                var filesSwww = [];
                for (var i = 0; i &lt; count; i++) {
                    var filepath = (Settings.settings.wallpaperFolder !== undefined ? Settings.settings.wallpaperFolder : &quot;&quot;) + &quot;/&quot; + get(i, &quot;fileName&quot;);
                    files.push(filepath);
                }
                wallpaperList = files;
                scanning = false;
            }
        }
    }

    Process {
        id: changeWallpaperProcess
        command: [&quot;swww&quot;, &quot;img&quot;, &quot;--resize&quot;, Settings.settings.wallpaperResize, &quot;--transition-fps&quot;, Settings.settings.transitionFps.toString(), &quot;--transition-type&quot;, transitionType, &quot;--transition-duration&quot;, Settings.settings.transitionDuration.toString(), currentWallpaper]
        running: false
    }
    
    Process {
        id: generateThemeProcess
        command: [&quot;wallust&quot;, &quot;run&quot;, currentWallpaper, &quot;-u&quot;, &quot;-k&quot;, &quot;-d&quot;, &quot;Templates&quot;]
        workingDirectory: Quickshell.shellDir
        running: false
    }
}</file><file path="quickshell/Services/WorkspaceManager.qml">pragma Singleton
pragma ComponentBehavior: Bound

import QtQuick
import Quickshell
import Quickshell.Io
import Quickshell.Hyprland
import qs.Services

Singleton {
    id: root

    property ListModel workspaces: ListModel {}
    property bool isHyprland: false
    property bool isNiri: false
    property var hlWorkspaces: Hyprland.workspaces.values
    // Detect which compositor we&apos;re using
    Component.onCompleted: {
        console.log(&quot;WorkspaceManager initializing...&quot;);
        detectCompositor();
    }

    function detectCompositor() {
        try {
            try {
                if (Hyprland.eventSocketPath) {
                    console.log(&quot;Detected Hyprland compositor&quot;);
                    isHyprland = true;
                    isNiri = false;
                    initHyprland();
                    return;
                }
            } catch (e) {
                console.log(&quot;Hyprland not available:&quot;, e);
            }
            
            if (typeof Niri !== &quot;undefined&quot;) {
                console.log(&quot;Detected Niri service&quot;);
                isHyprland = false;
                isNiri = true;
                initNiri();
                return;
            }
            
            console.log(&quot;No supported compositor detected&quot;);
        } catch (e) {
            console.error(&quot;Error detecting compositor:&quot;, e);
        }
    }

    // Initialize Hyprland integration
    function initHyprland() {
        try {
            // Fixes the odd workspace issue.
            Hyprland.refreshWorkspaces();
            // hlWorkspaces = Hyprland.workspaces.values;
            // updateHyprlandWorkspaces();
            return true;
        } catch (e) {
            console.error(&quot;Error initializing Hyprland:&quot;, e);
            isHyprland = false;
            return false;
        }
    }

    onHlWorkspacesChanged: {
        updateHyprlandWorkspaces();
    }

    Connections {
        target: Hyprland.workspaces
        function onValuesChanged() {
            updateHyprlandWorkspaces();
        }
    }

    Connections {
        target: Hyprland
        function onRawEvent(event) {
            updateHyprlandWorkspaces();
        }
    }

    function updateHyprlandWorkspaces() {
        workspaces.clear();
        try {            
            for (let i = 0; i &lt; hlWorkspaces.length; i++) {
                const ws = hlWorkspaces[i];
                workspaces.append({
                    id: i,
                    idx: ws.id,
                    name: ws.name || &quot;&quot;,
                    output: ws.monitor?.name || &quot;&quot;,
                    isActive: ws.active === true,
                    isFocused: ws.focused === true,
                    isUrgent: ws.urgent === true
                });
            }
            workspacesChanged();
        } catch (e) {
            console.error(&quot;Error updating Hyprland workspaces:&quot;, e);
        }
    }

    function initNiri() {
        updateNiriWorkspaces();
    }

    Connections {
        target: Niri
        function onWorkspacesChanged() { 
            updateNiriWorkspaces();
        }
    }

    function updateNiriWorkspaces() {
        const niriWorkspaces = Niri.workspaces || [];
        workspaces.clear();
        for (let i = 0; i &lt; niriWorkspaces.length; i++) {
            const ws = niriWorkspaces[i];
            workspaces.append({
                id: ws.id,
                idx: ws.idx || 1,
                name: ws.name || &quot;&quot;,
                output: ws.output || &quot;&quot;,
                isFocused: ws.isFocused === true,
                isActive: ws.isActive === true,
                isUrgent: ws.isUrgent === true,
                isOccupied: ws.isOccupied === true,
            });
        }
        
        workspacesChanged();
    }

    function switchToWorkspace(workspaceId) {    
        if (isHyprland) {
            try {
                Hyprland.dispatch(`workspace ${workspaceId}`);
            } catch (e) {
                console.error(&quot;Error switching Hyprland workspace:&quot;, e);
            }
        } else if (isNiri) {
            try {
                Quickshell.execDetached([&quot;niri&quot;, &quot;msg&quot;, &quot;action&quot;, &quot;focus-workspace&quot;, workspaceId.toString()]);
            } catch (e) {
                console.error(&quot;Error switching Niri workspace:&quot;, e);
            }
        } else {
            console.warn(&quot;No supported compositor detected for workspace switching&quot;);
        }
    }
}</file><file path="quickshell/Settings/Settings.qml">pragma Singleton
import QtQuick
import Quickshell
import Quickshell.Io
import qs.Services

Singleton {

    property string shellName: &quot;Noctalia&quot;
    property string settingsDir: Quickshell.env(&quot;NOCTALIA_SETTINGS_DIR&quot;) || (Quickshell.env(&quot;XDG_CONFIG_HOME&quot;) || Quickshell.env(&quot;HOME&quot;) + &quot;/.config&quot;) + &quot;/&quot; + shellName + &quot;/&quot;
    property string settingsFile: Quickshell.env(&quot;NOCTALIA_SETTINGS_FILE&quot;) || (settingsDir + &quot;Settings.json&quot;)
    property string themeFile: Quickshell.env(&quot;NOCTALIA_THEME_FILE&quot;) || (settingsDir + &quot;Theme.json&quot;)
    property var settings: settingAdapter

    Item {
        Component.onCompleted: {
            // ensure settings dir
            Quickshell.execDetached([&quot;mkdir&quot;, &quot;-p&quot;, settingsDir]);
        }
    }

    FileView {
        id: settingFileView
        path: settingsFile
        watchChanges: true
        onFileChanged: reload()
        onAdapterUpdated: writeAdapter()
        Component.onCompleted: function() {
            reload()
        }
        onLoaded: function() {
            console.log(&quot;--- Settings loaded ---&quot;);
            Qt.callLater(function () {
                WallpaperManager.setCurrentWallpaper(settings.currentWallpaper, true);
            })
        }
        onLoadFailed: function(error) {
            settingAdapter = {}
            writeAdapter()
        }
        JsonAdapter {
            id: settingAdapter
            property string weatherCity: &quot;Dinslaken&quot;
            property string profileImage: Quickshell.env(&quot;HOME&quot;) + &quot;/.face&quot;
            property bool useFahrenheit: false
            property string wallpaperFolder: &quot;/usr/share/wallpapers&quot;
            property string currentWallpaper: &quot;&quot;
            property string videoPath: &quot;~/Videos/&quot;
            property bool showActiveWindow: true
            property bool showActiveWindowIcon: false
            property bool showSystemInfoInBar: false
            property bool showCorners: false
            property bool showTaskbar: true
            property bool showMediaInBar: false
            property bool useSWWW: false
            property bool randomWallpaper: false
            property bool useWallpaperTheme: false
            property int wallpaperInterval: 300
            property string wallpaperResize: &quot;crop&quot;
            property int transitionFps: 60
            property string transitionType: &quot;random&quot;
            property real transitionDuration: 1.1
            property string visualizerType: &quot;radial&quot;
            property bool reverseDayMonth: false
            property bool use12HourClock: false
            property bool dimPanels: true
            property real fontSizeMultiplier: 1.0  // Font size multiplier (1.0 = normal, 1.2 = 20% larger, 0.8 = 20% smaller)
            property int taskbarIconSize: 24  // Taskbar icon button size in pixels (default: 32, smaller: 24, larger: 40)
            property var pinnedExecs: [] // Added for AppLauncher pinned apps

            property bool showDock: true
            property bool dockExclusive: false
            property bool wifiEnabled: false
            property bool bluetoothEnabled: false
            property int recordingFrameRate: 60
            property string recordingQuality: &quot;very_high&quot;
            property string recordingCodec: &quot;h264&quot;
            property string audioCodec: &quot;opus&quot;
            property bool showCursor: true
            property string colorRange: &quot;limited&quot;
            
            // Monitor/Display Settings
            property var barMonitors: [] // Array of monitor names to show the bar on
            property var dockMonitors: [] // Array of monitor names to show the dock on
            property var notificationMonitors: [] // Array of monitor names to show notifications on, &quot;*&quot; means all monitors
            property var monitorScaleOverrides: {} // Map of monitor name -&gt; scale override (e.g., 0.8..2.0). When set, Theme.scale() returns this value
        }
    }

    Connections {
        target: settingAdapter
        function onRandomWallpaperChanged() { WallpaperManager.toggleRandomWallpaper() }
        function onWallpaperIntervalChanged() { WallpaperManager.restartRandomWallpaperTimer() }
        function onWallpaperFolderChanged() { WallpaperManager.loadWallpapers() }
        function onNotificationMonitorsChanged() { 
        }
    }
}</file><file path="quickshell/Settings/Theme.json">{
  &quot;backgroundPrimary&quot;: &quot;#0E0F10&quot;,
  &quot;backgroundSecondary&quot;: &quot;#1A1B1C&quot;,
  &quot;backgroundTertiary&quot;: &quot;#262728&quot;,
  
  &quot;surface&quot;: &quot;#212223&quot;,
  &quot;surfaceVariant&quot;: &quot;#323334&quot;,
  
  &quot;textPrimary&quot;: &quot;#F0F1E0&quot;,
  &quot;textSecondary&quot;: &quot;#D8D9CA&quot;,
  &quot;textDisabled&quot;: &quot;#909186&quot;,
  
  &quot;accentPrimary&quot;: &quot;#A3A485&quot;,
  &quot;accentSecondary&quot;: &quot;#B5B69D&quot;,
  &quot;accentTertiary&quot;: &quot;#82836A&quot;,
  
  &quot;error&quot;: &quot;#A5A9ED&quot;,
  &quot;warning&quot;: &quot;#B9BCF1&quot;,
  
  &quot;highlight&quot;: &quot;#C8C8B6&quot;,
  &quot;rippleEffect&quot;: &quot;#ACAD91&quot;,
  
  &quot;onAccent&quot;: &quot;#0E0F10&quot;,
  &quot;outline&quot;: &quot;#565758&quot;,
  
  &quot;shadow&quot;: &quot;#0E0F10&quot;,
  &quot;overlay&quot;: &quot;#0E0F10&quot;
}</file><file path="quickshell/Settings/Theme.qml">// Theme.qml
pragma Singleton
import QtQuick
import Quickshell
import Quickshell.Io
import qs.Settings

Singleton {
    id: root

    // Automatic scaling based on screen width
    function scale(currentScreen) {
        // Per-monitor override from settings
        try {
            const overrides = Settings.settings.monitorScaleOverrides || {};
            if (currentScreen &amp;&amp; currentScreen.name &amp;&amp; overrides.hasOwnProperty(currentScreen.name)) {
                return overrides[currentScreen.name];
            }
        } catch (e) {
            // ignore
        }
        console.log(&quot;Oh no, returning default scale for: &quot; + currentScreen.name);
        return 1.0;
    }

    function applyOpacity(color, opacity) {
        return color.replace(&quot;#&quot;, &quot;#&quot; + opacity);
    }
    
    // FileView to load theme data from JSON file
    FileView {
        id: themeFile
        path: Settings.themeFile
        watchChanges: true
        onFileChanged: reload()
        onAdapterUpdated: writeAdapter()
        onLoadFailed: function(error) {
            if (error.toString().includes(&quot;No such file&quot;) || error === 2) {
                // File doesn&apos;t exist, create it with default values
                writeAdapter()
            }
        }
        JsonAdapter {
            id: themeData
            
            // Backgrounds
            property string backgroundPrimary: &quot;#0C0D11&quot;
            property string backgroundSecondary: &quot;#151720&quot;
            property string backgroundTertiary: &quot;#1D202B&quot;
            
            // Surfaces &amp; Elevation
            property string surface: &quot;#1A1C26&quot;
            property string surfaceVariant: &quot;#2A2D3A&quot;
            
            // Text Colors
            property string textPrimary: &quot;#CACEE2&quot;
            property string textSecondary: &quot;#B7BBD0&quot;
            property string textDisabled: &quot;#6B718A&quot;
            
            // Accent Colors
            property string accentPrimary: &quot;#A8AEFF&quot;
            property string accentSecondary: &quot;#9EA0FF&quot;
            property string accentTertiary: &quot;#8EABFF&quot;
            
            // Error/Warning
            property string error: &quot;#FF6B81&quot;
            property string warning: &quot;#FFBB66&quot;
            
            // Highlights &amp; Focus
            property string highlight: &quot;#E3C2FF&quot;
            property string rippleEffect: &quot;#F3DEFF&quot;
            
            // Additional Theme Properties
            property string onAccent: &quot;#1A1A1A&quot;
            property string outline: &quot;#44485A&quot;
            
            // Shadows &amp; Overlays
            property string shadow: &quot;#000000&quot;
            property string overlay: &quot;#11121A&quot;
        }
    }
    
    // Backgrounds
    property color backgroundPrimary: themeData.backgroundPrimary
    property color backgroundSecondary: themeData.backgroundSecondary
    property color backgroundTertiary: themeData.backgroundTertiary

    // Surfaces &amp; Elevation
    property color surface: themeData.surface
    property color surfaceVariant: themeData.surfaceVariant

    // Text Colors
    property color textPrimary: themeData.textPrimary
    property color textSecondary: themeData.textSecondary
    property color textDisabled: themeData.textDisabled

    // Accent Colors
    property color accentPrimary: themeData.accentPrimary
    property color accentSecondary: themeData.accentSecondary
    property color accentTertiary: themeData.accentTertiary

    // Error/Warning
    property color error: themeData.error
    property color warning: themeData.warning

    // Highlights &amp; Focus
    property color highlight: themeData.highlight
    property color rippleEffect: themeData.rippleEffect

    // Additional Theme Properties
    property color onAccent: themeData.onAccent
    property color outline: themeData.outline

    // Shadows &amp; Overlays
    property color shadow: applyOpacity(themeData.shadow, &quot;B3&quot;)
    property color overlay: applyOpacity(themeData.overlay, &quot;66&quot;)

    // Font Properties
    property string fontFamily: &quot;Roboto&quot;         // Family for all text
    
    // Font size multiplier - adjust this in Settings.json to scale all fonts
    property real fontSizeMultiplier: Settings.settings.fontSizeMultiplier || 1.0
    
    // Base font sizes (multiplied by fontSizeMultiplier)
    property int fontSizeHeader: Math.round(32 * fontSizeMultiplier)     // Headers and titles
    property int fontSizeBody: Math.round(16 * fontSizeMultiplier)       // Body text and general content
    property int fontSizeSmall: Math.round(14 * fontSizeMultiplier)      // Small text like clock, labels
    property int fontSizeCaption: Math.round(12 * fontSizeMultiplier)    // Captions and fine print
}</file><file path="quickshell/Templates/templates/kitty.conf"># The kitty terminal template for wallust
# Add to wallust config: kitty = { src=&apos;kitty.conf&apos;, dst=&apos;~/.config/kitty/colors.conf&apos;}
# And add to kitty config: include colors.conf

cursor {{ cursor }}

background {{ background }}
foreground {{ foreground }}

color0 {{ color0 }}
color1 {{ color1 }}
color2 {{ color2 }}
color3 {{ color3 }}
color4 {{ color4 }}
color5 {{ color5 }}
color6 {{ color6 }}
color7 {{ color7 }}
color8 {{ color8 }}
color9 {{ color9 }}
color10 {{ color10 }}
color11 {{ color11 }}
color12 {{ color12 }}
color13 {{ color13 }}
color14 {{ color14 }}
color15 {{ color15 }}

mark1_foreground {{ color6 | saturate(0.2) }}
mark2_foreground {{ color7 | saturate(0.2) }}
mark3_foreground {{ color6 | saturate(0.2) }}</file><file path="quickshell/Templates/templates/niri.kdl">// Niri configuration for CachyOS
// For documentation and full reference, see: https://github.com/YaLTeR/niri/wiki

// ────────────── Input Configuration ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input

input {
    keyboard {
        xkb {
            layout &quot;de&quot; // Use the German keyboard layout
        }
        numlock // Enable numlock on startup
    }

    touchpad {
        tap // Enable tap-to-click
        natural-scroll // Enable natural (macOS-style) scrolling
    }

    focus-follows-mouse // Automatically focus windows under the mouse pointer
    workspace-auto-back-and-forth // Enable workspace back &amp; forth switching
}

// ────────────── Output Configuration ──────────────
// You can run `niri msg outputs` to get the correct name for your displays.
// You will have to remove &quot;/-&quot; and edit it before it takes effect.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs

 output &quot;DP-1&quot; {
    mode &quot;2560x1440@359.979&quot; // Set resolution and refresh rate
    scale 1 // No scaling (use 2 for HiDPI)
}

// ────────────── Keybindings ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Key-Bindings

binds {
    MOD+SHIFT+ESCAPE                     { show-hotkey-overlay; }

    // ─── Applications ───
    MOD+RETURN                          hotkey-overlay-title=&quot;Open Terminal: Kitty&quot; { spawn &quot;kitty&quot;; }
    MOD+CTRL+RETURN                     hotkey-overlay-title=&quot;Open App Launcher: QS&quot; { spawn &quot;qs&quot; &quot;ipc&quot; &quot;call&quot; &quot;globalIPC&quot; &quot;toggleLauncher&quot;; }
    MOD+B                               hotkey-overlay-title=&quot;Open Browser: firefox&quot; { spawn &quot;firefox&quot;; }
    MOD+ALT+L                           hotkey-overlay-title=&quot;Lock Screen: swaylock&quot; { spawn &quot;swaylock&quot;; }
    
    // Please choose your own file manager
    MOD+E                             hotkey-overlay-title=&quot;File Manager: Nautilus&quot; { spawn &quot;nautilus&quot;; }

    // ─── Audio Controls ───
    XF86AUDIORAISEVOLUME                allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-volume&quot; &quot;@DEFAULT_AUDIO_SINK@&quot; &quot;0.1+&quot;; }
    XF86AUDIOLOWERVOLUME                allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-volume&quot; &quot;@DEFAULT_AUDIO_SINK@&quot; &quot;0.1-&quot;; }
    XF86AUDIOMUTE                       allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-mute&quot; &quot;@DEFAULT_AUDIO_SINK@&quot; &quot;toggle&quot;; }
    XF86AUDIOMICMUTE                    allow-when-locked=true { spawn &quot;wpctl&quot; &quot;set-mute&quot; &quot;@DEFAULT_AUDIO_SOURCE@&quot; &quot;toggle&quot;; }

    // ─── Window Movement and Focus ───
    MOD+Q                               { close-window; }

    MOD+LEFT                            { focus-column-left; }
    MOD+H                               { focus-column-left; }
    MOD+RIGHT                           { focus-column-right; }
    MOD+L                               { focus-column-right; }
    MOD+UP                              { focus-window-up; }
    MOD+K                               { focus-window-up; }
    MOD+DOWN                            { focus-window-down; }
    MOD+J                               { focus-window-down; }

    MOD+CTRL+LEFT                       { move-column-left; }
    MOD+CTRL+H                          { move-column-left; }
    MOD+CTRL+RIGHT                      { move-column-right; }
    MOD+CTRL+L                          { move-column-right; }
    MOD+CTRL+UP                         { move-window-up; }
    MOD+CTRL+K                          { move-window-up; }
    MOD+CTRL+DOWN                       { move-window-down; }
    MOD+CTRL+J                          { move-window-down; }

    MOD+HOME                            { focus-column-first; }
    MOD+END                             { focus-column-last; }
    MOD+CTRL+HOME                       { move-column-to-first; }
    MOD+CTRL+END                        { move-column-to-last; }

    MOD+SHIFT+LEFT                      { focus-monitor-left; }
    MOD+SHIFT+RIGHT                     { focus-monitor-right; }
    MOD+SHIFT+UP                        { focus-monitor-up; }
    MOD+SHIFT+DOWN                      { focus-monitor-down; }

    MOD+SHIFT+CTRL+LEFT                 { move-column-to-monitor-left; }
    MOD+SHIFT+CTRL+RIGHT                { move-column-to-monitor-right; }
    MOD+SHIFT+CTRL+UP                   { move-column-to-monitor-up; }
    MOD+SHIFT+CTRL+DOWN                 { move-column-to-monitor-down; }

    // ─── Workspace Switching ───
    MOD+WHEELSCROLLDOWN                 cooldown-ms=150 { focus-workspace-down; }
    MOD+WHEELSCROLLUP                   cooldown-ms=150 { focus-workspace-up; }
    MOD+CTRL+WHEELSCROLLDOWN            cooldown-ms=150 { move-column-to-workspace-down; }
    MOD+CTRL+WHEELSCROLLUP              cooldown-ms=150 { move-column-to-workspace-up; }

    MOD+WHEELSCROLLRIGHT                { focus-column-right; }
    MOD+WHEELSCROLLLEFT                 { focus-column-left; }
    MOD+CTRL+WHEELSCROLLRIGHT           { move-column-right; }
    MOD+CTRL+WHEELSCROLLLEFT            { move-column-left; }

    MOD+SHIFT+WHEELSCROLLDOWN           { focus-column-right; }
    MOD+SHIFT+WHEELSCROLLUP             { focus-column-left; }
    MOD+CTRL+SHIFT+WHEELSCROLLDOWN      { move-column-right; }
    MOD+CTRL+SHIFT+WHEELSCROLLUP        { move-column-left; }

    MOD+1                               { focus-workspace 1; }
    MOD+2                               { focus-workspace 2; }
    MOD+3                               { focus-workspace 3; }
    MOD+4                               { focus-workspace 4; }
    MOD+5                               { focus-workspace 5; }
    MOD+6                               { focus-workspace 6; }
    MOD+7                               { focus-workspace 7; }
    MOD+8                               { focus-workspace 8; }
    MOD+9                               { focus-workspace 9; }

    MOD+CTRL+1                          { move-column-to-workspace 1; }
    MOD+CTRL+2                          { move-column-to-workspace 2; }
    MOD+CTRL+3                          { move-column-to-workspace 3; }
    MOD+CTRL+4                          { move-column-to-workspace 4; }
    MOD+CTRL+5                          { move-column-to-workspace 5; }
    MOD+CTRL+6                          { move-column-to-workspace 6; }
    MOD+CTRL+7                          { move-column-to-workspace 7; }
    MOD+CTRL+8                          { move-column-to-workspace 8; }
    MOD+CTRL+9                          { move-column-to-workspace 9; }

    MOD+TAB                             { focus-workspace-previous; }

    // ─── Layout Controls ───
    MOD+CTRL+F                          { expand-column-to-available-width; }
    MOD+C                               { center-column; }
    MOD+CTRL+C                          { center-visible-columns; }
    MOD+MINUS                           { set-column-width &quot;-10%&quot;; }
    MOD+EQUAL                           { set-column-width &quot;+10%&quot;; }
    MOD+SHIFT+MINUS                     { set-window-height &quot;-10%&quot;; }
    MOD+SHIFT+EQUAL                     { set-window-height &quot;+10%&quot;; }

    // ─── Modes ───
    MOD+T                               { toggle-window-floating; }
    MOD+F                               { fullscreen-window; }
    MOD+W                               { toggle-column-tabbed-display; }

    // ─── Screenshots ───
    CTRL+SHIFT+1                        { screenshot; }
    CTRL+SHIFT+2                        { screenshot-screen; }
    CTRL+SHIFT+3                        { screenshot-window; }

    // ─── Emergency Escape Key ───
    // Use this when a fullscreen app blocks your keybinds.
    // It disables any active keyboard shortcut inhibitor, restoring control.
    MOD+ESCAPE                          allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // ─── Exit / Power ───
    CTRL+ALT+DELETE                     { quit; } // Also quits Niri
    MOD+SHIFT+P                         { power-off-monitors; } // Turn off screens (useful for OLED or privacy)
    MOD+O                               repeat=false { toggle-overview; }
}

// ────────────── Startup Applications ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Miscellaneous#spawn-at-startup

    spawn-at-startup &quot;/usr/lib/polkit-kde-authentication-agent-1&quot; &quot;&amp;&quot; // Polkit
    spawn-at-startup &quot;xwayland-satellite&quot; // XWayland support
    spawn-at-startup &quot;swww-daemon&quot; // Wallpaper daemon
    spawn-at-startup &quot;swww img&quot; &quot;/usr/share/wallpapers/cachyos-wallpapers/Skyscraper.png&quot; // Set wallpaper
    spawn-at-startup &quot;qs&quot; // Launch Quickshell
    spawn-at-startup &quot;vesktop&quot; // Launch Vesktop

    prefer-no-csd // Disable program decorations
    screenshot-path null // Disable screenshot saving

// ────────────── Layout Settings ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout

    layout {
        gaps 16 // Gap between windows
        center-focused-column &quot;never&quot; // Don’t auto-center focused column

        preset-column-widths {
            proportion 0.33333
            proportion 0.5
            proportion 0.66667
        }

        focus-ring {
            width 3
            active-color &quot;{{ color4 }}&quot;
            inactive-color &quot;{{ color0 }}&quot;
        }

        shadow {
            softness 30
            spread 5
            offset x=0 y=5
            color &quot;#0007&quot;
        }

        background-color &quot;transparent&quot;

        struts {}
    }

// ────────────── Animation Settings ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
    animations {
        workspace-switch {
            spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
        }
        window-open {
            duration-ms 200
            curve &quot;ease-out-quad&quot;
        }
        window-close {
            duration-ms 200
            curve &quot;ease-out-cubic&quot;
        }
        horizontal-view-movement {
            spring damping-ratio=1.0 stiffness=900 epsilon=0.0001
        }
        window-movement {
            spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
        }
        window-resize {
            spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
        }
        config-notification-open-close {
            spring damping-ratio=0.6 stiffness=1200 epsilon=0.001
        }
        screenshot-ui-open {
            duration-ms 300
            curve &quot;ease-out-quad&quot;
        }
        overview-open-close {
            spring damping-ratio=1.0 stiffness=900 epsilon=0.0001
        }
    }

// ────────────── Named Workspaces ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

    workspace &quot;browser&quot;
    workspace &quot;chat&quot;

// ────────────── Window Rules ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

    window-rule {
        match at-startup=true app-id=&quot;vesktop&quot;
        open-on-workspace &quot;chat&quot;
        open-maximized true
    }

    window-rule {
        match app-id=&quot;firefox&quot;
        open-on-workspace &quot;browser&quot;
        open-maximized true
    }

    window-rule {
        match app-id=r#&quot;firefox$&quot;# title=&quot;^Picture-in-Picture$&quot;
        open-floating true // Always float Firefox PiP windows
    }

    window-rule {
        geometry-corner-radius 20 // Set every window radius to 20
        clip-to-geometry true
    }

// ────────────── Layer Rules ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layer-Rules

    layer-rule {
        match namespace=&quot;^swww-daemon$&quot;
        place-within-backdrop true
    }

// ────────────── Environment Variables ──────────────
// https://github.com/YaLTeR/niri/wiki/Configuration:-Miscellaneous#environment

    environment {
        DISPLAY &quot;:1&quot;
        ELECTRON_OZONE_PLATFORM_HINT &quot;auto&quot;
        QT_QPA_PLATFORM &quot;wayland&quot;
        QT_WAYLAND_DISABLE_WINDOWDECORATION &quot;1&quot;
        XDG_SESSION_TYPE &quot;wayland&quot;
        XDG_CURRENT_DESKTOP &quot;niri&quot;
    }

// ────────────── Misc ──────────────
hotkey-overlay {
    skip-at-startup
}</file><file path="quickshell/Templates/templates/quickshell.json">{
  &quot;backgroundPrimary&quot;: &quot;{{ background }}&quot;,
  &quot;backgroundSecondary&quot;: &quot;{{ background | lighten(0.05) }}&quot;,
  &quot;backgroundTertiary&quot;: &quot;{{ background | lighten(0.1) }}&quot;,
  
  &quot;surface&quot;: &quot;{{ background | lighten(0.08) }}&quot;,
  &quot;surfaceVariant&quot;: &quot;{{ background | lighten(0.15) }}&quot;,
  
  &quot;textPrimary&quot;: &quot;{{ foreground }}&quot;,
  &quot;textSecondary&quot;: &quot;{{ foreground | darken(0.1) }}&quot;,
  &quot;textDisabled&quot;: &quot;{{ foreground | darken(0.4) }}&quot;,
  
  &quot;accentPrimary&quot;: &quot;{{ color4 }}&quot;,
  &quot;accentSecondary&quot;: &quot;{{ color4 | lighten(0.2) }}&quot;,
  &quot;accentTertiary&quot;: &quot;{{ color4 | darken(0.2) }}&quot;,
  
  &quot;error&quot;: &quot;{{ color5 | lighten(0.1) }}&quot;,
  &quot;warning&quot;: &quot;{{ color5 | lighten(0.3) }}&quot;,
  
  &quot;highlight&quot;: &quot;{{ color4 | lighten(0.4) }}&quot;,
  &quot;rippleEffect&quot;: &quot;{{ color4 | lighten(0.1) }}&quot;,
  
  &quot;onAccent&quot;: &quot;{{ background }}&quot;,
  &quot;outline&quot;: &quot;{{ background | lighten(0.3) }}&quot;,
  
  &quot;shadow&quot;: &quot;{{ background }}&quot;,
  &quot;overlay&quot;: &quot;{{ background }}&quot;
}</file><file path="quickshell/Templates/wallust.toml"># wallust v3.3
#
# You can copy this file to ~/.config/wallust/wallust.toml (keep in mind is a sample config)

# SIMPLE TUTORIAL, or `man wallust.5`:
# https://explosion-mental.codeberg.page/wallust/
#
# If comming from v2: https://explosion-mental.codeberg.page/wallust/v3.html#wallusttoml

# Global section - values below can be overwritten by command line flags

# How the image is parse, in order to get the colors:
# full - resized - wal - thumb -  fastresize - kmeans
backend = &quot;resized&quot;

# What color space to use to produce and select the most prominent colors:
# lab - labmixed - lch - lchmixed
color_space = &quot;labmixed&quot;

# Use the most prominent colors in a way that makes sense, a scheme color palette:
# dark - dark16 - darkcomp - darkcomp16
# light - light16 - lightcomp - lightcomp16
# harddark - harddark16 - harddarkcomp - harddarkcomp16
# softdark - softdark16 - softdarkcomp - softdarkcomp16
# softlight - softlight16 - softlightcomp - softlightcomp16
palette = &quot;dark&quot;

# Ensures a &quot;readable contrast&quot; (OPTIONAL, disabled by default)
# Should only be enabled when you notice an unreadable contrast frequently happening
# with your images. The reference color for the contrast is the background color.
check_contrast = true

# Color saturation, between [1% and 100%] (OPTIONAL, disabled by default)
# usually something higher than 50 increases the saturation and below
# decreases it (on a scheme with strong and vivid colors)
#saturation = 50

# Alpha value for templating, by default 100 (no other use whatsoever)
#alpha = 100

[templates]
# NOTE: prefer &apos;&apos; over &quot;&quot; for paths, avoids escaping.
# template: A RELATIVE path that points to `~/.config/wallust/template` (depends on platform)
# target: ABSOLUTE path in which to place a file with generated templated values.
# ¡ If either one is a directory, then both SHOULD be one. !
# zathura = { template = &apos;zathura&apos;, target = &apos;~/.config/zathura/zathurarc&apos; }
Quickshell = { template = &apos;quickshell.json&apos;, target = &apos;~/.config/Noctalia/Theme.json&apos; }</file><file path="quickshell/Widgets/LockScreen/BatteryCharge.qml">import QtQuick
import Quickshell
import Quickshell.Services.UPower
import QtQuick.Layouts
import qs.Components
import qs.Settings

Item {

    property bool testMode: false
    property int testPercent: 49
    property bool testCharging: true

    property var battery: UPower.displayDevice
    property bool isReady: testMode ? true : (battery &amp;&amp; battery.ready &amp;&amp; battery.isLaptopBattery &amp;&amp; battery.isPresent)
    property real percent: testMode ? testPercent : (isReady ? (battery.percentage * 100) : 0)
    property bool charging: testMode ? testCharging : (isReady ? battery.state === UPowerDeviceState.Charging : false)
    property bool show: isReady &amp;&amp; percent &gt; 0

    width: row.width
    height: row.height
    visible: testMode || (isReady &amp;&amp; battery.isLaptopBattery)


    function batteryIcon() {
        if (!show)
            return &quot;&quot;;

        if (charging)
            return &quot;battery_android_bolt&quot;;

        if (percent &gt;= 95)
            return &quot;battery_android_full&quot;;

    
        if (percent &gt;= 85)
            return &quot;battery_android_6&quot;;
        if (percent &gt;= 70)
            return &quot;battery_android_5&quot;;
        if (percent &gt;= 55)
            return &quot;battery_android_4&quot;;
        if (percent &gt;= 40)
            return &quot;battery_android_3&quot;;
        if (percent &gt;= 25)
            return &quot;battery_android_2&quot;;
        if (percent &gt;= 10)
            return &quot;battery_android_1&quot;;
        if (percent &gt;= 0)
            return &quot;battery_android_0&quot;;
    }

    RowLayout {
        id: row
        spacing: 6
        Layout.alignment: Qt.AlignHCenter
        anchors.horizontalCenter: parent.horizontalCenter

        Text {
            text: batteryIcon()
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 28 * Theme.scale(screen)
            color: charging ? Theme.accentPrimary : Theme.textSecondary
            verticalAlignment: Text.AlignVBottom
        }

        Text {
            text: Math.round(percent) + &quot;%&quot;
            font.family: Theme.fontFamily
            font.pixelSize: 18 * Theme.scale(screen)
            color: Theme.textSecondary
            verticalAlignment: Text.AlignVBottom
        }

    }
}</file><file path="quickshell/Widgets/LockScreen/LockScreen.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import QtQuick.Effects
import Quickshell
import Quickshell.Wayland
import Quickshell.Services.Pam
import Quickshell.Io
import Quickshell.Widgets
import qs.Components
import qs.Settings
import qs.Services
import qs.Widgets.LockScreen
import &quot;../../Helpers/Weather.js&quot; as WeatherHelper

WlSessionLock {
    id: lock


    property string errorMessage: &quot;&quot;
    property bool authenticating: false
    property string password: &quot;&quot;
    property bool pamAvailable: typeof PamContext !== &quot;undefined&quot;
    property string weatherCity: Settings.settings.weatherCity
    property var weatherData: null
    property string weatherError: &quot;&quot;
    property string weatherInfo: &quot;&quot;
    property string weatherIcon: &quot;&quot;
    property double currentTemp: 0
    locked: false

    // Request to fetch weather with a little delay to ensure weatherCity is properly loaded.
    Component.onCompleted: {
        Qt.callLater(function () {
            fetchWeatherData();
        });
    }

    function fetchWeatherData() {
        WeatherHelper.fetchCityWeather(weatherCity, function (result) {
            weatherData = result.weather;
            weatherError = &quot;&quot;;
        }, function (err) {
            weatherError = err;
        });
    }

    function materialSymbolForCode(code) {
        if (code === 0)
            return &quot;sunny&quot;;
        if (code === 1 || code === 2)
            return &quot;partly_cloudy_day&quot;;
        if (code === 3)
            return &quot;cloud&quot;;
        if (code &gt;= 45 &amp;&amp; code &lt;= 48)
            return &quot;foggy&quot;;
        if (code &gt;= 51 &amp;&amp; code &lt;= 67)
            return &quot;rainy&quot;;
        if (code &gt;= 71 &amp;&amp; code &lt;= 77)
            return &quot;weather_snowy&quot;;
        if (code &gt;= 80 &amp;&amp; code &lt;= 82)
            return &quot;rainy&quot;;
        if (code &gt;= 95 &amp;&amp; code &lt;= 99)
            return &quot;thunderstorm&quot;;
        return &quot;cloud&quot;;
    }

    function unlockAttempt() {
        console.log(&quot;Unlock attempt started&quot;);
        if (!pamAvailable) {
            lock.errorMessage = &quot;PAM authentication not available.&quot;;
            console.log(&quot;PAM not available&quot;);
            return;
        }
        if (!lock.password) {
            lock.errorMessage = &quot;Password required.&quot;;
            console.log(&quot;No password entered&quot;);
            return;
        }
        console.log(&quot;Starting PAM authentication...&quot;);
        lock.authenticating = true;
        lock.errorMessage = &quot;&quot;;

        console.log(&quot;[LockScreen] About to create PAM context with userName:&quot;, Quickshell.env(&quot;USER&quot;));
        var pam = Qt.createQmlObject(&apos;import Quickshell.Services.Pam; PamContext { config: &quot;login&quot;; user: &quot;&apos; + Quickshell.env(&quot;USER&quot;) + &apos;&quot; }&apos;, lock);
        console.log(&quot;PamContext created&quot;, pam);

        pam.onCompleted.connect(function (result) {
            console.log(&quot;PAM completed with result:&quot;, result);
            lock.authenticating = false;
            if (result === PamResult.Success) {
                console.log(&quot;Authentication successful, unlocking...&quot;);
                lock.locked = false;
                lock.password = &quot;&quot;;
                lock.errorMessage = &quot;&quot;;
            } else {
                console.log(&quot;Authentication failed&quot;);
                lock.errorMessage = &quot;Authentication failed.&quot;;
                lock.password = &quot;&quot;;
            }
            pam.destroy();
        });

        pam.onError.connect(function (error) {
            console.log(&quot;PAM error:&quot;, error);
            lock.authenticating = false;
            lock.errorMessage = pam.message || &quot;Authentication error.&quot;;
            lock.password = &quot;&quot;;
            pam.destroy();
        });

        pam.onPamMessage.connect(function () {
            console.log(&quot;PAM message:&quot;, pam.message, &quot;isError:&quot;, pam.messageIsError);
            if (pam.messageIsError) {
                lock.errorMessage = pam.message;
            }
        });

        pam.onResponseRequiredChanged.connect(function () {
            console.log(&quot;PAM response required:&quot;, pam.responseRequired);
            if (pam.responseRequired &amp;&amp; lock.authenticating) {
                console.log(&quot;Responding to PAM with password&quot;);
                pam.respond(lock.password);
            }
        });

        var started = pam.start();
        console.log(&quot;PAM start result:&quot;, started);
    }

    WlSessionLockSurface {
        // Default to Screen (with a capital S), this seems specific to lockscreen
        property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : Screen)

        // Wallpaper image to blur
        Image {
            id: lockBgImage
            anchors.fill: parent
            fillMode: Image.PreserveAspectCrop
            source: WallpaperManager.currentWallpaper !== &quot;&quot; ? WallpaperManager.currentWallpaper : &quot;&quot;
            cache: true
            smooth: true
            mipmap: false
        }

        MultiEffect {
            id: lockBgBlur
            anchors.fill: parent
            source: lockBgImage
            blurEnabled: true
            blur: 0.48   // controls blur strength (0 to 1)
            blurMax: 128 // max blur radius in pixels
            // transparentBorder: true
        }

        ColumnLayout {
            anchors.centerIn: parent
            spacing: 30
            width: Math.min(parent.width * 0.8, 400 * Theme.scale(screen))

            Rectangle {
                Layout.alignment: Qt.AlignHCenter
                width: 80 * Theme.scale(screen)
                height: 80 * Theme.scale(screen)
                radius: 40
                color: Theme.accentPrimary

                Rectangle {
                    anchors.fill: parent
                    color: &quot;transparent&quot;
                    radius: 40
                    border.color: Theme.accentPrimary
                    border.width: 3 * Theme.scale(screen)
                    z: 2
                }

                Avatar {}

                layer.enabled: true
                layer.effect: MultiEffect {
                    shadowEnabled: true
                    shadowColor: Theme.accentPrimary
                }
            }

            Text {
                Layout.alignment: Qt.AlignHCenter
                text: Quickshell.env(&quot;USER&quot;)
                font.family: Theme.fontFamily
                font.pixelSize: 24 * Theme.scale(screen)
                font.weight: Font.Medium
                color: Theme.textPrimary
            }

            Rectangle {
                Layout.fillWidth: true
                height: 50 * Theme.scale(screen)
                radius: 25
                color: Theme.surface
                opacity: passwordInput.activeFocus ? 0.8 : 0.3
                border.color: passwordInput.activeFocus ? Theme.accentPrimary : Theme.outline
                border.width: 2 * Theme.scale(screen)

                TextInput {
                    id: passwordInput
                    anchors.fill: parent
                    anchors.margins: 15 * Theme.scale(screen)
                    verticalAlignment: TextInput.AlignVCenter
                    horizontalAlignment: TextInput.AlignHCenter
                    font.family: Theme.fontFamily
                    font.pixelSize: 16 * Theme.scale(screen)
                    color: Theme.textPrimary
                    echoMode: TextInput.Password
                    passwordCharacter: &quot;●&quot;
                    passwordMaskDelay: 0

                    text: lock.password
                    onTextChanged: lock.password = text

                    Text {
                        anchors.centerIn: parent
                        text: &quot;Enter password...&quot;
                        color: Theme.textSecondary
                        font.family: Theme.fontFamily
                        font.pixelSize: 16 * Theme.scale(screen)
                        visible: !passwordInput.text &amp;&amp; !passwordInput.activeFocus
                    }

                    Keys.onPressed: function (event) {
                        if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                            lock.unlockAttempt();
                        }
                    }

                    Component.onCompleted: {
                        forceActiveFocus();
                    }
                }
            }

            Rectangle {
                id: errorMessageRect
                Layout.alignment: Qt.AlignHCenter
                width: parent.width * 0.8
                height: 44 * Theme.scale(screen)
                color: Theme.overlay
                radius: 18
                visible: lock.errorMessage !== &quot;&quot;

                Text {
                    anchors.centerIn: parent
                    text: lock.errorMessage
                    color: Theme.error
                    font.family: Theme.fontFamily
                    font.pixelSize: 14 * Theme.scale(screen)
                    opacity: 1
                    visible: lock.errorMessage !== &quot;&quot;
                }
            }

            Rectangle {
                Layout.alignment: Qt.AlignHCenter
                width: 120 * Theme.scale(screen)
                height: 44 * Theme.scale(screen)
                radius: 18
                opacity: unlockButtonArea.containsMouse ? 0.8 : 0.5
                color: unlockButtonArea.containsMouse ? Theme.accentPrimary : Theme.surface
                border.color: Theme.accentPrimary
                border.width: 2 * Theme.scale(screen)
                enabled: !lock.authenticating

                Text {
                    id: unlockButtonText
                    anchors.centerIn: parent
                    text: lock.authenticating ? &quot;...&quot; : &quot;Unlock&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: 16 * Theme.scale(screen)
                    font.bold: true
                    color: unlockButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                }

                MouseArea {
                    id: unlockButtonArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        if (!lock.authenticating) {
                            lock.unlockAttempt();
                        }
                    }
                }

                Behavior on opacity {
                    NumberAnimation {
                        duration: 200
                    }
                }
            }
        }

        Rectangle {
            width: infoColumn.width + 32 * Theme.scale(screen)
            height: infoColumn.height + 8 * Theme.scale(screen)
            color: (Theme.backgroundPrimary !== undefined &amp;&amp; Theme.backgroundPrimary !== null) ? Theme.backgroundPrimary : &quot;#222&quot;
            anchors.horizontalCenter: parent.horizontalCenter
            bottomLeftRadius: 20 * Theme.scale(screen)
            bottomRightRadius: 20 * Theme.scale(screen)

            ColumnLayout {
                id: infoColumn
                anchors.top: parent.top
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.topMargin: 0
                anchors.bottomMargin: 0
                spacing: 8

                Text {
                    id: timeText
                    text: Qt.formatDateTime(new Date(), &quot;HH:mm&quot;)
                    font.family: Theme.fontFamily
                    font.pixelSize: 48 * Theme.scale(screen)
                    font.bold: true
                    color: Theme.textPrimary
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                }
                Text {
                    id: dateText
                    text: Qt.formatDateTime(new Date(), &quot;dddd, MMMM d&quot;)
                    font.family: Theme.fontFamily
                    font.pixelSize: 16 * Theme.scale(screen)
                    color: Theme.textSecondary
                    opacity: 0.8
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                }

                RowLayout {
                    spacing: 6
                    Layout.alignment: Qt.AlignHCenter
                    anchors.horizontalCenter: parent.horizontalCenter
                    visible: weatherData &amp;&amp; weatherData.current_weather

                    Text {
                        text: weatherData &amp;&amp; weatherData.current_weather ? materialSymbolForCode(weatherData.current_weather.weathercode) : &quot;cloud&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 28 * Theme.scale(screen)
                        color: Theme.accentPrimary
                        verticalAlignment: Text.AlignVCenter
                    }

                    Text {
                        text: weatherData &amp;&amp; weatherData.current_weather ? ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? `${Math.round(weatherData.current_weather.temperature * 9 / 5 + 32)}°F` : `${Math.round(weatherData.current_weather.temperature)}°C`) : ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? &quot;--°F&quot; : &quot;--°C&quot;)
                        font.family: Theme.fontFamily
                        font.pixelSize: 18 * Theme.scale(screen)
                        color: Theme.textSecondary
                        verticalAlignment: Text.AlignVCenter
                    }
                }

                Text {
                    text: weatherError
                    color: Theme.error
                    visible: weatherError !== &quot;&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: 10 * Theme.scale(screen)
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                }
            }
        }

        Timer {
            interval: 1000
            running: true
            repeat: true
            onTriggered: {
                timeText.text = Qt.formatDateTime(new Date(), &quot;HH:mm&quot;);
                dateText.text = Qt.formatDateTime(new Date(), &quot;dddd, MMMM d&quot;);
            }
        }

        Timer {
            interval: 600000 // 10 minutes
            running: true
            repeat: true
            onTriggered: {
                fetchWeatherData();
            }
        }

        ColumnLayout {
            anchors.left: parent.left
            anchors.bottom: parent.bottom
            anchors.margins: 32
            spacing: 12

            BatteryCharge {}
        }

        ColumnLayout {
            anchors.right: parent.right
            anchors.bottom: parent.bottom
            anchors.margins: 32
            spacing: 12

            Rectangle {
                width: 48 * Theme.scale(screen)
                height: 48 * Theme.scale(screen)
                radius: 24
                color: shutdownArea.containsMouse ? Theme.error : &quot;transparent&quot;
                border.color: Theme.error
                border.width: 1 * Theme.scale(screen)

                MouseArea {
                    id: shutdownArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        Qt.createQmlObject(&apos;import Quickshell.Io; Process { command: [&quot;shutdown&quot;, &quot;-h&quot;, &quot;now&quot;]; running: true }&apos;, lock);
                    }
                }

                Text {
                    anchors.centerIn: parent
                    text: &quot;power_settings_new&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24 * Theme.scale(screen)
                    color: shutdownArea.containsMouse ? Theme.onAccent : Theme.error
                }
            }

            Rectangle {
                width: 48 * Theme.scale(screen)
                height: 48 * Theme.scale(screen)
                radius: 24
                color: rebootArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                border.color: Theme.accentPrimary
                border.width: 1 * Theme.scale(screen)

                MouseArea {
                    id: rebootArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        Qt.createQmlObject(&apos;import Quickshell.Io; Process { command: [&quot;reboot&quot;]; running: true }&apos;, lock);
                    }
                }

                Text {
                    anchors.centerIn: parent
                    text: &quot;refresh&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24 * Theme.scale(screen)
                    color: rebootArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                }
            }

            Rectangle {
                width: 48 * Theme.scale(screen)
                height: 48 * Theme.scale(screen)
                radius: 24
                color: logoutArea.containsMouse ? Theme.accentSecondary : &quot;transparent&quot;
                border.color: Theme.accentSecondary
                border.width: 1 * Theme.scale(screen)

                MouseArea {
                    id: logoutArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        Qt.createQmlObject(&apos;import Quickshell.Io; Process { command: [&quot;loginctl&quot;, &quot;terminate-user&quot;, &quot;&apos; + Quickshell.env(&quot;USER&quot;) + &apos;&quot;]; running: true }&apos;, lock);
                    }
                }

                Text {
                    anchors.centerIn: parent
                    text: &quot;exit_to_app&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24 * Theme.scale(screen)
                    color: logoutArea.containsMouse ? Theme.onAccent : Theme.accentSecondary
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Notification/NotificationHistory.qml">import QtQuick
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import qs.Components
import qs.Settings

PanelWithOverlay {
    id: notificationHistoryWin

    property string historyFilePath: Settings.settingsDir + &quot;notification_history.json&quot;
    property bool hasUnread: notificationHistoryWinRect.hasUnread &amp;&amp; !notificationHistoryWinRect.visible

    function addToHistory(notification) {
        notificationHistoryWinRect.addToHistory(notification);
    }

    Rectangle {
        id: notificationHistoryWinRect

        property int maxPopupHeight: 800
        property int minPopupHeight: 210
        property int contentHeight: headerRow.height + historyList.contentHeight + 56
        property int maxHistory: 100
        property bool hasUnread: false

        signal unreadChanged(bool hasUnread)

        function updateHasUnread() {
            var unread = false;
            for (let i = 0; i &lt; historyModel.count; ++i) {
                if (historyModel.get(i).read === false) {
                    unread = true;
                    break;
                }
            }
            if (hasUnread !== unread) {
                hasUnread = unread;
                unreadChanged(hasUnread);
            }
        }

        function loadHistory() {
            if (historyAdapter.notifications) {
                historyModel.clear();
                const notifications = historyAdapter.notifications;
                const count = Math.min(notifications.length, maxHistory);
                for (let i = 0; i &lt; count; i++) {
                    let n = notifications[i];
                    if (typeof n === &apos;object&apos; &amp;&amp; n !== null) {
                        if (n.read === undefined)
                            n.read = false;

                        // Mark as read if window is open
                        if (notificationHistoryWinRect.visible)
                            n.read = true;

                        historyModel.append(n);
                    }
                }
                updateHasUnread();
            }
        }

        function saveHistory() {
            const historyArray = [];
            const count = Math.min(historyModel.count, maxHistory);
            for (let i = 0; i &lt; count; ++i) {
                let obj = historyModel.get(i);
                if (typeof obj === &apos;object&apos; &amp;&amp; obj !== null)
                    historyArray.push({
                        &quot;id&quot;: obj.id,
                        &quot;appName&quot;: obj.appName,
                        &quot;summary&quot;: obj.summary,
                        &quot;body&quot;: obj.body,
                        &quot;timestamp&quot;: obj.timestamp,
                        &quot;read&quot;: obj.read === undefined ? false : obj.read
                    });

            }
            historyAdapter.notifications = historyArray;
            Qt.callLater(function() {
                historyFileView.writeAdapter();
            });
            updateHasUnread();
        }

        function addToHistory(notification) {
            if (!notification.id)
                notification.id = Date.now();

            if (!notification.timestamp)
                notification.timestamp = new Date().toISOString();

            // Mark as read if window is open
            notification.read = visible;
            // Remove duplicate by id
            for (let i = 0; i &lt; historyModel.count; ++i) {
                if (historyModel.get(i).id === notification.id) {
                    historyModel.remove(i);
                    break;
                }
            }
            historyModel.insert(0, notification);
            if (historyModel.count &gt; maxHistory)
                historyModel.remove(maxHistory);

            saveHistory();
        }

        function clearHistory() {
            historyModel.clear();
            historyAdapter.notifications = [];
            historyFileView.writeAdapter();
        }

        function formatTimestamp(ts) {
            if (!ts)
                return &quot;&quot;;

            var date = typeof ts === &quot;number&quot; ? new Date(ts) : new Date(Date.parse(ts));
            var y = date.getFullYear();
            var m = (date.getMonth() + 1).toString().padStart(2, &apos;0&apos;);
            var d = date.getDate().toString().padStart(2, &apos;0&apos;);
            var h = date.getHours().toString().padStart(2, &apos;0&apos;);
            var min = date.getMinutes().toString().padStart(2, &apos;0&apos;);
            return `${y}-${m}-${d} ${h}:${min}`;
        }

        implicitWidth: 400
        implicitHeight: Math.max(Math.min(contentHeight, maxPopupHeight), minPopupHeight)
        visible: parent.visible
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.topMargin: 4
        anchors.rightMargin: 4
        color: Theme.backgroundPrimary
        radius: 20
        onVisibleChanged: {
            if (visible) {
                // Mark all as read when popup is opened
                let changed = false;
                for (let i = 0; i &lt; historyModel.count; ++i) {
                    if (historyModel.get(i).read === false) {
                        historyModel.setProperty(i, &apos;read&apos;, true);
                        changed = true;
                    }
                }
                if (changed)
                    saveHistory();

            }
        }

        // Prevent closing when clicking in the panel bg
        MouseArea {
            anchors.fill: parent
        }

        ListModel {
            id: historyModel
        }

        FileView {
            id: historyFileView

            path: notificationHistoryWin.historyFilePath
            blockLoading: true
            printErrors: true
            watchChanges: true
            onFileChanged: historyFileView.reload()
            onLoaded: notificationHistoryWinRect.loadHistory()
            onLoadFailed: function(error) {
                historyAdapter.notifications = [];
                historyFileView.writeAdapter();
            }
            Component.onCompleted: {
                if (path) {
                    reload();
                }
            }

            JsonAdapter {
                id: historyAdapter

                property var notifications: []
            }

        }

        Rectangle {
            width: notificationHistoryWinRect.width
            height: notificationHistoryWinRect.height
            anchors.fill: parent
            color: Theme.backgroundPrimary
            radius: 20

            Column {
                anchors.fill: parent
                anchors.margins: 16
                spacing: 8

                RowLayout {
                    id: headerRow

                    spacing: 4
                    anchors.topMargin: 4
                    anchors.left: parent.left
                    anchors.right: parent.right
                    Layout.fillHeight: true
                    Layout.alignment: Qt.AlignVCenter
                    Layout.preferredHeight: 52
                    anchors.leftMargin: 16
                    anchors.rightMargin: 16

                    Text {
                        text: &quot;Notification History&quot;
                        font.pixelSize: 18
                        font.bold: true
                        color: Theme.textPrimary
                        Layout.alignment: Qt.AlignVCenter
                    }

                    Item {
                        Layout.fillWidth: true
                    }

                    Rectangle {
                        id: clearAllButton

                        width: 90
                        height: 32
                        radius: 16
                        color: clearAllMouseArea.containsMouse ? Theme.accentPrimary : Theme.surfaceVariant
                        border.color: Theme.accentPrimary
                        border.width: 1
                        Layout.alignment: Qt.AlignVCenter

                        Row {
                            anchors.centerIn: parent
                            spacing: 6

                            Text {
                                text: &quot;delete_sweep&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 14
                                color: clearAllMouseArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                                verticalAlignment: Text.AlignVCenter
                            }

                            Text {
                                text: &quot;Clear&quot;
                                font.pixelSize: Theme.fontSizeSmall
                                color: clearAllMouseArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                                font.bold: true
                                verticalAlignment: Text.AlignVCenter
                            }

                        }

                        MouseArea {
                            id: clearAllMouseArea

                            anchors.fill: parent
                            hoverEnabled: true
                            cursorShape: Qt.PointingHandCursor
                            onClicked: notificationHistoryWinRect.clearHistory()
                        }

                    }

                }

                Rectangle {
                    width: parent.width
                    height: 0
                    color: &quot;transparent&quot;
                    visible: true
                }

                Rectangle {
                    anchors.left: parent.left
                    anchors.right: parent.right
                    anchors.topMargin: 56
                    height: notificationHistoryWinRect.height - 56 - 12
                    color: Theme.surfaceVariant
                    radius: 20

                    Rectangle {
                        anchors.fill: parent
                        color: Theme.surface
                        radius: 20
                        z: 0
                    }

                    Rectangle {
                        id: listContainer

                        anchors.fill: parent
                        anchors.topMargin: 12
                        anchors.bottomMargin: 12
                        color: &quot;transparent&quot;
                        clip: true

                        Column {
                            anchors.fill: parent
                            spacing: 0

                            ListView {
                                id: historyList

                                width: parent.width
                                height: Math.min(contentHeight, parent.height)
                                spacing: 12
                                model: historyModel.count &gt; 0 ? historyModel : placeholderModel
                                clip: true

                                delegate: Item {
                                    width: parent.width
                                    height: notificationCard.implicitHeight + 12

                                    Rectangle {
                                        id: notificationCard

                                        width: parent.width - 24
                                        anchors.horizontalCenter: parent.horizontalCenter
                                        color: Theme.backgroundPrimary
                                        radius: 16
                                        anchors.top: parent.top
                                        anchors.bottom: parent.bottom
                                        anchors.margins: 0
                                        implicitHeight: contentColumn.implicitHeight + 20

                                        Column {
                                            id: contentColumn

                                            anchors.fill: parent
                                            anchors.margins: 14
                                            spacing: 6

                                            RowLayout {
                                                id: headerRow2

                                                spacing: 8

                                                Rectangle {
                                                    id: iconBackground

                                                    width: 28
                                                    height: 28
                                                    radius: 20
                                                    color: Theme.accentPrimary
                                                    border.color: Qt.darker(Theme.accentPrimary, 1.2)
                                                    border.width: 1.2
                                                    Layout.alignment: Qt.AlignVCenter

                                                    Text {
                                                        anchors.centerIn: parent
                                                        text: model.appName ? model.appName.charAt(0).toUpperCase() : &quot;?&quot;
                                                        font.family: Theme.fontFamily
                                                        font.pixelSize: 15
                                                        font.bold: true
                                                        color: Theme.backgroundPrimary
                                                    }

                                                }

                                                Column {
                                                    id: appInfoColumn

                                                    spacing: 0
                                                    Layout.alignment: Qt.AlignVCenter

                                                    Text {
                                                        text: model.appName || &quot;No Notifications&quot;
                                                        font.bold: true
                                                        color: Theme.textPrimary
                                                        font.family: Theme.fontFamily
                                                        font.pixelSize: Theme.fontSizeSmall
                                                        verticalAlignment: Text.AlignVCenter
                                                    }

                                                    Text {
                                                        visible: !model.isPlaceholder
                                                        text: model.timestamp ? notificationHistoryWinRect.formatTimestamp(model.timestamp) : &quot;&quot;
                                                        color: Theme.textDisabled
                                                        font.family: Theme.fontFamily
                                                        font.pixelSize: Theme.fontSizeCaption
                                                        verticalAlignment: Text.AlignVCenter
                                                    }

                                                }

                                                Item {
                                                    Layout.fillWidth: true
                                                }

                                            }

                                            Text {
                                                text: model.summary || (model.isPlaceholder ? &quot;You&apos;re all caught up!&quot; : &quot;&quot;)
                                                color: Theme.textSecondary
                                                font.family: Theme.fontFamily
                                                font.pixelSize: Theme.fontSizeBody
                                                width: parent.width
                                                wrapMode: Text.Wrap
                                            }

                                            Text {
                                                text: model.body || (model.isPlaceholder ? &quot;No notifications to show.&quot; : &quot;&quot;)
                                                color: Theme.textDisabled
                                                font.family: Theme.fontFamily
                                                font.pixelSize: Theme.fontSizeBody
                                                width: parent.width
                                                wrapMode: Text.Wrap
                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

                Rectangle {
                    width: 1
                    height: 24
                    color: &quot;transparent&quot;
                }

                ListModel {
                    id: placeholderModel

                    ListElement {
                        appName: &quot;&quot;
                        summary: &quot;&quot;
                        body: &quot;&quot;
                        isPlaceholder: true
                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/Notification/NotificationIcon.qml">import QtQuick
import Quickshell
import Quickshell.Io
import qs.Components
import qs.Settings

Item {
    id: root

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property bool isSilence: false
    property var shell: null

    width: 22
    height: 22

    Process {
        id: rightClickProcess

        command: [&quot;qs&quot;, &quot;ipc&quot;, &quot;call&quot;, &quot;globalIPC&quot;, &quot;toggleNotificationPopup&quot;]
    }

    // Timer to check when NotificationHistory is loaded
    Timer {
        id: checkHistoryTimer

        interval: 50
        repeat: true
        onTriggered: {
            if (shell &amp;&amp; shell.notificationHistoryWin) {
                shell.notificationHistoryWin.visible = true;
                checkHistoryTimer.stop();
            }
        }
    }

    Item {
        id: bell

        width: 22
        height: 22

        Text {
            id: bellText

            anchors.centerIn: parent
            text: {
                if (shell &amp;&amp; shell.notificationHistoryWin &amp;&amp; shell.notificationHistoryWin.hasUnread)
                    return &quot;notifications_unread&quot;;
                else
                    return &quot;notifications&quot;;
            }
            font.family: mouseAreaBell.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
            font.pixelSize: 16 * Theme.scale(screen)
            font.weight: {
                if (shell &amp;&amp; shell.notificationHistoryWin &amp;&amp; shell.notificationHistoryWin.hasUnread)
                    return Font.Bold;
                else
                    return Font.Normal;
            }
            color: mouseAreaBell.containsMouse ? Theme.accentPrimary : (shell &amp;&amp; shell.notificationHistoryWin &amp;&amp; shell.notificationHistoryWin.hasUnread ? Theme.accentPrimary : Theme.textDisabled)
        }

        MouseArea {
            id: mouseAreaBell

            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            acceptedButtons: Qt.LeftButton | Qt.RightButton
            onClicked: function(mouse) {
                if (mouse.button === Qt.RightButton) {
                    root.isSilence = !root.isSilence;
                    rightClickProcess.running = true;
                    bellText.text = root.isSilence ? &quot;notifications_off&quot; : &quot;notifications&quot;;
                }
                if (mouse.button === Qt.LeftButton) {
                    if (shell) {
                        if (!shell.notificationHistoryWin) {
                            // Use the shell function to load notification history
                            shell.loadNotificationHistory();
                            checkHistoryTimer.start();
                        } else {
                            // Already loaded, just toggle visibility
                            shell.notificationHistoryWin.visible = !shell.notificationHistoryWin.visible;
                        }
                    }
                    return ;
                }
            }
            onEntered: notificationTooltip.tooltipVisible = true
            onExited: notificationTooltip.tooltipVisible = false
        }

    }

    StyledTooltip {
        id: notificationTooltip

        text: &quot;Notification History&quot;
        positionAbove: false
        tooltipVisible: false
        targetItem: bell
        delay: 200
    }

}</file><file path="quickshell/Widgets/Notification/NotificationManager.qml">import QtQuick
import QtQuick.Controls
import Quickshell
import qs.Settings

PanelWindow {
    id: window
    width: 350
    implicitHeight: notificationColumn.implicitHeight + 20
    color: &quot;transparent&quot;
    visible: false
    screen: Quickshell.primaryScreen
    focusable: false
    
    anchors.top: true
    anchors.right: true
            margins.top: -20
    margins.right: 6

    property var notifications: []
    property int maxVisible: 5
    property int spacing: 10

    function addNotification(notification) {
        var notifObj = {
            id: notification.id,
            appName: notification.appName || &quot;Notification&quot;,
            summary: notification.summary || &quot;&quot;,
            body: notification.body || &quot;&quot;,
            rawNotification: notification
        };
        notifications.unshift(notifObj);

        if (notifications.length &gt; maxVisible) {
            notifications = notifications.slice(0, maxVisible);
        }

        visible = true;
        notificationsChanged();
    }

    function dismissNotification(id) {
        notifications = notifications.filter(n =&gt; n.id !== id);
        if (notifications.length === 0) {
            visible = false;
        }
        notificationsChanged();
    }

    Column {
        id: notificationColumn
        anchors.right: parent.right
        spacing: window.spacing
        width: parent.width
        clip: false // Prevent clipping during animation

        Repeater {
            model: notifications

            delegate: Rectangle {
                id: notificationDelegate
                width: parent.width
                height: contentColumn.height + 20
                color: Theme.backgroundPrimary
                radius: 20
                opacity: 1

                Column {
                    id: contentColumn
                    width: parent.width - 20
                    anchors.centerIn: parent
                    spacing: 5

                    Text {
                        text: modelData.appName
                        width: parent.width
                        color: &quot;white&quot;
                        font.family: Theme.fontFamily
                        font.bold: true
                        font.pixelSize: Theme.fontSizeSmall
                        elide: Text.ElideRight
                    }

                    Text {
                        text: modelData.summary
                        width: parent.width
                        color: &quot;#eeeeee&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeSmall
                        wrapMode: Text.Wrap
                        visible: text !== &quot;&quot;
                    }

                    Text {
                        text: modelData.body
                        width: parent.width
                        color: &quot;#cccccc&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeCaption
                        wrapMode: Text.Wrap
                        visible: text !== &quot;&quot;
                    }
                }

                Timer {
                    interval: 4000
                    running: true
                    onTriggered: {
                        dismissAnimation.start();
                        if (modelData.rawNotification) {
                            modelData.rawNotification.expire();
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        dismissAnimation.start();
                        if (modelData.rawNotification) {
                            modelData.rawNotification.dismiss();
                        }
                    }
                }

                ParallelAnimation {
                    id: dismissAnimation
                    NumberAnimation {
                        target: notificationDelegate
                        property: &quot;opacity&quot;
                        to: 0
                        duration: 300
                    }
                    NumberAnimation {
                        target: notificationDelegate
                        property: &quot;height&quot;
                        to: 0
                        duration: 300
                    }
                    onFinished: window.dismissNotification(modelData.id)
                }

                Component.onCompleted: {
                    opacity = 0;
                    height = 0;
                    appearAnimation.start();
                }

                ParallelAnimation {
                    id: appearAnimation
                    NumberAnimation {
                        target: notificationDelegate
                        property: &quot;opacity&quot;
                        to: 1
                        duration: 300
                    }
                    NumberAnimation {
                        target: notificationDelegate
                        property: &quot;height&quot;
                        to: contentColumn.height + 20
                        duration: 300
                    }
                }
            }
        }
    }

    onNotificationsChanged: {
        height = notificationColumn.implicitHeight + 20
    }

    Connections {
        target: Quickshell
        function onScreensChanged() {
            if (window.screen) {
                x = window.screen.width - width - 20
                // y stays as it is (margins.top = -20)
            }
        }
    }
}</file><file path="quickshell/Widgets/Notification/NotificationPopup.qml">import QtQuick
import QtQuick.Controls
import Quickshell
import Quickshell.Widgets
import qs.Settings

// Main container that manages multiple notification popups for different monitors
Item {
    id: notificationManager
    anchors.fill: parent

    // Get list of available monitors/screens
    property var monitors: Quickshell.screens || []
    
    // Component.onCompleted: {
    //     console.log(&quot;[NotificationPopup] Initialized with&quot;, monitors.length, &quot;monitors&quot;);
    //     for (let i = 0; i &lt; monitors.length; i++) {
    //         console.log(&quot;[NotificationPopup] Monitor&quot;, i, &quot;:&quot;, monitors[i].name);
    //     }
    // }
    
    // Global visibility state for all notification popups
    property bool notificationsVisible: true
    
    function togglePopup(): void {
        console.log(&quot;[NotificationManager] Current state: &quot; + notificationsVisible);
        notificationsVisible = !notificationsVisible;
        console.log(&quot;[NotificationManager] New state: &quot; + notificationsVisible);
    }
    
    function addNotification(notification): void {
        console.log(&quot;[NotificationPopup] Adding notification to popup manager&quot;);
        // Add notification to all monitor popups
        for (let i = 0; i &lt; children.length; i++) {
            let child = children[i];
            if (child.addNotification) {
                child.addNotification(notification);
            }
        }
    }

    // Create a notification popup for each monitor
    Repeater {
        model: notificationManager.monitors
        delegate: Item {
            id: delegateItem
            
            // Make addNotification accessible from the Item level
            function addNotification(notification) {
                if (panelWindow) {
                    panelWindow.addNotification(notification);
                }
            }
            
            PanelWindow {
                id: panelWindow
                implicitWidth: 350
                implicitHeight: Math.max(notificationColumn.height, 0)
                color: &quot;transparent&quot;
                visible: notificationManager.notificationsVisible &amp;&amp; notificationModel.count &gt; 0 &amp;&amp; shouldShowOnThisMonitor
                screen: modelData
                focusable: false

                property bool barVisible: true
                property bool notificationsVisible: notificationManager.notificationsVisible
                
                // Check if this monitor should show notifications - make it reactive to settings changes
                property bool shouldShowOnThisMonitor: {
                    let notificationMonitors = Settings.settings.notificationMonitors || [];
                    let currentScreenName = modelData ? modelData.name : &quot;&quot;;
                    // Show notifications on all monitors if notificationMonitors is empty or contains &quot;*&quot;
                    let shouldShow = notificationMonitors.length === 0 || 
                           notificationMonitors.includes(&quot;*&quot;) || 
                           notificationMonitors.includes(currentScreenName);
                    // console.log(&quot;[NotificationPopup] Monitor&quot;, currentScreenName, &quot;should show:&quot;, shouldShow, &quot;monitors:&quot;, JSON.stringify(notificationMonitors));
                    return shouldShow;
                }

                // Watch for changes in notification monitors setting
                Connections {
                    target: Settings.settings
                    function onNotificationMonitorsChanged() {
                        // Settings changed, visibility will update automatically
                    }
                }

                anchors.top: true
                anchors.right: true
                margins.top: 6
                margins.right: 6

                ListModel {
                    id: notificationModel
                }

                property int maxVisible: 5
                property int spacing: 5

                function addNotification(notification) {
                    console.log(&quot;[NotificationPopup] Adding notification to monitor popup:&quot;, notification.appName);
                    notificationModel.insert(0, {
                        id: notification.id,
                        appName: notification.appName || &quot;Notification&quot;,
                        summary: notification.summary || &quot;&quot;,
                        body: notification.body || &quot;&quot;,
                        urgency: notification.urgency || 0,
                        rawNotification: notification,
                        appeared: false,
                        dismissed: false
                    });

                    while (notificationModel.count &gt; maxVisible) {
                        notificationModel.remove(notificationModel.count - 1);
                    }
                }

                function dismissNotificationById(id) {
                    for (var i = 0; i &lt; notificationModel.count; i++) {
                        if (notificationModel.get(i).id === id) {
                            dismissNotificationByIndex(i);
                            break;
                        }
                    }
                }

                function dismissNotificationByIndex(index) {
                    if (index &gt;= 0 &amp;&amp; index &lt; notificationModel.count) {
                        var notif = notificationModel.get(index);
                        if (!notif.dismissed) {
                            notificationModel.set(index, {
                                id: notif.id,
                                appName: notif.appName,
                                summary: notif.summary,
                                body: notif.body,
                                rawNotification: notif.rawNotification,
                                appeared: notif.appeared,
                                dismissed: true
                            });
                        }
                    }
                }

                Column {
                    id: notificationColumn
                    anchors.right: parent.right
                    spacing: panelWindow.spacing
                    width: parent.width
                    clip: false

                    Repeater {
                        id: notificationRepeater
                        model: notificationModel

                        delegate: Rectangle {
                            id: notificationDelegate
                            width: parent.width
                            color: Theme.backgroundPrimary
                            radius: 20
                            border.color: model.urgency == 2 ? Theme.warning : Theme.outline
                            border.width: 1

                            property bool appeared: model.appeared
                            property bool dismissed: model.dismissed
                            property var rawNotification: model.rawNotification

                            x: appeared ? 0 : width
                            opacity: dismissed ? 0 : 1
                            height: dismissed ? 0 : Math.max(contentRow.height, 60) + 20

                            Row {
                                id: contentRow
                                anchors.centerIn: parent
                                spacing: 10
                                width: parent.width - 20

                                // Circular Icon container with border
                                Rectangle {
                                    id: iconBackground
                                    width: 36
                                    height: 36
                                    radius: width / 2
                                    color: Theme.accentPrimary
                                    anchors.verticalCenter: parent.verticalCenter
                                    border.color: Qt.darker(Theme.accentPrimary, 1.2)
                                    border.width: 1.5

                                    // Priority order for notification icons: image &gt; appIcon &gt; icon
                                    property var iconSources: [rawNotification?.image || &quot;&quot;, rawNotification?.appIcon || &quot;&quot;, rawNotification?.icon || &quot;&quot;]

                                    // Load notification icon with fallback handling
                                    IconImage {
                                        id: iconImage
                                        anchors.fill: parent
                                        anchors.margins: 4
                                        asynchronous: true
                                        backer.fillMode: Image.PreserveAspectFit
                                        source: {
                                            // Try each icon source in priority order
                                            for (var i = 0; i &lt; iconBackground.iconSources.length; i++) {
                                                var icon = iconBackground.iconSources[i];
                                                if (!icon)
                                                    continue;

                                                // Handle special path format from some notifications
                                                if (icon.includes(&quot;?path=&quot;)) {
                                                    const [name, path] = icon.split(&quot;?path=&quot;);
                                                    const fileName = name.substring(name.lastIndexOf(&quot;/&quot;) + 1);
                                                    return `file://${path}/${fileName}`;
                                                }

                                                // Handle absolute file paths
                                                if (icon.startsWith(&apos;/&apos;)) {
                                                    return &quot;file://&quot; + icon;
                                                }

                                                return icon;
                                            }
                                            return &quot;&quot;;
                                        }
                                        visible: status === Image.Ready &amp;&amp; source.toString() !== &quot;&quot;
                                    }

                                    // Fallback: show first letter of app name when no icon available
                                    Text {
                                        anchors.centerIn: parent
                                        visible: !iconImage.visible
                                        text: model.appName ? model.appName.charAt(0).toUpperCase() : &quot;?&quot;
                                        font.family: Theme.fontFamily
                                        font.pixelSize: Theme.fontSizeBody
                                        font.bold: true
                                        color: Theme.backgroundPrimary
                                    }
                                }

                                Column {
                                    width: contentRow.width - iconBackground.width - 10
                                    spacing: 5

                                    Text {
                                        text: model.appName
                                        width: parent.width
                                        color: Theme.textPrimary
                                        font.family: Theme.fontFamily
                                        font.bold: true
                                        font.pixelSize: Theme.fontSizeSmall
                                        elide: Text.ElideRight
                                    }
                                    Text {
                                        text: model.summary
                                        width: parent.width
                                        color: &quot;#eeeeee&quot;
                                        font.family: Theme.fontFamily
                                        font.pixelSize: Theme.fontSizeSmall
                                        wrapMode: Text.Wrap
                                        visible: text !== &quot;&quot;
                                    }
                                    Text {
                                        text: model.body
                                        width: parent.width
                                        color: &quot;#cccccc&quot;
                                        font.family: Theme.fontFamily
                                        font.pixelSize: Theme.fontSizeCaption
                                        wrapMode: Text.Wrap
                                        visible: text !== &quot;&quot;
                                    }
                                }
                            }

                            Timer {
                                interval: 4000
                                running: !dismissed
                                repeat: false
                                onTriggered: {
                                    dismissAnimation.start();
                                    if (rawNotification)
                                        rawNotification.expire();
                                }
                            }

                            MouseArea {
                                anchors.fill: parent
                                onClicked: {
                                    dismissAnimation.start();
                                    if (rawNotification)
                                        rawNotification.dismiss();
                                }
                            }

                            ParallelAnimation {
                                id: dismissAnimation
                                NumberAnimation {
                                    target: notificationDelegate
                                    property: &quot;opacity&quot;
                                    to: 0
                                    duration: 150
                                }
                                NumberAnimation {
                                    target: notificationDelegate
                                    property: &quot;height&quot;
                                    to: 0
                                    duration: 150
                                }
                                NumberAnimation {
                                    target: notificationDelegate
                                    property: &quot;x&quot;
                                    to: width
                                    duration: 150
                                    easing.type: Easing.InQuad
                                }
                                onFinished: {
                                    for (let i = 0; i &lt; notificationModel.count; i++) {
                                        if (notificationModel.get(i).id === notificationDelegate.id) {
                                            notificationModel.remove(i);
                                            break;
                                        }
                                    }
                                }
                            }

                            ParallelAnimation {
                                id: appearAnimation
                                NumberAnimation {
                                    target: notificationDelegate
                                    property: &quot;opacity&quot;
                                    to: 1
                                    duration: 150
                                }
                                NumberAnimation {
                                    target: notificationDelegate
                                    property: &quot;height&quot;
                                    to: Math.max(contentRow.height, 60) + 20
                                    duration: 150
                                }
                                NumberAnimation {
                                    target: notificationDelegate
                                    property: &quot;x&quot;
                                    to: 0
                                    duration: 150
                                    easing.type: Easing.OutQuad
                                }
                            }

                            Timer {
                                id: appearTimer
                                interval: 10
                                repeat: false
                                onTriggered: {
                                    appearAnimation.start();
                                }
                            }

                            Component.onCompleted: {
                                if (!appeared) {
                                    opacity = 0;
                                    height = 0;
                                    x = width;
                                    // Small delay to ensure contentRow has proper height
                                    appearTimer.start();
                                    for (let i = 0; i &lt; notificationModel.count; i++) {
                                        if (notificationModel.get(i).id === notificationDelegate.id) {
                                            var oldItem = notificationModel.get(i);
                                            notificationModel.set(i, {
                                                id: oldItem.id,
                                                appName: oldItem.appName,
                                                summary: oldItem.summary,
                                                body: oldItem.body,
                                                rawNotification: oldItem.rawNotification,
                                                appeared: true,
                                                read: oldItem.read,
                                                dismissed: oldItem.dismissed
                                            });
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Connections {
                    target: Quickshell
                    function onScreensChanged() {
                        if (panelWindow.screen) {
                            x = panelWindow.screen.width - panelWindow.width - 20;
                        }
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Components/UnitSelector.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings


Rectangle {
    id: root
    width: 64 * Theme.scale(screen)
    height: 32 * Theme.scale(screen)
    radius: 16
    color: Theme.surfaceVariant
    border.color: Theme.outline
    border.width: 1 * Theme.scale(screen)

    property bool useFahrenheit: Settings.settings.useFahrenheit
    
    Rectangle {
        id: slider
        width: parent.width / 2 - 4 * Theme.scale(screen)
        height: parent.height - 4 * Theme.scale(screen)
        radius: 14
        color: Theme.accentPrimary
        x: 2 + (useFahrenheit ? parent.width / 2 : 0)
        y: 2

        Behavior on x {
            NumberAnimation {
                duration: 200
                easing.type: Easing.OutCubic
            }
        }
    }

    
    Row {
        anchors.fill: parent
        spacing: 0

        
        Item {
            width: parent.width / 2
            height: parent.height

            Text {
                anchors.centerIn: parent
                text: &quot;°C&quot;
                font.pixelSize: 13 * Theme.scale(screen)
                font.bold: !useFahrenheit
                color: !useFahrenheit ? Theme.onAccent : Theme.textPrimary
                
                Behavior on color {
                    ColorAnimation { duration: 200 }
                }
            }

            MouseArea {
                anchors.fill: parent
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (useFahrenheit) {
                        Settings.settings.useFahrenheit = false;
                    }
                }
            }
        }

        
        Item {
            width: parent.width / 2
            height: parent.height

            Text {
                anchors.centerIn: parent
                text: &quot;°F&quot;
                font.pixelSize: 13 * Theme.scale(screen)
                font.bold: useFahrenheit
                color: useFahrenheit ? Theme.onAccent : Theme.textPrimary
                
                Behavior on color {
                    ColorAnimation { duration: 200 }
                }
            }

            MouseArea {
                anchors.fill: parent
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (!useFahrenheit) {
                        Settings.settings.useFahrenheit = true;
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Components/WallpaperSelector.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import QtQuick.Layouts
import qs.Components
import qs.Services
import qs.Settings

Rectangle {
    id: wallpaperOverlay
    focus: true

    // Function to show the overlay and load wallpapers
    function show() {
        // Ensure wallpapers are loaded
        WallpaperManager.loadWallpapers();
        wallpaperOverlay.visible = true;
        wallpaperOverlay.forceActiveFocus();
    }

    // Function to hide the overlay
    function hide() {
        wallpaperOverlay.visible = false;
    }

    color: Theme.backgroundPrimary
    visible: false
    z: 1000

    // Handle escape key to close
    Keys.onPressed: function(event) {
        if (event.key === Qt.Key_Escape) {
            wallpaperOverlay.hide();
            event.accepted = true;
        }
    }

    // Click outside to close
    MouseArea {
        anchors.fill: parent
        onClicked: {
            wallpaperOverlay.hide();
        }
    }

    // Content area that stops event propagation
    MouseArea {
        // Stop event propagation

        anchors.fill: parent
        anchors.margins: 24
        onClicked: {
        }

        ColumnLayout {
            anchors.fill: parent
            spacing: 0



            // Wallpaper Grid
            Item {
                Layout.fillWidth: true
                Layout.fillHeight: true
                clip: true

                ScrollView {
                    anchors.fill: parent
                    clip: true
                    ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
                    ScrollBar.vertical.policy: ScrollBar.AsNeeded

                    GridView {
                        id: wallpaperGrid

                        anchors.fill: parent
                        cellWidth: Math.max(120 * Theme.scale(screen), (parent.width / 3) - 12 * Theme.scale(screen))
                        cellHeight: cellWidth * 0.6
                        model: WallpaperManager.wallpaperList
                        cacheBuffer: 64
                        leftMargin: 8
                        rightMargin: 8
                        topMargin: 8
                        bottomMargin: 8

                        delegate: Item {
                            width: wallpaperGrid.cellWidth - 8 * Theme.scale(screen)
                            height: wallpaperGrid.cellHeight - 8 * Theme.scale(screen)

                            Rectangle {
                                id: wallpaperItem

                                anchors.fill: parent
                                anchors.margins: 3
                                color: Theme.surface
                                radius: 12
                                border.color: Settings.settings.currentWallpaper === modelData ? Theme.accentPrimary : Theme.outline
                                border.width: 2 * Theme.scale(screen)

                                Image {
                                    id: wallpaperImage

                                    anchors.fill: parent
                                    anchors.margins: 2
                                    source: modelData
                                    fillMode: Image.PreserveAspectCrop
                                    asynchronous: true
                                    cache: true
                                    smooth: true
                                    mipmap: true
                                    sourceSize.width: Math.min(width, 480 * Theme.scale(screen))
                                    sourceSize.height: Math.min(height, 270 * Theme.scale(screen))
                                    opacity: (wallpaperImage.status == Image.Ready) ? 1 : 0
                                    // Apply circular mask for rounded corners
                                    layer.enabled: true

                                    Behavior on opacity {
                                        NumberAnimation {
                                            duration: 300
                                            easing.type: Easing.OutCubic
                                        }

                                    }

                                    layer.effect: MultiEffect {
                                        maskEnabled: true
                                        maskSource: mask
                                    }

                                }

                                Item {
                                    id: mask

                                    anchors.fill: wallpaperImage
                                    layer.enabled: true
                                    visible: false

                                    Rectangle {
                                        width: wallpaperImage.width
                                        height: wallpaperImage.height
                                        radius: 12
                                    }

                                }

                                MouseArea {
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    cursorShape: Qt.PointingHandCursor
                                    onClicked: {
                                        WallpaperManager.changeWallpaper(modelData);
                                    }
                                }

                            }

                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/About.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    property string latestVersion: &quot;Unknown&quot;
    property string currentVersion: &quot;Unknown&quot;
    property var contributors: []
    property string githubDataPath: Settings.settingsDir + &quot;github_data.json&quot;

    function loadFromFile() {
        const now = Date.now();
        const data = githubData;
        if (!data.timestamp || (now - data.timestamp &gt; 3.6e+06)) {
            console.log(&quot;[About] Cache expired or missing, fetching new data from GitHub...&quot;);
            fetchFromGitHub();
            return ;
        }
        console.log(&quot;[About] Loading cached GitHub data (age: &quot; + Math.round((now - data.timestamp) / 60000) + &quot; minutes)&quot;);
        if (data.version)
            root.latestVersion = data.version;

        if (data.contributors)
            root.contributors = data.contributors;

    }

    function fetchFromGitHub() {
        versionProcess.running = true;
        contributorsProcess.running = true;
    }

    function saveData() {
        githubData.timestamp = Date.now();
        Qt.callLater(() =&gt; {
            githubDataFile.writeAdapter();
        });
    }

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    Process {
        id: currentVersionProcess

        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;cd &quot; + Quickshell.shellDir + &quot; &amp;&amp; git describe --tags --abbrev=0 2&gt;/dev/null || echo &apos;Unknown&apos;&quot;]
        Component.onCompleted: {
            running = true;
        }

        stdout: StdioCollector {
            onStreamFinished: {
                const version = text.trim();
                if (version &amp;&amp; version !== &quot;Unknown&quot;) {
                    root.currentVersion = version;
                } else {
                    currentVersionProcess.command = [&quot;sh&quot;, &quot;-c&quot;, &quot;cd &quot; + Quickshell.shellDir + &quot; &amp;&amp; cat package.json 2&gt;/dev/null | grep &apos;\&quot;version\&quot;&apos; | cut -d&apos;\&quot;&apos; -f4 || echo &apos;Unknown&apos;&quot;];
                    currentVersionProcess.running = true;
                }
            }
        }

    }

    FileView {
        id: githubDataFile

        path: root.githubDataPath
        blockLoading: true
        printErrors: true
        watchChanges: true
        onFileChanged: githubDataFile.reload()
        onLoaded: loadFromFile()
        onLoadFailed: function(error) {
            console.log(&quot;GitHub data file doesn&apos;t exist yet, creating it...&quot;);
            githubData.version = &quot;Unknown&quot;;
            githubData.contributors = [];
            githubData.timestamp = 0;
            githubDataFile.writeAdapter();
            fetchFromGitHub();
        }
        Component.onCompleted: {
            if (path)
                reload();

        }

        JsonAdapter {
            id: githubData

            property string version: &quot;Unknown&quot;
            property var contributors: []
            property double timestamp: 0
        }

    }

    Process {
        id: versionProcess

        command: [&quot;curl&quot;, &quot;-s&quot;, &quot;https://api.github.com/repos/Ly-sec/Noctalia/releases/latest&quot;]

        stdout: StdioCollector {
            onStreamFinished: {
                try {
                    const data = JSON.parse(text);
                    if (data.tag_name) {
                        const version = data.tag_name;
                        githubData.version = version;
                        root.latestVersion = version;
                        console.log(&quot;[About] Latest version fetched from GitHub:&quot;, version);
                    } else {
                        console.log(&quot;No tag_name in GitHub response&quot;);
                    }
                    saveData();
                } catch (e) {
                    console.error(&quot;Failed to parse version:&quot;, e);
                }
            }
        }

    }

    Process {
        id: contributorsProcess

        command: [&quot;curl&quot;, &quot;-s&quot;, &quot;https://api.github.com/repos/Ly-sec/Noctalia/contributors?per_page=100&quot;]

        stdout: StdioCollector {
            onStreamFinished: {
                try {
                    const data = JSON.parse(text);
                    githubData.contributors = data || [];
                    root.contributors = githubData.contributors;
                    console.log(&quot;[About] Contributors data fetched from GitHub:&quot;, githubData.contributors.length, &quot;contributors&quot;);
                    saveData();
                } catch (e) {
                    console.error(&quot;Failed to parse contributors:&quot;, e);
                    root.contributors = [];
                }
            }
        }

    }

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Noctalia: quiet by design&quot;
                font.pixelSize: 24 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.alignment: Qt.AlignCenter
                Layout.bottomMargin: 8 * Theme.scale(screen)
            }

            Text {
                text: &quot;It may just be another quickshell setup but it won&apos;t get in your way.&quot;
                font.pixelSize: 14 * Theme.scale(screen)
                color: Theme.textSecondary
                Layout.alignment: Qt.AlignCenter
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            GridLayout {
                Layout.alignment: Qt.AlignCenter
                columns: 2
                rowSpacing: 4
                columnSpacing: 8

                Text {
                    text: &quot;Latest Version:&quot;
                    font.pixelSize: 16 * Theme.scale(screen)
                    color: Theme.textSecondary
                    Layout.alignment: Qt.AlignRight
                }

                Text {
                    text: root.latestVersion
                    font.pixelSize: 16 * Theme.scale(screen)
                    color: Theme.textPrimary
                    font.bold: true
                }

                Text {
                    text: &quot;Installed Version:&quot;
                    font.pixelSize: 16 * Theme.scale(screen)
                    color: Theme.textSecondary
                    Layout.alignment: Qt.AlignRight
                }

                Text {
                    text: root.currentVersion
                    font.pixelSize: 16 * Theme.scale(screen)
                    color: Theme.textPrimary
                    font.bold: true
                }

            }

            Rectangle {
                Layout.alignment: Qt.AlignCenter
                Layout.topMargin: 8
                Layout.preferredWidth: updateText.implicitWidth + 46
                Layout.preferredHeight: 32
                radius: 20
                color: updateArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                border.color: Theme.accentPrimary
                border.width: 1
                visible: {
                    if (root.currentVersion === &quot;Unknown&quot; || root.latestVersion === &quot;Unknown&quot;)
                        return false;

                    const latest = root.latestVersion.replace(&quot;v&quot;, &quot;&quot;).split(&quot;.&quot;);
                    const current = root.currentVersion.replace(&quot;v&quot;, &quot;&quot;).split(&quot;.&quot;);
                    for (let i = 0; i &lt; Math.max(latest.length, current.length); i++) {
                        const l = parseInt(latest[i] || &quot;0&quot;);
                        const c = parseInt(current[i] || &quot;0&quot;);
                        if (l &gt; c)
                            return true;

                        if (l &lt; c)
                            return false;

                    }
                    return false;
                }

                RowLayout {
                    anchors.centerIn: parent
                    spacing: 8

                    Text {
                        text: &quot;system_update&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 18 * Theme.scale(screen)
                        color: updateArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                    }

                    Text {
                        id: updateText

                        text: &quot;Download latest release&quot;
                        font.pixelSize: 14 * Theme.scale(screen)
                        color: updateArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                    }

                }

                MouseArea {
                    id: updateArea

                    anchors.fill: parent
                    hoverEnabled: true
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Quickshell.execDetached([&quot;xdg-open&quot;, &quot;https://github.com/Ly-sec/Noctalia/releases/latest&quot;]);
                    }
                }

            }

            // Separator
            Rectangle {
                Layout.fillWidth: true
                Layout.topMargin: 26
                Layout.bottomMargin: 18
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Theme.outline
                opacity: 0.3
            }

            ColumnLayout {
                Layout.fillWidth: true
                Layout.fillHeight: true
                Layout.leftMargin: 32
                Layout.rightMargin: 32
                Layout.alignment: Qt.AlignCenter
                spacing: 16

                RowLayout {
                    Layout.alignment: Qt.AlignCenter
                    spacing: 8

                    Text {
                        text: &quot;Contributors&quot;
                        font.pixelSize: 18 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;(&quot; + root.contributors.length + &quot;)&quot;
                        font.pixelSize: 14 * Theme.scale(screen)
                        color: Theme.textSecondary
                    }

                }

                GridView {
                    id: contributorsGrid

                    Layout.leftMargin: 32
                    Layout.rightMargin: 32
                    Layout.alignment: Qt.AlignCenter
                    width: 200 * 3
                    height: 300
                    cellWidth: 200
                    cellHeight: 100
                    model: root.contributors

                    delegate: Rectangle {
                        width: contributorsGrid.cellWidth - 8
                        height: contributorsGrid.cellHeight - 4
                        radius: 20
                        color: contributorArea.containsMouse ? Theme.highlight : &quot;transparent&quot;

                        RowLayout {
                            anchors.fill: parent
                            anchors.margins: 8
                            spacing: 12

                            Item {
                                Layout.alignment: Qt.AlignVCenter
                                Layout.preferredWidth: 40
                                Layout.preferredHeight: 40

                                Image {
                                    id: avatarImage

                                    anchors.fill: parent
                                    source: modelData.avatar_url || &quot;&quot;
                                    sourceSize: Qt.size(80, 80)
                                    visible: false
                                    mipmap: true
                                    smooth: true
                                    asynchronous: true
                                    fillMode: Image.PreserveAspectCrop
                                    cache: true
                                }

                                MultiEffect {
                                    anchors.fill: parent
                                    source: avatarImage
                                    maskEnabled: true
                                    maskSource: mask
                                }

                                Item {
                                    id: mask

                                    anchors.fill: parent
                                    layer.enabled: true
                                    visible: false

                                    Rectangle {
                                        anchors.fill: parent
                                        radius: avatarImage.width / 2
                                    }

                                }

                                Text {
                                    anchors.centerIn: parent
                                    text: &quot;person&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 24 * Theme.scale(screen)
                                    color: contributorArea.containsMouse ? Theme.backgroundPrimary : Theme.textPrimary
                                    visible: !avatarImage.source || avatarImage.status !== Image.Ready
                                }

                            }

                            ColumnLayout {
                                spacing: 4
                                Layout.alignment: Qt.AlignVCenter
                                Layout.fillWidth: true

                                Text {
                                    text: modelData.login || &quot;Unknown&quot;
                                    font.pixelSize: 13 * Theme.scale(screen)
                                    color: contributorArea.containsMouse ? Theme.backgroundPrimary : Theme.textPrimary
                                    elide: Text.ElideRight
                                    Layout.fillWidth: true
                                }

                                Text {
                                    text: (modelData.contributions || 0) + &quot; commits&quot;
                                    font.pixelSize: 11 * Theme.scale(screen)
                                    color: contributorArea.containsMouse ? Theme.backgroundPrimary : Theme.textSecondary
                                }

                            }

                        }

                        MouseArea {
                            id: contributorArea

                            anchors.fill: parent
                            hoverEnabled: true
                            cursorShape: Qt.PointingHandCursor
                            onClicked: {
                                if (modelData.html_url)
                                    Quickshell.execDetached([&quot;xdg-open&quot;, modelData.html_url]);

                            }
                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Bar.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Elements&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ToggleOption {
                label: &quot;Show Active Window&quot;
                description: &quot;Display the title of the currently focused window below the bar&quot;
                value: Settings.settings.showActiveWindow
                onToggled: function() {
                    Settings.settings.showActiveWindow = !Settings.settings.showActiveWindow;
                }
            }

            ToggleOption {
                label: &quot;Show Active Window Icon&quot;
                description: &quot;Display the icon of the currently focused window&quot;
                value: Settings.settings.showActiveWindowIcon
                onToggled: function() {
                    Settings.settings.showActiveWindowIcon = !Settings.settings.showActiveWindowIcon;
                }
            }

            ToggleOption {
                label: &quot;Show System Info&quot;
                description: &quot;Display system information (CPU, RAM, Temperature)&quot;
                value: Settings.settings.showSystemInfoInBar
                onToggled: function() {
                    Settings.settings.showSystemInfoInBar = !Settings.settings.showSystemInfoInBar;
                }
            }

            ToggleOption {
                label: &quot;Show Taskbar&quot;
                description: &quot;Display a taskbar showing currently open windows&quot;
                value: Settings.settings.showTaskbar
                onToggled: function() {
                    Settings.settings.showTaskbar = !Settings.settings.showTaskbar;
                }
            }

            ToggleOption {
                label: &quot;Show Media&quot;
                description: &quot;Display media controls and information&quot;
                value: Settings.settings.showMediaInBar
                onToggled: function() {
                    Settings.settings.showMediaInBar = !Settings.settings.showMediaInBar;
                }
            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Display.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import qs.Components
import qs.Settings
import qs.Components

ColumnLayout {
    id: root

    // Get list of available monitors/screens
    property var monitors: Quickshell.screens || []

    // Sorted monitors by name
    property var sortedMonitors: {
        let sorted = [...monitors];
        sorted.sort((a, b) =&gt; {
            let nameA = a.name || &quot;Unknown&quot;;
            let nameB = b.name || &quot;Unknown&quot;;
            return nameA.localeCompare(nameB);
        });
        return sorted;
    }

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

        // Staged scale overrides; applied via the Apply button
        property var pendingScaleOverrides: ({})

    function orientationToString(o) {
        // Map common Qt orientations
        if (o === Qt.LandscapeOrientation) return &quot;Landscape&quot;;
        if (o === Qt.PortraitOrientation) return &quot;Portrait&quot;;
        if (o === Qt.InvertedLandscapeOrientation) return &quot;Inverted Landscape&quot;;
        if (o === Qt.InvertedPortraitOrientation) return &quot;Inverted Portrait&quot;;
        try {
            return String(o);
        } catch (e) {
            return &quot;Unknown&quot;;
        }
    }

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Monitor Selection&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            Text {
                text: &quot;Configure the Bar, Dock and Notifications for each monitor. Details below help differentiate similar displays.&quot;
                font.pixelSize: 12 * Theme.scale(screen)
                color: Theme.textSecondary
                wrapMode: Text.WordWrap
                Layout.fillWidth: true
                Layout.bottomMargin: 12 * Theme.scale(screen)
            }

            ColumnLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.topMargin: 8
                Layout.bottomMargin: 8
                visible: false

                RowLayout {
                    spacing: 8
                    Layout.fillWidth: true

                    ColumnLayout {
                        spacing: 4
                        Layout.fillWidth: true

                        Text {
                            text: &quot;Bar Monitors&quot;
                            font.pixelSize: 13 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Select which monitors to display the top panel/bar on&quot;
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }
                    }
                }

        
                Flow {
                    Layout.fillWidth: true
                    spacing: 8

                    Repeater {
                        model: root.sortedMonitors
                        delegate: Rectangle {
                            id: barCheckbox
                            property bool isChecked: false
                            
                            Component.onCompleted: {
                                // Initialize checkbox state from settings
                                let monitors = Settings.settings.barMonitors || [];
                                isChecked = monitors.includes(modelData.name);
                            }
                            
                            width: checkboxContent.implicitWidth + 16
                            height: 32
                            radius: 16
                            color: isChecked ? Theme.accentPrimary : Theme.surfaceVariant
                            border.color: isChecked ? Theme.accentPrimary : Theme.outline
                            border.width: 1

                            RowLayout {
                                id: checkboxContent
                                anchors.centerIn: parent
                                spacing: 6

                                Text {
                                    text: barCheckbox.isChecked ? &quot;check&quot; : &quot;&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 14 * Theme.scale(screen)
                                    color: barCheckbox.isChecked ? Theme.onAccent : Theme.textSecondary
                                    visible: barCheckbox.isChecked
                                }

                                Text {
                                    text: modelData.name || &quot;Unknown&quot;
                                    font.pixelSize: 12 * Theme.scale(screen)
                                    color: barCheckbox.isChecked ? Theme.onAccent : Theme.textPrimary
                                }
                            }

                            MouseArea {
                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    isChecked = !isChecked;
                                    
                                    // Update settings array when checkbox is toggled
                                    let monitors = Settings.settings.barMonitors || [];
                                    monitors = [...monitors]; // Create copy to trigger reactivity
                                    
                                    if (isChecked) {
                                        if (!monitors.includes(modelData.name)) {
                                            monitors.push(modelData.name);
                                        }
                                    } else {
                                        monitors = monitors.filter(name =&gt; name !== modelData.name);
                                    }
                                    
                                    Settings.settings.barMonitors = monitors;
                                    console.log(&quot;Bar monitors updated:&quot;, JSON.stringify(monitors));
                                }
                            }
                        }
                    }
                }
            }


            ColumnLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.topMargin: 8
                Layout.bottomMargin: 8
                visible: false

                RowLayout {
                    spacing: 8
                    Layout.fillWidth: true

                    ColumnLayout {
                        spacing: 4
                        Layout.fillWidth: true

                        Text {
                            text: &quot;Dock Monitors&quot;
                            font.pixelSize: 13 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Select which monitors to display the application dock on&quot;
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }
                    }
                }


                Flow {
                    Layout.fillWidth: true
                    spacing: 8

                    Repeater {
                        model: root.sortedMonitors
                        delegate: Rectangle {
                            id: dockCheckbox
                            property bool isChecked: false
                            
                            Component.onCompleted: {
                                // Initialize with current settings
                                let monitors = Settings.settings.dockMonitors || [];
                                isChecked = monitors.includes(modelData.name);
                            }
                            
                            width: checkboxContent.implicitWidth + 16
                            height: 32
                            radius: 16
                            color: isChecked ? Theme.accentPrimary : Theme.surfaceVariant
                            border.color: isChecked ? Theme.accentPrimary : Theme.outline
                            border.width: 1

                            RowLayout {
                                id: checkboxContent
                                anchors.centerIn: parent
                                spacing: 6

                                Text {
                                    text: dockCheckbox.isChecked ? &quot;check&quot; : &quot;&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 14 * Theme.scale(screen)
                                    color: dockCheckbox.isChecked ? Theme.onAccent : Theme.textSecondary
                                    visible: dockCheckbox.isChecked
                                }

                                Text {
                                    text: modelData.name || &quot;Unknown&quot;
                                    font.pixelSize: 12 * Theme.scale(screen)
                                    color: dockCheckbox.isChecked ? Theme.onAccent : Theme.textPrimary
                                }
                            }

                            MouseArea {
                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    // Toggle state immediately for UI responsiveness
                                    isChecked = !isChecked;
                                    
                                    // Update settings
                                    let monitors = Settings.settings.dockMonitors || [];
                                    monitors = [...monitors]; // Copy array
                                    
                                    if (isChecked) {
                                        // Add to array if not already there
                                        if (!monitors.includes(modelData.name)) {
                                            monitors.push(modelData.name);
                                        }
                                    } else {
                                        // Remove from array
                                        monitors = monitors.filter(name =&gt; name !== modelData.name);
                                    }
                                    
                                    Settings.settings.dockMonitors = monitors;
                                    console.log(&quot;Dock monitors updated:&quot;, JSON.stringify(monitors));
                                }
                            }
                        }
                    }
                }
            }


            ColumnLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.topMargin: 8
                Layout.bottomMargin: 8
                visible: true
            // New per-monitor layout
            ColumnLayout {
                id: perMonitorLayout
                spacing: 12 * Theme.scale(screen)
                Layout.fillWidth: true

                Repeater {
                    model: root.sortedMonitors
                    delegate: Rectangle {
                        id: monitorCard
                        // Stable local state per monitor to avoid binding glitches
                        property string monitorName: modelData.name || &quot;&quot;
                        property bool barChecked: (Settings.settings.barMonitors || []).includes(monitorName)
                        property bool dockChecked: (Settings.settings.dockMonitors || []).includes(monitorName)
                        property bool notifChecked: (Settings.settings.notificationMonitors || []).includes(monitorName)
                        Layout.fillWidth: true
                        radius: 12 * Theme.scale(screen)
                        color: Theme.surface
                        border.color: Theme.outline
                        border.width: 1
                        implicitHeight: contentCol.implicitHeight + 24 * Theme.scale(screen)

                        ColumnLayout {
                            id: contentCol
                            anchors.fill: parent
                            anchors.margins: 12 * Theme.scale(screen)
                            spacing: 8 * Theme.scale(screen)

                            // Monitor title
                            Text {
                                text: modelData.name || &quot;Unknown&quot;
                                font.pixelSize: 16 * Theme.scale(screen)
                                font.bold: true
                                color: Theme.accentPrimary
                            }

                            // Details laid out as four columns: Model, Position, Resolution, Orientation
                            GridLayout {
                                columns: 4
                                columnSpacing: 16 * Theme.scale(screen)
                                rowSpacing: 2 * Theme.scale(screen)

                                // Model
                                ColumnLayout {
                                    spacing: 2 * Theme.scale(screen)
                                    Text { text: &quot;Model&quot;; color: Theme.textSecondary; font.pixelSize: 10 * Theme.scale(screen) }
                                    Text { text: modelData.model || &quot;-&quot;; color: Theme.textPrimary; font.pixelSize: 12 * Theme.scale(screen) }
                                }

                                // Position
                                ColumnLayout {
                                    spacing: 2 * Theme.scale(screen)
                                    Text { text: &quot;Position&quot;; color: Theme.textSecondary; font.pixelSize: 10 * Theme.scale(screen) }
                                    Text { text: `(${(modelData.x || 0)}, ${(modelData.y || 0)})`; color: Theme.textPrimary; font.pixelSize: 12 * Theme.scale(screen) }
                                }

                                // Resolution
                                ColumnLayout {
                                    spacing: 2 * Theme.scale(screen)
                                    Text { text: &quot;Resolution&quot;; color: Theme.textSecondary; font.pixelSize: 10 * Theme.scale(screen) }
                                    Text { text: `${(modelData.width || 0)}x${(modelData.height || 0)}`; color: Theme.textPrimary; font.pixelSize: 12 * Theme.scale(screen) }
                                }

                                // Orientation
                                ColumnLayout {
                                    spacing: 2 * Theme.scale(screen)
                                    Text { text: &quot;Orientation&quot;; color: Theme.textSecondary; font.pixelSize: 10 * Theme.scale(screen) }
                                    Text { text: orientationToString(modelData.orientation); color: Theme.textPrimary; font.pixelSize: 12 * Theme.scale(screen) }
                                }
                            }

                            // Bar toggle
                            ToggleOption {
                                screen: Screen // force current screen
                                label: &quot;Bar&quot;
                                description: &quot;Display the top bar on this monitor&quot;
                                value: monitorCard.barChecked
                                onToggled: function() {
                                    let monitors = Settings.settings.barMonitors || [];
                                    monitors = [...monitors];
                                    if (!monitorCard.barChecked) {
                                        if (!monitors.includes(monitorCard.monitorName)) monitors.push(monitorCard.monitorName);
                                        monitorCard.barChecked = true;
                                    } else {
                                        monitors = monitors.filter(name =&gt; name !== monitorCard.monitorName);
                                        monitorCard.barChecked = false;
                                    }
                                    Settings.settings.barMonitors = monitors;
                                }
                            }

                            // Dock toggle
                            ToggleOption {
                                screen: Screen // force current screen
                                label: &quot;Dock&quot;
                                description: &quot;Display the dock on this monitor&quot;
                                value: monitorCard.dockChecked
                                onToggled: function() {
                                    let monitors = Settings.settings.dockMonitors || [];
                                    monitors = [...monitors];
                                    if (!monitorCard.dockChecked) {
                                        if (!monitors.includes(monitorCard.monitorName)) monitors.push(monitorCard.monitorName);
                                        monitorCard.dockChecked = true;
                                    } else {
                                        monitors = monitors.filter(name =&gt; name !== monitorCard.monitorName);
                                        monitorCard.dockChecked = false;
                                    }
                                    Settings.settings.dockMonitors = monitors;
                                }
                            }

                            // Notification toggle
                            ToggleOption {
                                screen: Screen // force current screen
                                label: &quot;Notifications&quot;
                                description: &quot;Display notifications on this monitor&quot;
                                value: monitorCard.notifChecked
                                onToggled: function() {
                                    let monitors = Settings.settings.notificationMonitors || [];
                                    monitors = [...monitors];
                                    if (!monitorCard.notifChecked) {
                                        if (!monitors.includes(monitorCard.monitorName)) monitors.push(monitorCard.monitorName);
                                        monitorCard.notifChecked = true;
                                    } else {
                                        monitors = monitors.filter(name =&gt; name !== monitorCard.monitorName);
                                        monitorCard.notifChecked = false;
                                    }
                                    Settings.settings.notificationMonitors = monitors;
                                }
                            }

                            // Scale slider (auto-applies with debounce)
                            ColumnLayout {
                                Layout.fillWidth: true
                                spacing: 4 * Theme.scale(screen)
                                Text { text: &quot;Scale&quot;; color: Theme.textSecondary; font.pixelSize: 10 * Theme.scale(screen) }
                                RowLayout {
                                    Layout.fillWidth: true
                                    spacing: 8 * Theme.scale(screen)
                                    // Value read from settings override, default to Theme.scale(modelData)
                                    property real currentValue: (Settings.settings.monitorScaleOverrides &amp;&amp; Settings.settings.monitorScaleOverrides[monitorCard.monitorName] !== undefined) ? Settings.settings.monitorScaleOverrides[monitorCard.monitorName] : Theme.scale(modelData)
                                    // Debounce timer to avoid excessive reloads while dragging
                                    Timer {
                                        id: applyScaleTimer
                                        interval: 400
                                        repeat: false
                                        onTriggered: {
                                            let current = Settings.settings.monitorScaleOverrides || {};
                                            let merged = Object.assign({}, current);
                                            merged[monitorCard.monitorName] = scaleSlider.value;
                                            Settings.settings.monitorScaleOverrides = merged;
                                            //Quickshell.reload(true);
                                        }
                                    }
                                    // Reusable slider component (exact style from Wallpaper.qml)
                                    ThemedSlider {
                                        id: scaleSlider
                                        screen: Screen // force current screen
                                        Layout.fillWidth: true
                                        cutoutColor: Theme.surface
                                        from: 0.8
                                        to: 2.0
                                        stepSize: 0.05
                                        snapAlways: true
                                        value: parent.currentValue
                                        onMoved: {
                                            if (isFinite(value)) {
                                                parent.currentValue = value;
                                                applyScaleTimer.restart();
                                            }
                                        }
                                    }
                                    Text { text: parent.currentValue.toFixed(2); font.pixelSize: 12 * Theme.scale(screen); color: Theme.textPrimary; width: 36 }
                                    // Apply button removed; auto-apply enabled
                                }
                            }
                        }
                    }
                }
                // Apply-all button removed; per-monitor apply added next to each slider
            }
                RowLayout {
                    visible: false
                    spacing: 8
                    Layout.fillWidth: true

                    ColumnLayout {
                        spacing: 4
                        Layout.fillWidth: true

                        Text {
                            text: &quot;Notification Monitors&quot;
                            font.pixelSize: 13 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Select which monitors to display system notifications on&quot;
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }
                    }
                }


                Flow {
                    visible: false
                    Layout.fillWidth: true
                    spacing: 8

                    Repeater {
                        model: root.sortedMonitors
                        delegate: Rectangle {
                            id: notificationCheckbox
                            property bool isChecked: false
                            
                            Component.onCompleted: {
                                // Initialize with current settings
                                let monitors = Settings.settings.notificationMonitors || [];
                                isChecked = monitors.includes(modelData.name);
                            }
                            
                            width: checkboxContent.implicitWidth + 16
                            height: 32
                            radius: 16
                            color: isChecked ? Theme.accentPrimary : Theme.surfaceVariant
                            border.color: isChecked ? Theme.accentPrimary : Theme.outline
                            border.width: 1

                            RowLayout {
                                id: checkboxContent
                                anchors.centerIn: parent
                                spacing: 6

                                Text {
                                    text: notificationCheckbox.isChecked ? &quot;check&quot; : &quot;&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 14 * Theme.scale(screen)
                                    color: notificationCheckbox.isChecked ? Theme.onAccent : Theme.textSecondary
                                    visible: notificationCheckbox.isChecked
                                }

                                Text {
                                    text: modelData.name || &quot;Unknown&quot;
                                    font.pixelSize: 12 * Theme.scale(screen)
                                    color: notificationCheckbox.isChecked ? Theme.onAccent : Theme.textPrimary
                                }
                            }

                            MouseArea {
                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    // Toggle state immediately for UI responsiveness
                                    isChecked = !isChecked;
                                    
                                    // Update settings
                                    let monitors = Settings.settings.notificationMonitors || [];
                                    monitors = [...monitors]; // Copy array
                                    
                                    if (isChecked) {
                                        // Add to array if not already there
                                        if (!monitors.includes(modelData.name)) {
                                            monitors.push(modelData.name);
                                        }
                                    } else {
                                        // Remove from array
                                        monitors = monitors.filter(name =&gt; name !== modelData.name);
                                    }
                                    
                                    Settings.settings.notificationMonitors = monitors;
                                    console.log(&quot;Notification monitors updated:&quot;, JSON.stringify(monitors));
                                }
                            }
                        }
                    }
                }
            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/General.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Profile&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            Text {
                text: &quot;Profile Image&quot;
                font.pixelSize: 13 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 4 * Theme.scale(screen)
            }

            Text {
                text: &quot;Your profile picture displayed in various places throughout the shell&quot;
                font.pixelSize: 12 * Theme.scale(screen)
                color: Theme.textSecondary
                wrapMode: Text.WordWrap
                Layout.fillWidth: true
                Layout.bottomMargin: 4
            }

            RowLayout {
                spacing: 8 * Theme.scale(screen)
                Layout.fillWidth: true

                Rectangle {
                    width: 48 * Theme.scale(screen)
                    height: 48 * Theme.scale(screen)
                    radius: width * 0.5

                    Rectangle {
                        anchors.fill: parent
                        color: &quot;transparent&quot;
                        radius: width * 0.5
                        border.color: profileImageInput.activeFocus ? Theme.accentPrimary : Theme.outline
                        border.width: 2 * Theme.scale(screen)
                        z: 2
                    }

                    Avatar {
                    }

                }

                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 40 * Theme.scale(screen)
                    radius: 16 * Theme.scale(screen)
                    color: Theme.surfaceVariant
                    border.color: profileImageInput.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1 * Theme.scale(screen)

                    TextInput {
                        id: profileImageInput

                        anchors.fill: parent
                        anchors.leftMargin: 12 * Theme.scale(screen)
                        anchors.rightMargin: 12 * Theme.scale(screen)
                        anchors.topMargin: 6 * Theme.scale(screen)
                        anchors.bottomMargin: 6 * Theme.scale(screen)
                        text: Settings.settings.profileImage
                        font.pixelSize: 13 * Theme.scale(screen)
                        color: Theme.textPrimary
                        verticalAlignment: TextInput.AlignVCenter
                        clip: true
                        selectByMouse: true
                        activeFocusOnTab: true
                        inputMethodHints: Qt.ImhUrlCharactersOnly
                        onTextChanged: {
                            Settings.settings.profileImage = text;
                        }

                        MouseArea {
                            anchors.fill: parent
                            cursorShape: Qt.IBeamCursor
                            onClicked: profileImageInput.forceActiveFocus()
                        }

                    }

                }

            }

            // Separator
            Rectangle {
                Layout.fillWidth: true
                Layout.topMargin: 26 * Theme.scale(screen)
                Layout.bottomMargin: 18 * Theme.scale(screen)
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Theme.outline
                opacity: 0.3
            }

            Text {
                text: &quot;User Interface&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ToggleOption {
                label: &quot;Show Corners&quot;
                description: &quot;Display rounded corners on the edge of the screen&quot;
                value: Settings.settings.showCorners
                onToggled: function() {
                    Settings.settings.showCorners = !Settings.settings.showCorners;
                }
            }

            ToggleOption {
                label: &quot;Show Dock&quot;
                description: &quot;Display a dock at the bottom of the screen for quick access to applications&quot;
                value: Settings.settings.showDock
                onToggled: function() {
                    Settings.settings.showDock = !Settings.settings.showDock;
                }
            }

            ToggleOption {
                label: &quot;Dim Desktop&quot;
                description: &quot;Dim the desktop when panels or menus are open&quot;
                value: Settings.settings.dimPanels
                onToggled: function() {
                    Settings.settings.dimPanels = !Settings.settings.dimPanels;
                }
            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Misc.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Media&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ColumnLayout {
                spacing: 8
                Layout.fillWidth: true

                Text {
                    text: &quot;Visualizer Type&quot;
                    font.pixelSize: 13 * Theme.scale(screen)
                    font.bold: true
                    color: Theme.textPrimary
                }

                Text {
                    text: &quot;Choose the style of the audio visualizer&quot;
                    font.pixelSize: 12 * Theme.scale(screen)
                    color: Theme.textSecondary
                    wrapMode: Text.WordWrap
                    Layout.fillWidth: true
                    Layout.bottomMargin: 4
                }

                ComboBox {
                    id: visualizerTypeComboBox

                    Layout.fillWidth: true
                    Layout.preferredHeight: 40
                    model: [&quot;radial&quot;, &quot;fire&quot;, &quot;diamond&quot;]
                    currentIndex: model.indexOf(Settings.settings.visualizerType)
                    onActivated: {
                        Settings.settings.visualizerType = model[index];
                    }

                    background: Rectangle {
                        implicitWidth: 120
                        implicitHeight: 40
                        color: Theme.surfaceVariant
                        border.color: visualizerTypeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                        border.width: 1
                        radius: 16
                    }

                    contentItem: Text {
                        leftPadding: 12
                        rightPadding: visualizerTypeComboBox.indicator.width + visualizerTypeComboBox.spacing
                        text: visualizerTypeComboBox.displayText.charAt(0).toUpperCase() + visualizerTypeComboBox.displayText.slice(1)
                        font.pixelSize: 13
                        color: Theme.textPrimary
                        verticalAlignment: Text.AlignVCenter
                        elide: Text.ElideRight
                    }

                    indicator: Text {
                        x: visualizerTypeComboBox.width - width - 12
                        y: visualizerTypeComboBox.topPadding + (visualizerTypeComboBox.availableHeight - height) / 2
                        text: &quot;arrow_drop_down&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 24
                        color: Theme.textPrimary
                    }

                    popup: Popup {
                        y: visualizerTypeComboBox.height
                        width: visualizerTypeComboBox.width
                        implicitHeight: contentItem.implicitHeight
                        padding: 8

                        contentItem: ListView {
                            clip: true
                            implicitHeight: contentHeight
                            model: visualizerTypeComboBox.popup.visible ? visualizerTypeComboBox.delegateModel : null
                            currentIndex: visualizerTypeComboBox.highlightedIndex

                            ScrollIndicator.vertical: ScrollIndicator {
                            }

                        }

                        background: Rectangle {
                            color: Theme.surfaceVariant
                            border.color: Theme.outline
                            border.width: 1
                            radius: 16
                        }

                    }

                    delegate: ItemDelegate {
                        width: visualizerTypeComboBox.width
                        highlighted: visualizerTypeComboBox.highlightedIndex === index

                        contentItem: Text {
                            text: modelData.charAt(0).toUpperCase() + modelData.slice(1)
                            font.pixelSize: 13
                            color: Theme.textPrimary
                            verticalAlignment: Text.AlignVCenter
                            elide: Text.ElideRight
                        }

                        background: Rectangle {
                            color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Network.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import Quickshell
import Quickshell.Bluetooth
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Wi-Fi&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ToggleOption {
                label: &quot;Enable Wi-Fi&quot;
                description: &quot;Turn Wi-Fi radio on or off&quot;
                value: Settings.settings.wifiEnabled
                onToggled: function() {
                    Settings.settings.wifiEnabled = !Settings.settings.wifiEnabled;
                    Quickshell.execDetached([&quot;nmcli&quot;, &quot;radio&quot;, &quot;wifi&quot;, Settings.settings.wifiEnabled ? &quot;on&quot; : &quot;off&quot;]);
                }
            }

            // Separator
            Rectangle {
                Layout.fillWidth: true
                Layout.topMargin: 26
                Layout.bottomMargin: 18
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Theme.outline
                opacity: 0.3
            }

            Text {
                text: &quot;Bluetooth&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ToggleOption {
                label: &quot;Enable Bluetooth&quot;
                description: &quot;Turn Bluetooth radio on or off&quot;
                value: Settings.settings.bluetoothEnabled
                onToggled: function() {
                                            Settings.settings.bluetoothEnabled = !Settings.settings.bluetoothEnabled;
                    if (Bluetooth.defaultAdapter) {

                        Bluetooth.defaultAdapter.enabled = Settings.settings.bluetoothEnabled;
                        if (Bluetooth.defaultAdapter.enabled)
                            Bluetooth.defaultAdapter.discovering = true;

                    }
                }
            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Record.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Settings
import qs.Components

ColumnLayout {
    id: root
    spacing: 24

    Text {
        text: &quot;Coming soon...&quot;
        font.pixelSize: 16
        font.bold: true
        color: Theme.textPrimary
        Layout.alignment: Qt.AlignCenter
        Layout.topMargin: 32
    }
}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/ScreenRecorder.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Item {
                Layout.fillWidth: true
                Layout.preferredHeight: 0
            }

            ColumnLayout {
                // Text {
                //     text: &quot;Screen Recording&quot;
                //     font.pixelSize: 18 * Theme.scale(screen)
                //     font.bold: true
                //     color: Theme.textPrimary
                //     Layout.bottomMargin: 8
                // }

                spacing: 4
                Layout.fillWidth: true

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true

                    Text {
                        text: &quot;Output Directory&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Directory where screen recordings will be saved&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    Rectangle {
                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        radius: 16
                        color: Theme.surfaceVariant
                        border.color: videoPathInput.activeFocus ? Theme.accentPrimary : Theme.outline
                        border.width: 1

                        TextInput {
                            id: videoPathInput

                            anchors.fill: parent
                            anchors.leftMargin: 12
                            anchors.rightMargin: 12
                            anchors.topMargin: 6
                            anchors.bottomMargin: 6
                            text: Settings.settings.videoPath !== undefined ? Settings.settings.videoPath : &quot;&quot;
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            verticalAlignment: TextInput.AlignVCenter
                            clip: true
                            selectByMouse: true
                            activeFocusOnTab: true
                            inputMethodHints: Qt.ImhUrlCharactersOnly
                            onTextChanged: {
                                Settings.settings.videoPath = text;
                            }

                            MouseArea {
                                anchors.fill: parent
                                cursorShape: Qt.IBeamCursor
                                onClicked: videoPathInput.forceActiveFocus()
                            }

                        }

                    }

                }

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    Text {
                        text: &quot;Frame Rate&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Target frame rate for screen recordings (default: 60)&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    SpinBox {
                        id: frameRateSpinBox

                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        from: 24
                        to: 144
                        value: Settings.settings.recordingFrameRate || 60
                        stepSize: 1
                        onValueChanged: {
                            Settings.settings.recordingFrameRate = value;
                        }

                        background: Rectangle {
                            implicitWidth: 120
                            implicitHeight: 40
                            color: Theme.surfaceVariant
                            border.color: frameRateSpinBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1
                            radius: 16
                        }

                        contentItem: TextInput {
                            text: frameRateSpinBox.textFromValue(frameRateSpinBox.value, frameRateSpinBox.locale)
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            selectionColor: Theme.accentPrimary
                            selectedTextColor: Theme.onAccent
                            horizontalAlignment: Qt.AlignHCenter
                            verticalAlignment: Qt.AlignVCenter
                            readOnly: false
                            selectByMouse: true
                            inputMethodHints: Qt.ImhDigitsOnly
                            onTextChanged: {
                                var newValue = parseInt(text);
                                if (!isNaN(newValue) &amp;&amp; newValue &gt;= frameRateSpinBox.from &amp;&amp; newValue &lt;= frameRateSpinBox.to)
                                    frameRateSpinBox.value = newValue;

                            }
                            onEditingFinished: {
                                var newValue = parseInt(text);
                                if (isNaN(newValue) || newValue &lt; frameRateSpinBox.from || newValue &gt; frameRateSpinBox.to)
                                    text = frameRateSpinBox.textFromValue(frameRateSpinBox.value, frameRateSpinBox.locale);

                            }

                            validator: IntValidator {
                                bottom: frameRateSpinBox.from
                                top: frameRateSpinBox.to
                            }

                        }

                        up.indicator: Rectangle {
                            x: parent.width - width
                            height: parent.height
                            width: height
                            color: &quot;transparent&quot;
                            radius: 16

                            Text {
                                text: &quot;add&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 20 * Theme.scale(screen)
                                color: Theme.textPrimary
                                anchors.centerIn: parent
                            }

                        }

                        down.indicator: Rectangle {
                            x: 0
                            height: parent.height
                            width: height
                            color: &quot;transparent&quot;
                            radius: 16

                            Text {
                                text: &quot;remove&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 20 * Theme.scale(screen)
                                color: Theme.textPrimary
                                anchors.centerIn: parent
                            }

                        }

                    }

                }

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    Text {
                        text: &quot;Audio Source&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Audio source to capture during recording&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    ComboBox {
                        id: audioSourceComboBox

                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        model: [&quot;default_output&quot;, &quot;default_input&quot;, &quot;both&quot;]
                        currentIndex: model.indexOf(Settings.settings.recordingAudioSource || &quot;default_output&quot;)
                        onActivated: {
                            Settings.settings.recordingAudioSource = model[index];
                        }

                        background: Rectangle {
                            implicitWidth: 120
                            implicitHeight: 40
                            color: Theme.surfaceVariant
                            border.color: audioSourceComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1
                            radius: 16
                        }

                        contentItem: Text {
                            leftPadding: 12
                            rightPadding: audioSourceComboBox.indicator.width + audioSourceComboBox.spacing
                            text: {
                                switch (audioSourceComboBox.currentText) {
                                case &quot;default_output&quot;:
                                    return &quot;System Audio&quot;;
                                case &quot;default_input&quot;:
                                    return &quot;Microphone&quot;;
                                case &quot;both&quot;:
                                    return &quot;System Audio + Microphone&quot;;
                                default:
                                    return audioSourceComboBox.currentText;
                                }
                            }
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            verticalAlignment: Text.AlignVCenter
                            elide: Text.ElideRight
                        }

                        indicator: Text {
                            x: audioSourceComboBox.width - width - 12
                            y: audioSourceComboBox.topPadding + (audioSourceComboBox.availableHeight - height) / 2
                            text: &quot;arrow_drop_down&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.textPrimary
                        }

                        popup: Popup {
                            y: audioSourceComboBox.height
                            width: audioSourceComboBox.width
                            implicitHeight: contentItem.implicitHeight
                            padding: 1

                            contentItem: ListView {
                                clip: true
                                implicitHeight: contentHeight
                                model: audioSourceComboBox.popup.visible ? audioSourceComboBox.delegateModel : null
                                currentIndex: audioSourceComboBox.highlightedIndex

                                ScrollIndicator.vertical: ScrollIndicator {
                                }

                            }

                            background: Rectangle {
                                color: Theme.surfaceVariant
                                border.color: Theme.outline
                                border.width: 1
                                radius: 16
                            }

                        }

                        delegate: ItemDelegate {
                            width: audioSourceComboBox.width
                            highlighted: audioSourceComboBox.highlightedIndex === index

                            contentItem: Text {
                                text: {
                                    switch (modelData) {
                                    case &quot;default_output&quot;:
                                        return &quot;System Audio&quot;;
                                    case &quot;default_input&quot;:
                                        return &quot;Microphone&quot;;
                                    case &quot;both&quot;:
                                        return &quot;System Audio + Microphone&quot;;
                                    default:
                                        return modelData;
                                    }
                                }
                                font.pixelSize: 13 * Theme.scale(screen)
                                color: Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                elide: Text.ElideRight
                            }

                            background: Rectangle {
                                color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                            }

                        }

                    }

                }

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    Text {
                        text: &quot;Video Quality&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Higher quality results in larger file sizes&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    ComboBox {
                        id: qualityComboBox

                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        model: [&quot;medium&quot;, &quot;high&quot;, &quot;very_high&quot;, &quot;ultra&quot;]
                        currentIndex: model.indexOf(Settings.settings.recordingQuality || &quot;very_high&quot;)
                        onActivated: {
                            Settings.settings.recordingQuality = model[index];
                        }

                        background: Rectangle {
                            implicitWidth: 120
                            implicitHeight: 40
                            color: Theme.surfaceVariant
                            border.color: qualityComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1
                            radius: 16
                        }

                        contentItem: Text {
                            leftPadding: 12
                            rightPadding: qualityComboBox.indicator.width + qualityComboBox.spacing
                            text: {
                                switch (qualityComboBox.currentText) {
                                case &quot;medium&quot;:
                                    return &quot;Medium&quot;;
                                case &quot;high&quot;:
                                    return &quot;High&quot;;
                                case &quot;very_high&quot;:
                                    return &quot;Very High&quot;;
                                case &quot;ultra&quot;:
                                    return &quot;Ultra&quot;;
                                default:
                                    return qualityComboBox.currentText;
                                }
                            }
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            verticalAlignment: Text.AlignVCenter
                            elide: Text.ElideRight
                        }

                        indicator: Text {
                            x: qualityComboBox.width - width - 12
                            y: qualityComboBox.topPadding + (qualityComboBox.availableHeight - height) / 2
                            text: &quot;arrow_drop_down&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.textPrimary
                        }

                        popup: Popup {
                            y: qualityComboBox.height
                            width: qualityComboBox.width
                            implicitHeight: contentItem.implicitHeight
                            padding: 1

                            contentItem: ListView {
                                clip: true
                                implicitHeight: contentHeight
                                model: qualityComboBox.popup.visible ? qualityComboBox.delegateModel : null
                                currentIndex: qualityComboBox.highlightedIndex

                                ScrollIndicator.vertical: ScrollIndicator {
                                }

                            }

                            background: Rectangle {
                                color: Theme.surfaceVariant
                                border.color: Theme.outline
                                border.width: 1
                                radius: 16
                            }

                        }

                        delegate: ItemDelegate {
                            width: qualityComboBox.width
                            highlighted: qualityComboBox.highlightedIndex === index

                            contentItem: Text {
                                text: {
                                    switch (modelData) {
                                    case &quot;medium&quot;:
                                        return &quot;Medium&quot;;
                                    case &quot;high&quot;:
                                        return &quot;High&quot;;
                                    case &quot;very_high&quot;:
                                        return &quot;Very High&quot;;
                                    case &quot;ultra&quot;:
                                        return &quot;Ultra&quot;;
                                    default:
                                        return modelData;
                                    }
                                }
                                font.pixelSize: 13 * Theme.scale(screen)
                                color: Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                elide: Text.ElideRight
                            }

                            background: Rectangle {
                                color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                            }

                        }

                    }

                }

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    Text {
                        text: &quot;Video Codec&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Different codecs offer different compression and compatibility&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    ComboBox {
                        id: codecComboBox

                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        model: [&quot;h264&quot;, &quot;hevc&quot;, &quot;av1&quot;, &quot;vp8&quot;, &quot;vp9&quot;]
                        currentIndex: model.indexOf(Settings.settings.recordingCodec || &quot;h264&quot;)
                        onActivated: {
                            Settings.settings.recordingCodec = model[index];
                        }

                        background: Rectangle {
                            implicitWidth: 120
                            implicitHeight: 40
                            color: Theme.surfaceVariant
                            border.color: codecComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1
                            radius: 16
                        }

                        contentItem: Text {
                            leftPadding: 12
                            rightPadding: codecComboBox.indicator.width + codecComboBox.spacing
                            text: codecComboBox.currentText.toUpperCase()
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            verticalAlignment: Text.AlignVCenter
                            elide: Text.ElideRight
                        }

                        indicator: Text {
                            x: codecComboBox.width - width - 12
                            y: codecComboBox.topPadding + (codecComboBox.availableHeight - height) / 2
                            text: &quot;arrow_drop_down&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.textPrimary
                        }

                        popup: Popup {
                            y: codecComboBox.height
                            width: codecComboBox.width
                            implicitHeight: contentItem.implicitHeight
                            padding: 1

                            contentItem: ListView {
                                clip: true
                                implicitHeight: contentHeight
                                model: codecComboBox.popup.visible ? codecComboBox.delegateModel : null
                                currentIndex: codecComboBox.highlightedIndex

                                ScrollIndicator.vertical: ScrollIndicator {
                                }

                            }

                            background: Rectangle {
                                color: Theme.surfaceVariant
                                border.color: Theme.outline
                                border.width: 1
                                radius: 16
                            }

                        }

                        delegate: ItemDelegate {
                            width: codecComboBox.width
                            highlighted: codecComboBox.highlightedIndex === index

                            contentItem: Text {
                                text: modelData.toUpperCase()
                                font.pixelSize: 13 * Theme.scale(screen)
                                color: Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                elide: Text.ElideRight
                            }

                            background: Rectangle {
                                color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                            }

                        }

                    }

                }

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    Text {
                        text: &quot;Audio Codec&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Opus is recommended for best performance and smallest audio size&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    ComboBox {
                        id: audioCodecComboBox

                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        model: [&quot;opus&quot;, &quot;aac&quot;]
                        currentIndex: model.indexOf(Settings.settings.audioCodec || &quot;opus&quot;)
                        onActivated: {
                            Settings.settings.audioCodec = model[index];
                        }

                        background: Rectangle {
                            implicitWidth: 120
                            implicitHeight: 40
                            color: Theme.surfaceVariant
                            border.color: audioCodecComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1
                            radius: 16
                        }

                        contentItem: Text {
                            leftPadding: 12
                            rightPadding: audioCodecComboBox.indicator.width + audioCodecComboBox.spacing
                            text: audioCodecComboBox.currentText.toUpperCase()
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            verticalAlignment: Text.AlignVCenter
                            elide: Text.ElideRight
                        }

                        indicator: Text {
                            x: audioCodecComboBox.width - width - 12
                            y: audioCodecComboBox.topPadding + (audioCodecComboBox.availableHeight - height) / 2
                            text: &quot;arrow_drop_down&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.textPrimary
                        }

                        popup: Popup {
                            y: audioCodecComboBox.height
                            width: audioCodecComboBox.width
                            implicitHeight: contentItem.implicitHeight
                            padding: 1

                            contentItem: ListView {
                                clip: true
                                implicitHeight: contentHeight
                                model: audioCodecComboBox.popup.visible ? audioCodecComboBox.delegateModel : null
                                currentIndex: audioCodecComboBox.highlightedIndex

                                ScrollIndicator.vertical: ScrollIndicator {
                                }

                            }

                            background: Rectangle {
                                color: Theme.surfaceVariant
                                border.color: Theme.outline
                                border.width: 1
                                radius: 16
                            }

                        }

                        delegate: ItemDelegate {
                            width: audioCodecComboBox.width
                            highlighted: audioCodecComboBox.highlightedIndex === index

                            contentItem: Text {
                                text: modelData.toUpperCase()
                                font.pixelSize: 13 * Theme.scale(screen)
                                color: Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                elide: Text.ElideRight
                            }

                            background: Rectangle {
                                color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                            }

                        }

                    }

                }

                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8
                    Layout.bottomMargin: 16

                    Text {
                        text: &quot;Color Range&quot;
                        font.pixelSize: 13 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;Limited is recommended for better compatibility&quot;
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                        Layout.bottomMargin: 4
                    }

                    ComboBox {
                        id: colorRangeComboBox

                        Layout.fillWidth: true
                        Layout.preferredHeight: 40
                        model: [&quot;limited&quot;, &quot;full&quot;]
                        currentIndex: model.indexOf(Settings.settings.colorRange || &quot;limited&quot;)
                        onActivated: {
                            Settings.settings.colorRange = model[index];
                        }

                        background: Rectangle {
                            implicitWidth: 120
                            implicitHeight: 40
                            color: Theme.surfaceVariant
                            border.color: colorRangeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1
                            radius: 16
                        }

                        contentItem: Text {
                            leftPadding: 12
                            rightPadding: colorRangeComboBox.indicator.width + colorRangeComboBox.spacing
                            text: colorRangeComboBox.currentText.charAt(0).toUpperCase() + colorRangeComboBox.currentText.slice(1)
                            font.pixelSize: 13 * Theme.scale(screen)
                            color: Theme.textPrimary
                            verticalAlignment: Text.AlignVCenter
                            elide: Text.ElideRight
                        }

                        indicator: Text {
                            x: colorRangeComboBox.width - width - 12
                            y: colorRangeComboBox.topPadding + (colorRangeComboBox.availableHeight - height) / 2
                            text: &quot;arrow_drop_down&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 24 * Theme.scale(screen)
                            color: Theme.textPrimary
                        }

                        popup: Popup {
                            y: colorRangeComboBox.height
                            width: colorRangeComboBox.width
                            implicitHeight: contentItem.implicitHeight
                            padding: 1

                            contentItem: ListView {
                                clip: true
                                implicitHeight: contentHeight
                                model: colorRangeComboBox.popup.visible ? colorRangeComboBox.delegateModel : null
                                currentIndex: colorRangeComboBox.highlightedIndex

                                ScrollIndicator.vertical: ScrollIndicator {
                                }

                            }

                            background: Rectangle {
                                color: Theme.surfaceVariant
                                border.color: Theme.outline
                                border.width: 1
                                radius: 16
                            }

                        }

                        delegate: ItemDelegate {
                            width: colorRangeComboBox.width
                            highlighted: colorRangeComboBox.highlightedIndex === index

                            contentItem: Text {
                                text: modelData.charAt(0).toUpperCase() + modelData.slice(1)
                                font.pixelSize: 13 * Theme.scale(screen)
                                color: Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                elide: Text.ElideRight
                            }

                            background: Rectangle {
                                color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                            }

                        }

                    }

                }

                ToggleOption {
                    label: &quot;Show Cursor&quot;
                    description: &quot;Record mouse cursor in the video&quot;
                    value: Settings.settings.showCursor
                    onToggled: function() {
                        Settings.settings.showCursor = !Settings.settings.showCursor;
                    }
                }
            }

            Item {
                Layout.fillWidth: true
                Layout.preferredHeight: 24
            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/TimeWeather.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Settings
import qs.Widgets.SettingsWindow.Tabs.Components

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Text {
                text: &quot;Time&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ToggleOption {
                label: &quot;Use 12 Hour Clock&quot;
                description: &quot;Display time in 12-hour format (e.g., 2:30 PM) instead of 24-hour format&quot;
                value: Settings.settings.use12HourClock
                onToggled: function() {
                    Settings.settings.use12HourClock = !Settings.settings.use12HourClock;
                }
            }

            ToggleOption {
                label: &quot;US Style Date&quot;
                description: &quot;Display dates in MM/DD/YYYY format instead of DD/MM/YYYY&quot;
                value: Settings.settings.reverseDayMonth
                onToggled: function() {
                    Settings.settings.reverseDayMonth = !Settings.settings.reverseDayMonth;
                }
            }

            Rectangle {
                Layout.fillWidth: true
                Layout.topMargin: 26
                Layout.bottomMargin: 18
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Theme.outline
                opacity: 0.3
            }

            Text {
                text: &quot;Weather&quot;
                font.pixelSize: 18 * Theme.scale(screen)
                font.bold: true
                color: Theme.textPrimary
                Layout.bottomMargin: 16 * Theme.scale(screen)
            }

            ColumnLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.bottomMargin: 8 * Theme.scale(screen)

                Text {
                    text: &quot;City&quot;
                    font.pixelSize: 13 * Theme.scale(screen)
                    font.bold: true
                    color: Theme.textPrimary
                }

                Text {
                    text: &quot;Your city name for weather information&quot;
                    font.pixelSize: 12 * Theme.scale(screen)
                    color: Theme.textSecondary
                    Layout.fillWidth: true
                }

                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 40
                    radius: 16
                    color: Theme.surfaceVariant
                    border.color: cityInput.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1

                    TextInput {
                        id: cityInput

                        anchors.fill: parent
                        anchors.leftMargin: 12
                        anchors.rightMargin: 12
                        anchors.topMargin: 6
                        anchors.bottomMargin: 6
                        text: Settings.settings.weatherCity
                        font.pixelSize: 13 * Theme.scale(screen)
                        color: Theme.textPrimary
                        verticalAlignment: TextInput.AlignVCenter
                        clip: true
                        focus: true
                        selectByMouse: true
                        activeFocusOnTab: true
                        inputMethodHints: Qt.ImhNone
                        onTextChanged: {
                            Settings.settings.weatherCity = text;
                        }

                        MouseArea {
                            anchors.fill: parent
                            cursorShape: Qt.IBeamCursor
                            onClicked: {
                                cityInput.forceActiveFocus();
                            }
                        }

                    }

                }

            }

            ColumnLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.topMargin: 8

                RowLayout {
                    spacing: 8
                    Layout.fillWidth: true

                    ColumnLayout {
                        spacing: 4
                        Layout.fillWidth: true

                        Text {
                            text: &quot;Temperature Unit&quot;
                            font.pixelSize: 13 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Choose between Celsius and Fahrenheit&quot;
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }

                    }

                    UnitSelector {
                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/Tabs/Wallpaper.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import qs.Components
import qs.Services
import qs.Settings

ColumnLayout {
    id: root

    spacing: 0
    anchors.fill: parent
    anchors.margins: 0

    ScrollView {
        id: scrollView

        Layout.fillWidth: true
        Layout.fillHeight: true
        padding: 16
        rightPadding: 12
        clip: true
        ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
        ScrollBar.vertical.policy: ScrollBar.AsNeeded

        ColumnLayout {
            width: scrollView.availableWidth
            spacing: 0

            Item {
                Layout.fillWidth: true
                Layout.preferredHeight: 0
            }

            ColumnLayout {
                spacing: 4
                Layout.fillWidth: true

                Text {
                    text: &quot;Wallpaper Settings&quot;
                    font.pixelSize: 18
                    font.bold: true
                    color: Theme.textPrimary
                    Layout.bottomMargin: 8
                }

                // Wallpaper Settings Category
                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    // Wallpaper Folder
                    ColumnLayout {
                        spacing: 8
                        Layout.fillWidth: true

                        Text {
                            text: &quot;Wallpaper Folder&quot;
                            font.pixelSize: 13
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Path to your wallpaper folder&quot;
                            font.pixelSize: 12
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }

                        RowLayout {
                            spacing: 8
                            Layout.fillWidth: true

                            Rectangle {
                                Layout.fillWidth: true
                                Layout.preferredHeight: 40
                                radius: 16
                                color: Theme.surfaceVariant
                                border.color: folderInput.activeFocus ? Theme.accentPrimary : Theme.outline
                                border.width: 1

                                TextInput {
                                    id: folderInput

                                    anchors.fill: parent
                                    anchors.leftMargin: 12
                                    anchors.rightMargin: 12
                                    anchors.topMargin: 6
                                    anchors.bottomMargin: 6
                                    text: Settings.settings.wallpaperFolder !== undefined ? Settings.settings.wallpaperFolder : &quot;&quot;
                                    font.family: Theme.fontFamily
                                    font.pixelSize: 13
                                    color: Theme.textPrimary
                                    verticalAlignment: TextInput.AlignVCenter
                                    clip: true
                                    selectByMouse: true
                                    activeFocusOnTab: true
                                    inputMethodHints: Qt.ImhUrlCharactersOnly
                                    onTextChanged: {
                                        Settings.settings.wallpaperFolder = text;
                                    }
                                }

                                MouseArea {
                                    anchors.fill: parent
                                    cursorShape: Qt.IBeamCursor
                                    onClicked: folderInput.forceActiveFocus()
                                }

                            }

                        }

                    }

                }

            }

            Rectangle {
                Layout.fillWidth: true
                Layout.topMargin: 26
                Layout.bottomMargin: 18
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Theme.outline
                opacity: 0.3
            }

            ColumnLayout {
                spacing: 4
                Layout.fillWidth: true

                Text {
                    text: &quot;Automation&quot;
                    font.pixelSize: 18
                    font.bold: true
                    color: Theme.textPrimary
                    Layout.bottomMargin: 8
                }

                // Random Wallpaper
                ToggleOption {
                    label: &quot;Random Wallpaper&quot;
                    description: &quot;Automatically select random wallpapers from the folder&quot;
                    value: Settings.settings.randomWallpaper
                    onToggled: function() {
                        Settings.settings.randomWallpaper = !Settings.settings.randomWallpaper;
                    }
                }

                // Use Wallpaper Theme
                ToggleOption {
                    label: &quot;Use Wallpaper Theme&quot;
                    description: &quot;Automatically adjust theme colors based on wallpaper&quot;
                    value: Settings.settings.useWallpaperTheme
                    onToggled: function() {
                        Settings.settings.useWallpaperTheme = !Settings.settings.useWallpaperTheme;
                    }
                }

                // Wallpaper Interval
                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8

                    Text {
                        text: &quot;Wallpaper Interval&quot;
                        font.pixelSize: 13
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;How often to change wallpapers automatically (in seconds)&quot;
                        font.pixelSize: 12
                        color: Theme.textSecondary
                        wrapMode: Text.WordWrap
                        Layout.fillWidth: true
                    }

                    RowLayout {
                        Layout.fillWidth: true

                        Text {
                            text: Settings.settings.wallpaperInterval + &quot; seconds&quot;
                            font.pixelSize: 13
                            color: Theme.textPrimary
                        }

                        Item {
                            Layout.fillWidth: true
                        }

                    }

                    ThemedSlider {
                        id: intervalSlider
                        Layout.fillWidth: true
                        cutoutColor: Theme.backgroundPrimary
                        from: 10
                        to: 900
                        stepSize: 10
                        value: Settings.settings.wallpaperInterval
                        snapAlways: true
                        onMoved: {
                            Settings.settings.wallpaperInterval = Math.round(value);
                        }
                    }

                }

            }

            Rectangle {
                Layout.fillWidth: true
                Layout.topMargin: 26
                Layout.bottomMargin: 18
                height: Math.max(1, 1 * Theme.scale(screen))
                color: Theme.outline
                opacity: 0.3
            }

            ColumnLayout {
                spacing: 4
                Layout.fillWidth: true

                Text {
                    text: &quot;SWWW&quot;
                    font.pixelSize: 18
                    font.bold: true
                    color: Theme.textPrimary
                    Layout.bottomMargin: 8
                }

                // Use SWWW
                ToggleOption {
                    label: &quot;Use SWWW&quot;
                    description: &quot;Use SWWW daemon for advanced wallpaper management&quot;
                    value: Settings.settings.useSWWW
                    onToggled: function() {
                        Settings.settings.useSWWW = !Settings.settings.useSWWW;
                    }
                }

                // SWWW Settings (only visible when useSWWW is enabled)
                ColumnLayout {
                    spacing: 8
                    Layout.fillWidth: true
                    Layout.topMargin: 8
                    visible: Settings.settings.useSWWW

                    // Resize Mode
                    ColumnLayout {
                        spacing: 8
                        Layout.fillWidth: true

                        Text {
                            text: &quot;Resize Mode&quot;
                            font.pixelSize: 13
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;How SWWW should resize wallpapers to fit the screen&quot;
                            font.pixelSize: 12
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }

                        Rectangle {
                            Layout.fillWidth: true
                            Layout.preferredHeight: 40
                            radius: 16
                            color: Theme.surfaceVariant
                            border.color: resizeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1

                            ComboBox {
                                id: resizeComboBox

                                anchors.fill: parent
                                anchors.leftMargin: 12
                                anchors.rightMargin: 12
                                anchors.topMargin: 6
                                anchors.bottomMargin: 6
                                model: [&quot;no&quot;, &quot;crop&quot;, &quot;fit&quot;, &quot;stretch&quot;]
                                currentIndex: model.indexOf(Settings.settings.wallpaperResize)
                                onActivated: {
                                    Settings.settings.wallpaperResize = model[index];
                                }

                                background: Rectangle {
                                    color: &quot;transparent&quot;
                                }

                                contentItem: Text {
                                    text: resizeComboBox.displayText
                                    font: resizeComboBox.font
                                    color: Theme.textPrimary
                                    verticalAlignment: Text.AlignVCenter
                                    horizontalAlignment: Text.AlignLeft
                                }

                                popup: Popup {
                                    y: resizeComboBox.height
                                    width: resizeComboBox.width
                                    implicitHeight: contentItem.implicitHeight
                                    padding: 1

                                    contentItem: ListView {
                                        clip: true
                                        implicitHeight: contentHeight
                                        model: resizeComboBox.popup.visible ? resizeComboBox.delegateModel : null
                                        currentIndex: resizeComboBox.highlightedIndex

                                        ScrollIndicator.vertical: ScrollIndicator {
                                        }

                                    }

                                    background: Rectangle {
                                        color: Theme.surface
                                        border.color: Theme.outline
                                        border.width: 1
                                        radius: 8
                                    }

                                }

                                delegate: ItemDelegate {
                                    width: resizeComboBox.width
                                    highlighted: resizeComboBox.highlightedIndex === index

                                    contentItem: Text {
                                        text: modelData
                                        color: Theme.textPrimary
                                        font: resizeComboBox.font
                                        verticalAlignment: Text.AlignVCenter
                                        horizontalAlignment: Text.AlignLeft
                                    }

                                    background: Rectangle {
                                        color: parent.highlighted ? Theme.accentPrimary : &quot;transparent&quot;
                                    }

                                }

                            }

                        }

                    }

                    // Transition Type
                    ColumnLayout {
                        spacing: 8
                        Layout.fillWidth: true
                        Layout.topMargin: 8

                        Text {
                            text: &quot;Transition Type&quot;
                            font.pixelSize: 13
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Animation type when switching between wallpapers&quot;
                            font.pixelSize: 12
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }

                        Rectangle {
                            Layout.fillWidth: true
                            Layout.preferredHeight: 40
                            radius: 16
                            color: Theme.surfaceVariant
                            border.color: transitionTypeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                            border.width: 1

                            ComboBox {
                                id: transitionTypeComboBox

                                anchors.fill: parent
                                anchors.leftMargin: 12
                                anchors.rightMargin: 12
                                anchors.topMargin: 6
                                anchors.bottomMargin: 6
                                model: [&quot;none&quot;, &quot;simple&quot;, &quot;fade&quot;, &quot;left&quot;, &quot;right&quot;, &quot;top&quot;, &quot;bottom&quot;, &quot;wipe&quot;, &quot;wave&quot;, &quot;grow&quot;, &quot;center&quot;, &quot;any&quot;, &quot;outer&quot;, &quot;random&quot;]
                                currentIndex: model.indexOf(Settings.settings.transitionType)
                                onActivated: {
                                    Settings.settings.transitionType = model[index];
                                }

                                background: Rectangle {
                                    color: &quot;transparent&quot;
                                }

                                contentItem: Text {
                                    text: transitionTypeComboBox.displayText
                                    font: transitionTypeComboBox.font
                                    color: Theme.textPrimary
                                    verticalAlignment: Text.AlignVCenter
                                    horizontalAlignment: Text.AlignLeft
                                }

                                popup: Popup {
                                    y: transitionTypeComboBox.height
                                    width: transitionTypeComboBox.width
                                    implicitHeight: contentItem.implicitHeight
                                    padding: 1

                                    contentItem: ListView {
                                        clip: true
                                        implicitHeight: contentHeight
                                        model: transitionTypeComboBox.popup.visible ? transitionTypeComboBox.delegateModel : null
                                        currentIndex: transitionTypeComboBox.highlightedIndex

                                        ScrollIndicator.vertical: ScrollIndicator {
                                        }

                                    }

                                    background: Rectangle {
                                        color: Theme.surface
                                        border.color: Theme.outline
                                        border.width: 1
                                        radius: 8
                                    }

                                }

                                delegate: ItemDelegate {
                                    width: transitionTypeComboBox.width
                                    highlighted: transitionTypeComboBox.highlightedIndex === index

                                    contentItem: Text {
                                        text: modelData
                                        color: Theme.textPrimary
                                        font: transitionTypeComboBox.font
                                        verticalAlignment: Text.AlignVCenter
                                        horizontalAlignment: Text.AlignLeft
                                    }

                                    background: Rectangle {
                                        color: parent.highlighted ? Theme.accentPrimary : &quot;transparent&quot;
                                    }

                                }

                            }

                        }

                    }

                    // Transition FPS
                    ColumnLayout {
                        spacing: 8
                        Layout.fillWidth: true
                        Layout.topMargin: 8

                        Text {
                            text: &quot;Transition FPS&quot;
                            font.pixelSize: 13
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Frames per second for transition animations&quot;
                            font.pixelSize: 12
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }

                        RowLayout {
                            Layout.fillWidth: true

                            Text {
                                text: Settings.settings.transitionFps + &quot; FPS&quot;
                                font.pixelSize: 13
                                color: Theme.textPrimary
                            }

                            Item {
                                Layout.fillWidth: true
                            }

                        }

                        ThemedSlider {
                            id: fpsSlider
                            Layout.fillWidth: true
                            cutoutColor: Theme.backgroundPrimary
                            from: 30
                            to: 500
                            stepSize: 5
                            value: Settings.settings.transitionFps
                            snapAlways: true
                            onMoved: {
                                Settings.settings.transitionFps = Math.round(value);
                            }
                        }

                    }

                    // Transition Duration
                    ColumnLayout {
                        spacing: 8
                        Layout.fillWidth: true
                        Layout.topMargin: 8

                        Text {
                            text: &quot;Transition Duration&quot;
                            font.pixelSize: 13
                            font.bold: true
                            color: Theme.textPrimary
                        }

                        Text {
                            text: &quot;Duration of transition animations in seconds&quot;
                            font.pixelSize: 12
                            color: Theme.textSecondary
                            wrapMode: Text.WordWrap
                            Layout.fillWidth: true
                        }

                        RowLayout {
                            Layout.fillWidth: true

                            Text {
                                text: Settings.settings.transitionDuration.toFixed(3) + &quot; seconds&quot;
                                font.pixelSize: 13
                                color: Theme.textPrimary
                            }

                            Item {
                                Layout.fillWidth: true
                            }

                        }

                        ThemedSlider {
                            id: durationSlider
                            Layout.fillWidth: true
                            cutoutColor: Theme.backgroundPrimary
                            from: 0.25
                            to: 10
                            stepSize: 0.05
                            value: Settings.settings.transitionDuration
                            snapAlways: true
                            onMoved: {
                                Settings.settings.transitionDuration = value;
                            }
                        }

                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SettingsWindow/SettingsWindow.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import QtQuick.Layouts
import Quickshell
import Quickshell.Wayland
import qs.Components
import qs.Settings
import qs.Widgets.SettingsWindow.Tabs
import qs.Widgets.SettingsWindow.Tabs.Components

PanelWithOverlay {
    id: panelMain

    property int activeTabIndex: 0

    // Function to show wallpaper selector
    function showWallpaperSelector() {
        if (wallpaperSelector)
            wallpaperSelector.show();

    }

    // Function to show settings window
    function showSettings() {
        show();
    }

    // Function to load component for a specific tab
    function loadComponentForTab(tabIndex) {
        const componentMap = {
            &quot;0&quot;: generalSettings,
            &quot;1&quot;: barSettings,
            &quot;2&quot;: timeWeatherSettings,
            &quot;3&quot;: recordingSettings,
            &quot;4&quot;: networkSettings,
            &quot;5&quot;: displaySettings,
            &quot;6&quot;: wallpaperSettings,
            &quot;7&quot;: miscSettings,
            &quot;8&quot;: aboutSettings
        };
        const tabNames = [&quot;General&quot;, &quot;Bar&quot;, &quot;Time &amp; Weather&quot;, &quot;Screen Recorder&quot;, &quot;Network&quot;, &quot;Display&quot;, &quot;Wallpaper&quot;, &quot;Misc&quot;, &quot;About&quot;];
        if (componentMap[tabIndex]) {
            settingsLoader.sourceComponent = componentMap[tabIndex];
            if (tabName)
                tabName.text = tabNames[tabIndex];

        }
    }

    WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand
    // Handle activeTabIndex changes
    onActiveTabIndexChanged: {
        if (activeTabIndex &gt;= 0 &amp;&amp; activeTabIndex &lt;= 8)
            loadComponentForTab(activeTabIndex);

    }
    // Add safety checks for component loading
    Component.onCompleted: {
        // Ensure we start with a valid tab
        if (activeTabIndex &lt; 0 || activeTabIndex &gt; 8)
            activeTabIndex = 0;

    }
    // Cleanup when window is hidden
    onVisibleChanged: {
        if (!visible) {
            // Reset to default tab when hiding to prevent state issues
            activeTabIndex = 0;
            if (tabName)
                tabName.text = &quot;General&quot;;

        }
    }

    Component {
        id: generalSettings

        General {
        }

    }

    Component {
        id: barSettings

        Bar {
        }

    }

    Component {
        id: timeWeatherSettings

        TimeWeather {
        }

    }

    Component {
        id: recordingSettings

        ScreenRecorder {
        }

    }

    Component {
        id: networkSettings

        Network {
        }

    }

    Component {
        id: miscSettings

        Misc {
        }

    }

    Component {
        id: aboutSettings

        About {
        }

    }

    Component {
        id: displaySettings

        Display {
        }

    }

    Component {
        id: wallpaperSettings

        Wallpaper {
        }

    }

    Rectangle {
        id: settingsWindowRect

        implicitWidth: Quickshell.screens.length &gt; 0 ? Math.min(Quickshell.screens[0].width * 2 / 3, 1200) * Theme.scale(screen) : 600 * Theme.scale(screen)
        implicitHeight: Quickshell.screens.length &gt; 0 ? Math.min(Quickshell.screens[0].height * 2 / 3, 800) * Theme.scale(screen) : 400 * Theme.scale(screen)
        visible: parent.visible
        color: &quot;transparent&quot;
        // Center the settings window on screen
        anchors.centerIn: parent

        // Prevent closing when clicking in the panel bg
        MouseArea {
            anchors.fill: parent
        }

        // Background rectangle
        Rectangle {
            id: background

            color: Theme.backgroundPrimary
            anchors.fill: parent
            radius: 18
            border.color: Theme.outline
            border.width: 1 * Theme.scale(screen)

            MultiEffect {
                source: background
                anchors.fill: background
                shadowEnabled: true
                shadowColor: Theme.shadow
                shadowOpacity: 0.3
                shadowHorizontalOffset: 0
                shadowVerticalOffset: 2
                shadowBlur: 12
            }

        }

        Rectangle {
            id: settings
            clip: true

            color: Theme.backgroundPrimary
            topRightRadius: 20 * Theme.scale(screen)
            bottomRightRadius: 20 * Theme.scale(screen)

            anchors {
                left: tabs.right
                top: parent.top
                bottom: parent.bottom
                right: parent.right
                margins: 12
            }

                Rectangle {
                    id: headerArea

                    height: 48 * Theme.scale(screen)
                    color: &quot;transparent&quot;

                    anchors {
                        top: parent.top
                        left: parent.left
                        right: parent.right
                        margins: 16
                    }

                    RowLayout {
                        anchors.fill: parent
                        spacing: 12 * Theme.scale(screen)

                        Text {
                            id: tabName

                            text: wallpaperSelector.visible ? &quot;Select Wallpaper&quot; : (activeTabIndex === 0 ? &quot;General&quot; : activeTabIndex === 1 ? &quot;Bar&quot; : activeTabIndex === 2 ? &quot;Time &amp; Weather&quot; : activeTabIndex === 3 ? &quot;Screen Recorder&quot; : activeTabIndex === 4 ? &quot;Network&quot; : activeTabIndex === 5 ? &quot;Display&quot; : activeTabIndex === 6 ? &quot;Wallpaper&quot; : activeTabIndex === 7 ? &quot;Misc&quot; : activeTabIndex === 8 ? &quot;About&quot; : &quot;General&quot;)
                            font.pixelSize: 18 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                            Layout.fillWidth: true
                        }

                        // Wallpaper Selection Button (only visible on Wallpaper tab)
                        Rectangle {
                            width: 160 * Theme.scale(screen)
                            height: 32 * Theme.scale(screen)
                            radius: 16
                            color: wallpaperButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                            border.color: Theme.accentPrimary
                            border.width: 1 * Theme.scale(screen)
                            visible: activeTabIndex === 6 // Wallpaper tab index

                            Row {
                                anchors.centerIn: parent
                                spacing: 6 * Theme.scale(screen)

                                Text {
                                    text: &quot;image&quot;
                                    font.family: wallpaperButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 16 * Theme.scale(screen)
                                    color: wallpaperButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                                    anchors.verticalCenter: parent.verticalCenter
                                }

                                Text {
                                    text: &quot;Select Wallpaper&quot;
                                    font.pixelSize: 13 * Theme.scale(screen)
                                    font.bold: true
                                    color: wallpaperButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                                    anchors.verticalCenter: parent.verticalCenter
                                }

                            }

                            MouseArea {
                                id: wallpaperButtonArea

                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    // Show the wallpaper selector
                                    wallpaperSelector.show();
                                }
                            }

                        }

                        Rectangle {
                            width: 32 * Theme.scale(screen)
                            height: 32 * Theme.scale(screen)
                            radius: width * 0.5
                            color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                            border.color: Theme.accentPrimary
                            border.width: 1 * Theme.scale(screen)

                            Text {
                                anchors.centerIn: parent
                                text: &quot;close&quot;
                                font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 18 * Theme.scale(screen)
                                color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                            }

                            MouseArea {
                                id: closeButtonArea

                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    // If wallpaper selector is open, close it instead of the settings window
                                    if (wallpaperSelector.visible) {
                                        wallpaperSelector.hide();
                                    } else {
                                        panelMain.dismiss();
                                    }
                                }
                            }

                        }

                    }

                }

                Rectangle {
                    height: Math.max(1, 1 * Theme.scale(screen))
                    color: Theme.outline
                    opacity: 0.3

                    anchors {
                        top: headerArea.bottom
                        left: parent.left
                        right: parent.right
                        margins: 16
                    }

                }

                Item {
                    id: settingsContainer

                    anchors {
                        top: headerArea.bottom
                        left: parent.left
                        right: parent.right
                        bottom: parent.bottom
                        topMargin: 32
                    }

                    // Simplified single loader approach
                    Loader {
                        id: settingsLoader

                        anchors.fill: parent
                        sourceComponent: generalSettings
                        active: true
                    }

                    // Wallpaper Selector Component - positioned as overlay
                    WallpaperSelector {
                        id: wallpaperSelector
                        anchors.fill: parent
                    }

                }

            }

            Rectangle {
                id: tabs

                color: Theme.surface
                width: parent.width * 0.25
                height: settingsWindowRect.height
                topLeftRadius: 20 * Theme.scale(screen)
                bottomLeftRadius: 20 * Theme.scale(screen)
                border.color: Theme.outline
                border.width: 1 * Theme.scale(screen)

                Column {
                    width: parent.width
                    spacing: 0 * Theme.scale(screen)
                    topPadding: 8 * Theme.scale(screen)
                    bottomPadding: 8 * Theme.scale(screen)

                    Repeater {
                        id: repeater

                        model: [{
                            &quot;icon&quot;: &quot;tune&quot;,
                            &quot;text&quot;: &quot;General&quot;
                        }, {
                            &quot;icon&quot;: &quot;space_dashboard&quot;,
                            &quot;text&quot;: &quot;Bar&quot;
                        }, {
                            &quot;icon&quot;: &quot;schedule&quot;,
                            &quot;text&quot;: &quot;Time &amp; Weather&quot;
                        }, {
                            &quot;icon&quot;: &quot;photo_camera&quot;,
                            &quot;text&quot;: &quot;Screen Recorder&quot;
                        }, {
                            &quot;icon&quot;: &quot;wifi&quot;,
                            &quot;text&quot;: &quot;Network&quot;
                        }, {
                            &quot;icon&quot;: &quot;monitor&quot;,
                            &quot;text&quot;: &quot;Display&quot;
                        }, {
                            &quot;icon&quot;: &quot;wallpaper&quot;,
                            &quot;text&quot;: &quot;Wallpaper&quot;
                        }, {
                            &quot;icon&quot;: &quot;settings_suggest&quot;,
                            &quot;text&quot;: &quot;Misc&quot;
                        }, {
                            &quot;icon&quot;: &quot;info&quot;,
                            &quot;text&quot;: &quot;About&quot;
                        }]

                        delegate: Rectangle {
                            width: tabs.width
                            height: 48 * Theme.scale(screen)
                            color: &quot;transparent&quot;

                            RowLayout {
                                anchors.fill: parent
                                spacing: 8 * Theme.scale(screen)

                                Rectangle {
                                    id: activeIndicator

                                    Layout.leftMargin: 8 * Theme.scale(screen)
                                    Layout.preferredWidth: 3 * Theme.scale(screen)
                                    Layout.preferredHeight: 24 * Theme.scale(screen)
                                    Layout.alignment: Qt.AlignVCenter
                                    radius: 2
                                    color: Theme.accentPrimary
                                    opacity: index === activeTabIndex ? 1 : 0

                                    Behavior on opacity {
                                        NumberAnimation {
                                            duration: 200
                                        }

                                    }

                                }

                                Label {
                                    id: icon

                                    text: modelData.icon
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 24 * Theme.scale(screen)
                                    color: index === activeTabIndex ? Theme.accentPrimary : Theme.textPrimary
                                    opacity: index === activeTabIndex ? 1 : 0.8
                                    Layout.leftMargin: 20 * Theme.scale(screen)
                                    Layout.preferredWidth: 24 * Theme.scale(screen)
                                    Layout.preferredHeight: 24 * Theme.scale(screen)
                                    Layout.alignment: Qt.AlignVCenter
                                    horizontalAlignment: Text.AlignHCenter
                                    verticalAlignment: Text.AlignVCenter
                                    font.variableAxes: { &quot;wght&quot;: (Font.Normal + Font.Bold) / 2.0 }
                                }

                                Label {
                                    id: label

                                    text: modelData.text
                                    font.pixelSize: 16 * Theme.scale(screen)
                                    color: index === activeTabIndex ? Theme.accentPrimary : (tabMouseArea.containsMouse ? Theme.accentPrimary : Theme.textSecondary)
                                    font.weight: index === activeTabIndex ? Font.DemiBold : (tabMouseArea.containsMouse ? Font.DemiBold : Font.Normal)
                                    Layout.fillWidth: true
                                    Layout.preferredHeight: 24 * Theme.scale(screen)
                                    Layout.alignment: Qt.AlignLeft | Qt.AlignVCenter
                                    Layout.leftMargin: 4 * Theme.scale(screen)
                                    Layout.rightMargin: 16 * Theme.scale(screen)
                                    verticalAlignment: Text.AlignVCenter
                                }

                            }

                            MouseArea {
                                id: tabMouseArea

                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor
                                onClicked: {
                                    // Close WallpaperSelector if it&apos;s open
                                    if (wallpaperSelector.visible) {
                                        wallpaperSelector.hide();
                                    }
                                    activeTabIndex = index;
                                    loadComponentForTab(index);
                                }
                            }

                            Rectangle {
                                width: parent.width
                                height: Math.max(1, 1 * Theme.scale(screen))
                                color: Theme.outline
                                opacity: 0.6
                                visible: index &lt; (repeater.count - 1)
                                anchors.bottom: parent.bottom
                            }

                        }

                    }

                }

            }

        }

    }</file><file path="quickshell/Widgets/Sidebar/Config/CollapsibleCategory.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import qs.Settings

ColumnLayout {
    property alias title: headerText.text
    property bool expanded: false // Hidden by default
    default property alias content: contentItem.children

    Rectangle {
        Layout.fillWidth: true
        height: 44
        radius: 12
        color: Theme.surface
        border.color: Theme.accentPrimary
        border.width: 2
        RowLayout {
            anchors.fill: parent
            anchors.margins: 8
            spacing: 8
            Item { width: 2 }
            Text {
                id: headerText
                font.family: Theme.fontFamily
                font.pixelSize: Theme.fontSizeBody
                font.bold: true
                color: Theme.textPrimary
            }
            Item { Layout.fillWidth: true }
            Rectangle {
                width: 32; height: 32
                color: &quot;transparent&quot;
                Text {
                    anchors.centerIn: parent
                    text: expanded ? &quot;expand_less&quot; : &quot;expand_more&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: Theme.fontSizeBody
                    color: Theme.accentPrimary
                }
            }
        }
        MouseArea {
            anchors.fill: parent
            cursorShape: Qt.PointingHandCursor
            onClicked: expanded = !expanded
        }
    }
    Item { height: 8 }
    ColumnLayout {
        id: contentItem
        Layout.fillWidth: true
        visible: expanded
        spacing: 0
    }
}</file><file path="quickshell/Widgets/Sidebar/Config/ProfileSettings.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Qt5Compat.GraphicalEffects
import qs.Settings

Rectangle {
    id: profileSettingsCard
    Layout.fillWidth: true
    Layout.preferredHeight: 580
    color: Theme.surface
    radius: 18

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 18
        spacing: 12

        // Header
        RowLayout {
            Layout.fillWidth: true
            spacing: 12
            Text {
                text: &quot;settings&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 20
                color: Theme.accentPrimary
            }
            Text {
                text: &quot;Profile Settings&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 16
                font.bold: true
                color: Theme.textPrimary
                Layout.fillWidth: true
            }
        }

        // Profile Image Input Section
        ColumnLayout {
            spacing: 8
            Layout.fillWidth: true

            Text {
                text: &quot;Profile Image&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            RowLayout {
                spacing: 8
                Layout.fillWidth: true

                Rectangle {
                    width: 40
                    height: 40
                    radius: 20
                    color: Theme.surfaceVariant
                    border.color: profileImageInput.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1

                    Image {
                        id: avatarImage
                        anchors.fill: parent
                        anchors.margins: 2
                        source: Settings.settings.profileImage
                        fillMode: Image.PreserveAspectCrop
                        visible: false
                        asynchronous: true
                        cache: false
                        sourceSize.width: 64
                        sourceSize.height: 64
                    }
                    
                    OpacityMask {
                        anchors.fill: avatarImage
                        source: avatarImage
                        maskSource: Rectangle {
                            width: avatarImage.width
                            height: avatarImage.height
                            radius: avatarImage.width / 2
                            visible: false
                        }
                        visible: Settings.settings.profileImage !== &quot;&quot;
                    }

                    Text {
                        anchors.centerIn: parent
                        text: &quot;person&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 20
                        color: Theme.accentPrimary
                        visible: Settings.settings.profileImage === &quot;&quot;
                    }
                }

                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 40
                    radius: 16
                    color: Theme.surfaceVariant
                    border.color: profileImageInput.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1

                    TextInput {
                        id: profileImageInput
                        anchors.fill: parent
                        anchors.leftMargin: 12
                        anchors.rightMargin: 12
                        anchors.topMargin: 6
                        anchors.bottomMargin: 6
                        text: Settings.settings.profileImage
                        font.family: Theme.fontFamily
                        font.pixelSize: 13
                        color: Theme.textPrimary
                        verticalAlignment: TextInput.AlignVCenter
                        clip: true
                        selectByMouse: true
                        activeFocusOnTab: true
                        inputMethodHints: Qt.ImhUrlCharactersOnly
                        onTextChanged: {
                            Settings.settings.profileImage = text
                        }
                        MouseArea {
                            anchors.fill: parent
                            cursorShape: Qt.IBeamCursor
                            onClicked: profileImageInput.forceActiveFocus()
                        }
                    }
                }
            }
        }

        // Show Active Window Icon Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Show Active Window Icon&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            Rectangle {
                id: activeWindowIconSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.showActiveWindowIcon ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.showActiveWindowIcon ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: activeWindowIconThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.showActiveWindowIcon ? activeWindowIconSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.showActiveWindowIcon = !Settings.settings.showActiveWindowIcon
                    }
                }
            }
        }

        // Show System Info In Bar Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Show System Info In Bar&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            Rectangle {
                id: systemInfoSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.showSystemInfoInBar ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.showSystemInfoInBar ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: systemInfoThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.showSystemInfoInBar ? systemInfoSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.showSystemInfoInBar = !Settings.settings.showSystemInfoInBar
                    }
                }
            }
        }

        // Show Corners Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Show Corners&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            Rectangle {
                id: cornersSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.showCorners ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.showCorners ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: cornersThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.showCorners ? cornersSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.showCorners = !Settings.settings.showCorners
                    }
                }
            }
        }

        // Show Taskbar Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Show Taskbar&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            Rectangle {
                id: taskbarSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.showTaskbar ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.showTaskbar ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: taskbarThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.showTaskbar ? taskbarSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.showTaskbar = !Settings.settings.showTaskbar
                    }
                }
            }
        }

        // Show Media In Bar Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Show Media In Bar&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            Rectangle {
                id: mediaSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.showMediaInBar ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.showMediaInBar ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: mediaThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.showMediaInBar ? mediaSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.showMediaInBar = !Settings.settings.showMediaInBar
                    }
                }
            }
        }

        // Dim Windows Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Dim Desktop&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            Rectangle {
                id: dimSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.dimPanels ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.dimPanels ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: dimThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.dimPanels ? dimSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.dimPanels = !Settings.settings.dimPanels
                    }
                }
            }
        }

        // Visualizer Type Selection
        ColumnLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 16

            Text {
                text: &quot;Visualizer Type&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            ComboBox {
                id: visualizerTypeComboBox
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                model: [&quot;radial&quot;, &quot;fire&quot;, &quot;diamond&quot;]
                currentIndex: model.indexOf(Settings.settings.visualizerType)

                background: Rectangle {
                    implicitWidth: 120
                    implicitHeight: 40
                    color: Theme.surfaceVariant
                    border.color: visualizerTypeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1
                    radius: 16
                }

                contentItem: Text {
                    leftPadding: 12
                    rightPadding: visualizerTypeComboBox.indicator.width + visualizerTypeComboBox.spacing
                    text: visualizerTypeComboBox.displayText.charAt(0).toUpperCase() + visualizerTypeComboBox.displayText.slice(1)
                    font.family: Theme.fontFamily
                    font.pixelSize: 13
                    color: Theme.textPrimary
                    verticalAlignment: Text.AlignVCenter
                    elide: Text.ElideRight
                }

                indicator: Text {
                    x: visualizerTypeComboBox.width - width - 12
                    y: visualizerTypeComboBox.topPadding + (visualizerTypeComboBox.availableHeight - height) / 2
                    text: &quot;arrow_drop_down&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24
                    color: Theme.textPrimary
                }

                popup: Popup {
                    y: visualizerTypeComboBox.height
                    width: visualizerTypeComboBox.width
                    implicitHeight: contentItem.implicitHeight
                    padding: 1

                    contentItem: ListView {
                        clip: true
                        implicitHeight: contentHeight
                        model: visualizerTypeComboBox.popup.visible ? visualizerTypeComboBox.delegateModel : null
                        currentIndex: visualizerTypeComboBox.highlightedIndex

                        ScrollIndicator.vertical: ScrollIndicator {}
                    }

                    background: Rectangle {
                        color: Theme.surfaceVariant
                        border.color: Theme.outline
                        border.width: 1
                        radius: 16
                    }
                }

                delegate: ItemDelegate {
                    width: visualizerTypeComboBox.width
                    contentItem: Text {
                        text: modelData.charAt(0).toUpperCase() + modelData.slice(1)
                        font.family: Theme.fontFamily
                        font.pixelSize: 13
                        color: Theme.textPrimary
                        verticalAlignment: Text.AlignVCenter
                        elide: Text.ElideRight
                    }
                    highlighted: visualizerTypeComboBox.highlightedIndex === index

                    background: Rectangle {
                        color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                    }
                }

                onActivated: {
                    Settings.settings.visualizerType = model[index];
                }
            }
        }

        // Video Path Input Section
        ColumnLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 16

            Text {
                text: &quot;Video Path&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                radius: 16
                color: Theme.surfaceVariant
                border.color: videoPathInput.activeFocus ? Theme.accentPrimary : Theme.outline
                border.width: 1

                TextInput {
                    id: videoPathInput
                    anchors.fill: parent
                    anchors.leftMargin: 12
                    anchors.rightMargin: 12
                    anchors.topMargin: 6
                    anchors.bottomMargin: 6
                    text: Settings.settings.videoPath !== undefined ? Settings.settings.videoPath : &quot;&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: 13
                    color: Theme.textPrimary
                    verticalAlignment: TextInput.AlignVCenter
                    clip: true
                    selectByMouse: true
                    activeFocusOnTab: true
                    inputMethodHints: Qt.ImhUrlCharactersOnly
                    onTextChanged: {
                        Settings.settings.videoPath = text
                    }
                    MouseArea {
                        anchors.fill: parent
                        cursorShape: Qt.IBeamCursor
                        onClicked: videoPathInput.forceActiveFocus()
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Config/SettingsModal.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell
import Quickshell.Wayland
import qs.Settings
import qs.Services
import qs.Components

PanelWindow {
    id: settingsModal
    implicitWidth: 480
    implicitHeight: 780
    visible: false
    color: &quot;transparent&quot;
    anchors.top: true
    anchors.right: true
    margins.right: 0
    margins.top: 0
    WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand

    Rectangle {
        anchors.fill: parent
        color: Theme.backgroundPrimary
        radius: 24
        z: 0

        ColumnLayout {
            id: content
            anchors.fill: parent
            anchors.leftMargin: 32
            anchors.rightMargin: 32
            anchors.topMargin: 32
            
            spacing: 24

            // Header
            ColumnLayout {
                id: header
                Layout.fillWidth: true
                spacing: 4
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 20
                    Text {
                        text: &quot;settings&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 32
                        color: Theme.accentPrimary
                    }
                    Text {
                        text: &quot;Settings&quot;
                        font.pixelSize: 26
                        font.bold: true
                        color: Theme.textPrimary
                        Layout.fillWidth: true
                    }
                    Rectangle {
                        width: 36
                        height: 36
                        radius: 18
                        color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                        border.color: Theme.accentPrimary
                        border.width: 1
                        Text {
                            anchors.centerIn: parent
                            text: &quot;close&quot;
                            font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 20
                            color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                        }
                        MouseArea {
                            id: closeButtonArea
                            anchors.fill: parent
                            hoverEnabled: true
                            onClicked: settingsModal.closeSettings()
                        }
                    }
                }
                Rectangle {
                    Layout.fillWidth: true
                    height: 1
                    color: Theme.outline
                    opacity: 0.12
                }
            }

            // Tabs bar (moved here)
            Tabs {
                id: settingsTabs
                Layout.fillWidth: true
                tabsModel: [
                    { icon: &quot;cloud&quot;, label: &quot;Weather&quot; },
                    { icon: &quot;settings&quot;, label: &quot;System&quot; },
                    { icon: &quot;wallpaper&quot;, label: &quot;Wallpaper&quot; }
                ]
            }

            // Scrollable settings area
            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: content.height - settingsTabs.height - header.height - 128
                color: &quot;transparent&quot;
                border.width: 0
                radius: 20

                Flickable {
                    id: flick
                    anchors.fill: parent
                    contentWidth: width
                    contentHeight: tabContentLoader.item ? tabContentLoader.item.implicitHeight : 0
                    clip: true

                    Loader {
                        id: tabContentLoader
                        anchors.top: parent.top
                        width: parent.width
                        sourceComponent: settingsTabs.currentIndex === 0 ? weatherTab : settingsTabs.currentIndex === 1 ? systemTab : wallpaperTab
                    }
                }

                Component {
                    id: weatherTab
                    ColumnLayout {
                        anchors.fill: parent
                        WeatherSettings {
                            Layout.fillWidth: true
                            Layout.alignment: Qt.AlignTop
                            anchors.margins: 16
                        }
                    }
                }
                Component {
                    id: systemTab
                    ColumnLayout {
                        anchors.fill: parent
                        ProfileSettings {
                            Layout.fillWidth: true
                            Layout.alignment: Qt.AlignTop
                            anchors.margins: 16
                        }
                    }
                }
                Component {
                    id: wallpaperTab
                    ColumnLayout {
                        anchors.fill: parent
                        WallpaperSettings {
                            id: wallpaperSettings
                            Layout.fillWidth: true
                            Layout.alignment: Qt.AlignTop
                            anchors.margins: 16
                        }
                    }
                }
            }
        }
    }

    // Function to open the modal and initialize temp values
    function openSettings() {        
        visible = true;
        // Force focus on the text input after a short delay
        focusTimer.start();
    }

    // Function to close the modal and release focus
    function closeSettings() {
        visible = false;
    }

    Timer {
        id: focusTimer
        interval: 100
        repeat: false
        onTriggered: {
            if (visible)
            // Focus will be handled by the individual components
            {}
        }
    }

    // Release focus when modal becomes invisible
    onVisibleChanged: {
        if (!visible) {
            // Focus will be handled by the individual components
            if (typeof weather !== &apos;undefined&apos; &amp;&amp; weather !== null &amp;&amp; weather.fetchCityWeather) {
                weather.fetchCityWeather();
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Config/WallpaperSettings.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import qs.Settings

Rectangle {
    id: wallpaperSettingsCard
    Layout.fillWidth: true
    Layout.preferredHeight: 720
    color: Theme.surface
    radius: 18

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 18
        spacing: 12

    // Header
    RowLayout {
        Layout.fillWidth: true
        spacing: 12
        Text {
            text: &quot;image&quot;
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 20
            color: Theme.accentPrimary
        }
        Text {
            text: &quot;Wallpaper Settings&quot;
            font.family: Theme.fontFamily
            font.pixelSize: 16
            font.bold: true
            color: Theme.textPrimary
            Layout.fillWidth: true
        }
    }

        ColumnLayout {
            spacing: 8
            Layout.fillWidth: true

            Text {
                text: &quot;Wallpaper Path&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            // Folder Path Input
            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                radius: 16
                color: Theme.surfaceVariant
                border.color: folderInput.activeFocus ? Theme.accentPrimary : Theme.outline
                border.width: 1
                TextInput {
                    id: folderInput
                    anchors.left: parent.left
                    anchors.right: parent.right
                    anchors.top: parent.top
                    anchors.bottom: parent.bottom
                    anchors.leftMargin: 12
                    anchors.rightMargin: 12
                    anchors.topMargin: 6
                    anchors.bottomMargin: 6
                    text: Settings.settings.wallpaperFolder
                    font.family: Theme.fontFamily
                    font.pixelSize: 13
                    color: Theme.textPrimary
                    verticalAlignment: TextInput.AlignVCenter
                    clip: true
                    selectByMouse: true
                    activeFocusOnTab: true
                    inputMethodHints: Qt.ImhUrlCharactersOnly
                    onTextChanged: {
                        Settings.settings.wallpaperFolder = text;
                    }
                    MouseArea {
                        anchors.fill: parent
                        cursorShape: Qt.IBeamCursor
                        onClicked: folderInput.forceActiveFocus()
                    }
                }
            }
        }

        // Use SWWW Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Use SWWW&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            // Custom Material 3 Switch
            Rectangle {
                id: swwwSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.useSWWW ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.useSWWW ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: swwwThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.useSWWW ? swwwSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.useSWWW = !Settings.settings.useSWWW;
                    }
                }
            }
        }

        // Random Wallpaper Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Random Wallpaper&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            // Custom Material 3 Switch
            Rectangle {
                id: randomWallpaperSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.randomWallpaper ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.randomWallpaper ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: randomWallpaperThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.randomWallpaper ? randomWallpaperSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.randomWallpaper = !Settings.settings.randomWallpaper;
                    }
                }
            }
        }

        // Use Wallpaper Theme Setting
        RowLayout {
            spacing: 8
            Layout.fillWidth: true
            Layout.topMargin: 8

            Text {
                text: &quot;Use Wallpaper Theme&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            // Custom Material 3 Switch
            Rectangle {
                id: wallpaperThemeSwitch
                width: 52
                height: 32
                radius: 16
                color: Settings.settings.useWallpaperTheme ? Theme.accentPrimary : Theme.surfaceVariant
                border.color: Settings.settings.useWallpaperTheme ? Theme.accentPrimary : Theme.outline
                border.width: 2

                Rectangle {
                    id: wallpaperThemeThumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.useWallpaperTheme ? wallpaperThemeSwitch.width - width - 2 : 2

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.useWallpaperTheme = !Settings.settings.useWallpaperTheme;
                    }
                }
            }
        }

        // Wallpaper Interval Setting
        ColumnLayout {
            spacing: 12
            Layout.fillWidth: true
            Layout.topMargin: 8

            RowLayout {
                Layout.fillWidth: true
                Text {
                    text: &quot;Wallpaper Interval (seconds)&quot;
                    font.pixelSize: 13
                    font.bold: true
                    color: Theme.textPrimary
                }

                Item {
                    Layout.fillWidth: true
                }

                Text {
                    text: Settings.settings.wallpaperInterval
                    font.pixelSize: 13
                    color: Theme.textPrimary
                }
            }

            Slider {
                id: intervalSlider
                Layout.fillWidth: true
                from: 10
                to: 900
                stepSize: 10
                value: Settings.settings.wallpaperInterval
                snapMode: Slider.SnapAlways

                background: Rectangle {
                    x: intervalSlider.leftPadding
                    y: intervalSlider.topPadding + intervalSlider.availableHeight / 2 - height / 2
                    implicitWidth: 200
                    implicitHeight: 4
                    width: intervalSlider.availableWidth
                    height: implicitHeight
                    radius: 2
                    color: Theme.surfaceVariant

                    Rectangle {
                        width: intervalSlider.visualPosition * parent.width
                        height: parent.height
                        color: Theme.accentPrimary
                        radius: 2
                    }
                }

                handle: Rectangle {
                    x: intervalSlider.leftPadding + intervalSlider.visualPosition * (intervalSlider.availableWidth - width)
                    y: intervalSlider.topPadding + intervalSlider.availableHeight / 2 - height / 2
                    implicitWidth: 20
                    implicitHeight: 20
                    radius: 10
                    color: intervalSlider.pressed ? Theme.surfaceVariant : Theme.surface
                    border.color: Theme.accentPrimary
                    border.width: 2
                }

                onMoved: {
                    Settings.settings.wallpaperInterval = Math.round(value);
                }
            }
        }

        // Resize Mode Setting
        ColumnLayout {
            spacing: 12
            Layout.fillWidth: true
            Layout.topMargin: 16

            Text {
                text: &quot;Resize Mode&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            ComboBox {
                id: resizeComboBox
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                model: [&quot;no&quot;, &quot;crop&quot;, &quot;fit&quot;, &quot;stretch&quot;]
                currentIndex: model.indexOf(Settings.settings.wallpaperResize)

                background: Rectangle {
                    implicitWidth: 120
                    implicitHeight: 40
                    color: Theme.surfaceVariant
                    border.color: resizeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1
                    radius: 16
                }

                contentItem: Text {
                    leftPadding: 12
                    rightPadding: resizeComboBox.indicator.width + resizeComboBox.spacing
                    text: resizeComboBox.displayText
                    font.family: Theme.fontFamily
                    font.pixelSize: 13
                    color: Theme.textPrimary
                    verticalAlignment: Text.AlignVCenter
                    elide: Text.ElideRight
                }

                indicator: Text {
                    x: resizeComboBox.width - width - 12
                    y: resizeComboBox.topPadding + (resizeComboBox.availableHeight - height) / 2
                    text: &quot;arrow_drop_down&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24
                    color: Theme.textPrimary
                }

                popup: Popup {
                    y: resizeComboBox.height
                    width: resizeComboBox.width
                    implicitHeight: contentItem.implicitHeight
                    padding: 1

                    contentItem: ListView {
                        clip: true
                        implicitHeight: contentHeight
                        model: resizeComboBox.popup.visible ? resizeComboBox.delegateModel : null
                        currentIndex: resizeComboBox.highlightedIndex

                        ScrollIndicator.vertical: ScrollIndicator {}
                    }

                    background: Rectangle {
                        color: Theme.surfaceVariant
                        border.color: Theme.outline
                        border.width: 1
                        radius: 16
                    }
                }

                delegate: ItemDelegate {
                    width: resizeComboBox.width
                    contentItem: Text {
                        text: modelData
                        font.family: Theme.fontFamily
                        font.pixelSize: 13
                        color: Theme.textPrimary
                        verticalAlignment: Text.AlignVCenter
                        elide: Text.ElideRight
                    }
                    highlighted: resizeComboBox.highlightedIndex === index

                    background: Rectangle {
                        color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                    }
                }

                onActivated: {
                    Settings.settings.wallpaperResize = model[index];
                }
            }
        }

        // Transition Type Setting
        ColumnLayout {
            spacing: 12
            Layout.fillWidth: true
            Layout.topMargin: 16

            Text {
                text: &quot;Transition Type&quot;
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            ComboBox {
                id: transitionTypeComboBox
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                model: [&quot;none&quot;, &quot;simple&quot;, &quot;fade&quot;, &quot;left&quot;, &quot;right&quot;, &quot;top&quot;, &quot;bottom&quot;, &quot;wipe&quot;, &quot;wave&quot;, &quot;grow&quot;, &quot;center&quot;, &quot;any&quot;, &quot;outer&quot;, &quot;random&quot;]
                currentIndex: model.indexOf(Settings.settings.transitionType)

                background: Rectangle {
                    implicitWidth: 120
                    implicitHeight: 40
                    color: Theme.surfaceVariant
                    border.color: transitionTypeComboBox.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1
                    radius: 16
                }

                contentItem: Text {
                    leftPadding: 12
                    rightPadding: transitionTypeComboBox.indicator.width + transitionTypeComboBox.spacing
                    text: transitionTypeComboBox.displayText
                    font.family: Theme.fontFamily
                    font.pixelSize: 13
                    color: Theme.textPrimary
                    verticalAlignment: Text.AlignVCenter
                    elide: Text.ElideRight
                }

                indicator: Text {
                    x: transitionTypeComboBox.width - width - 12
                    y: transitionTypeComboBox.topPadding + (transitionTypeComboBox.availableHeight - height) / 2
                    text: &quot;arrow_drop_down&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24
                    color: Theme.textPrimary
                }

                popup: Popup {
                    y: transitionTypeComboBox.height
                    width: transitionTypeComboBox.width
                    implicitHeight: contentItem.implicitHeight
                    padding: 1

                    contentItem: ListView {
                        clip: true
                        implicitHeight: contentHeight
                        model: transitionTypeComboBox.popup.visible ? transitionTypeComboBox.delegateModel : null
                        currentIndex: transitionTypeComboBox.highlightedIndex

                        ScrollIndicator.vertical: ScrollIndicator {}
                    }

                    background: Rectangle {
                        color: Theme.surfaceVariant
                        border.color: Theme.outline
                        border.width: 1
                        radius: 16
                    }
                }

                delegate: ItemDelegate {
                    width: transitionTypeComboBox.width
                    contentItem: Text {
                        text: modelData
                        font.family: Theme.fontFamily
                        font.pixelSize: 13
                        color: Theme.textPrimary
                        verticalAlignment: Text.AlignVCenter
                        elide: Text.ElideRight
                    }
                    highlighted: transitionTypeComboBox.highlightedIndex === index

                    background: Rectangle {
                        color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                    }
                }

                onActivated: {
                    Settings.settings.transitionType = model[index];
                }
            }
        }

        // Transition FPS Setting
        ColumnLayout {
            spacing: 12
            Layout.fillWidth: true
            Layout.topMargin: 16

            RowLayout {
                Layout.fillWidth: true
                Text {
                    text: &quot;Transition FPS&quot;
                    font.pixelSize: 13
                    font.bold: true
                    color: Theme.textPrimary
                }

                Item {
                    Layout.fillWidth: true
                }

                Text {
                    text: Settings.settings.transitionFps
                    font.pixelSize: 13
                    color: Theme.textPrimary
                }
            }

            Slider {
                id: fpsSlider
                Layout.fillWidth: true
                from: 30
                to: 500
                stepSize: 5
                value: Settings.settings.transitionFps
                snapMode: Slider.SnapAlways

                background: Rectangle {
                    x: fpsSlider.leftPadding
                    y: fpsSlider.topPadding + fpsSlider.availableHeight / 2 - height / 2
                    implicitWidth: 200
                    implicitHeight: 4
                    width: fpsSlider.availableWidth
                    height: implicitHeight
                    radius: 2
                    color: Theme.surfaceVariant

                    Rectangle {
                        width: fpsSlider.visualPosition * parent.width
                        height: parent.height
                        color: Theme.accentPrimary
                        radius: 2
                    }
                }

                handle: Rectangle {
                    x: fpsSlider.leftPadding + fpsSlider.visualPosition * (fpsSlider.availableWidth - width)
                    y: fpsSlider.topPadding + fpsSlider.availableHeight / 2 - height / 2
                    implicitWidth: 20
                    implicitHeight: 20
                    radius: 10
                    color: fpsSlider.pressed ? Theme.surfaceVariant : Theme.surface
                    border.color: Theme.accentPrimary
                    border.width: 2
                }

                onMoved: {
                    Settings.settings.transitionFps = Math.round(value);
                }
            }
        }

        // Transition Duration Setting
        ColumnLayout {
            spacing: 12
            Layout.fillWidth: true
            Layout.topMargin: 16

            RowLayout {
                Layout.fillWidth: true
                Text {
                    text: &quot;Transition Duration (seconds)&quot;
                    font.pixelSize: 13
                    font.bold: true
                    color: Theme.textPrimary
                }

                Item {
                    Layout.fillWidth: true
                }

                Text {
                    text: Settings.settings.transitionDuration.toFixed(3)
                    font.pixelSize: 13
                    color: Theme.textPrimary
                }
            }

            Slider {
                id: durationSlider
                Layout.fillWidth: true
                from: 0.250
                to: 10.0
                stepSize: 0.050
                value: Settings.settings.transitionDuration
                snapMode: Slider.SnapAlways

                background: Rectangle {
                    x: durationSlider.leftPadding
                    y: durationSlider.topPadding + durationSlider.availableHeight / 2 - height / 2
                    implicitWidth: 200
                    implicitHeight: 4
                    width: durationSlider.availableWidth
                    height: implicitHeight
                    radius: 2
                    color: Theme.surfaceVariant

                    Rectangle {
                        width: durationSlider.visualPosition * parent.width
                        height: parent.height
                        color: Theme.accentPrimary
                        radius: 2
                    }
                }

                handle: Rectangle {
                    x: durationSlider.leftPadding + durationSlider.visualPosition * (durationSlider.availableWidth - width)
                    y: durationSlider.topPadding + durationSlider.availableHeight / 2 - height / 2
                    implicitWidth: 20
                    implicitHeight: 20
                    radius: 10
                    color: durationSlider.pressed ? Theme.surfaceVariant : Theme.surface
                    border.color: Theme.accentPrimary
                    border.width: 2
                }

                onMoved: {
                    Settings.settings.transitionDuration = value;
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Config/WeatherSettings.qml">import QtQuick
import QtQuick.Layouts
import qs.Settings

Rectangle {
    id: weatherSettingsCard
    Layout.fillWidth: true
    Layout.preferredHeight: 320
    color: Theme.surface
    radius: 18

    ColumnLayout {
        anchors.fill: parent
        anchors.margins: 18
        spacing: 12

        // Weather Settings Header
        RowLayout {
            Layout.fillWidth: true
            spacing: 12

            Text {
                text: &quot;wb_sunny&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 20
                color: Theme.accentPrimary
            }

            Text {
                text: &quot;Weather Settings&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 16
                font.bold: true
                color: Theme.textPrimary
                Layout.fillWidth: true
            }
        }

        // Weather City Setting
        ColumnLayout {
            spacing: 8
            Layout.fillWidth: true

            Text {
                text: &quot;City&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Rectangle {
                Layout.fillWidth: true
                Layout.preferredHeight: 40
                radius: 16
                color: Theme.surfaceVariant
                border.color: cityInput.activeFocus ? Theme.accentPrimary : Theme.outline
                border.width: 1

                TextInput {
                    id: cityInput
                    anchors.left: parent.left
                    anchors.right: parent.right
                    anchors.top: parent.top
                    anchors.bottom: parent.bottom
                    anchors.leftMargin: 12
                    anchors.rightMargin: 12
                    anchors.topMargin: 6
                    anchors.bottomMargin: 6
                    text: Settings.settings.weatherCity
                    font.family: Theme.fontFamily
                    font.pixelSize: 13
                    color: Theme.textPrimary
                    verticalAlignment: TextInput.AlignVCenter
                    clip: true
                    focus: true
                    selectByMouse: true
                    activeFocusOnTab: true
                    inputMethodHints: Qt.ImhNone

                    onTextChanged: {
                        Settings.settings.weatherCity = text;
                    }

                    MouseArea {
                        anchors.fill: parent
                        cursorShape: Qt.IBeamCursor
                        onClicked: {
                            cityInput.forceActiveFocus();
                        }
                    }
                }
            }
        }

        // Temperature Unit Setting
        RowLayout {
            spacing: 12
            Layout.fillWidth: true

            Text {
                text: &quot;Temperature Unit&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 13
                font.bold: true
                color: Theme.textPrimary
            }

            Item {
                Layout.fillWidth: true
            }

            // Custom Material 3 Switch
            Rectangle {
                id: customSwitch
                width: 52
                height: 32
                radius: 16
                color: Theme.accentPrimary
                border.color: Theme.accentPrimary
                border.width: 2

                Rectangle {
                    id: thumb
                    width: 28
                    height: 28
                    radius: 14
                    color: Theme.surface
                    border.color: Theme.outline
                    border.width: 1
                    y: 2
                    x: Settings.settings.useFahrenheit ? customSwitch.width - width - 2 : 2

                    Text {
                        anchors.centerIn: parent
                        text: Settings.settings.useFahrenheit ? &quot;\u00b0F&quot; : &quot;\u00b0C&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: 12
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Behavior on x {
                        NumberAnimation {
                            duration: 200
                            easing.type: Easing.OutCubic
                        }
                    }
                }

                MouseArea {
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    onClicked: {
                        Settings.settings.useFahrenheit = !Settings.settings.useFahrenheit;
                    }
                }
            }

        
        }

            // Random Wallpaper Setting
            RowLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.topMargin: 8

                Text {
                    text: &quot;Use 12 Hour Clock&quot;
                    font.pixelSize: 13
                    font.bold: true
                    color: Theme.textPrimary
                }

                Item {
                    Layout.fillWidth: true
                }

                // Custom Material 3 Switch
                Rectangle {
                    id: use12HourClockSwitch
                    width: 52
                    height: 32
                    radius: 16
                    color: Settings.settings.use12HourClock ? Theme.accentPrimary : Theme.surfaceVariant
                    border.color: Settings.settings.use12HourClock ? Theme.accentPrimary : Theme.outline
                    border.width: 2

                    Rectangle {
                        id: randomWallpaperThumb
                        width: 28
                        height: 28
                        radius: 14
                        color: Theme.surface
                        border.color: Theme.outline
                        border.width: 1
                        y: 2
                        x: Settings.settings.use12HourClock ? use12HourClockSwitch.width - width - 2 : 2

                        Behavior on x {
                            NumberAnimation {
                                duration: 200
                                easing.type: Easing.OutCubic
                            }
                        }
                    }

                    MouseArea {
                        anchors.fill: parent
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            Settings.settings.use12HourClock = !Settings.settings.use12HourClock;
                        }
                    }
                }
            }

            // Reverse Day Month Setting
            RowLayout {
                spacing: 8
                Layout.fillWidth: true
                Layout.topMargin: 8

                Text {
                    text: &quot;US Style Date&quot;
                    font.pixelSize: 13
                    font.bold: true
                    color: Theme.textPrimary
                }

                Item {
                    Layout.fillWidth: true
                }

                // Custom Material 3 Switch
                Rectangle {
                    id: reverseDayMonthSwitch
                    width: 52
                    height: 32
                    radius: 16
                    color: Settings.settings.reverseDayMonth ? Theme.accentPrimary : Theme.surfaceVariant
                    border.color: Settings.settings.reverseDayMonth ? Theme.accentPrimary : Theme.outline
                    border.width: 2

                    Rectangle {
                        id: reverseDayMonthThumb
                        width: 28
                        height: 28
                        radius: 14
                        color: Theme.surface
                        border.color: Theme.outline
                        border.width: 1
                        y: 2
                        x: Settings.settings.reverseDayMonth ? reverseDayMonthSwitch.width - width - 2 : 2

                        Behavior on x {
                            NumberAnimation {
                                duration: 200
                                easing.type: Easing.OutCubic
                            }
                        }
                    }

                    MouseArea {
                        anchors.fill: parent
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            Settings.settings.reverseDayMonth = !Settings.settings.reverseDayMonth;
                        }
                    }
                }
            }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/BluetoothPanel.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Wayland
import Quickshell
import Quickshell.Bluetooth
import qs.Settings
import qs.Components
import qs.Helpers

Item {
    id: root
    property alias panel: bluetoothPanelModal

    // For showing error/status messages
    property string statusMessage: &quot;&quot;
    property bool statusPopupVisible: false

    function showStatus(msg) {
        statusMessage = msg
        statusPopupVisible = true
    }

    function hideStatus() {
        statusPopupVisible = false
    }

    function showAt() {
        bluetoothLogic.showAt()
    }

    Rectangle {
        id: card
        width: 36; height: 36
        radius: 18
        border.color: Theme.accentPrimary
        border.width: 1
        color: bluetoothButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

        Text {
            anchors.centerIn: parent
            text: &quot;bluetooth&quot;
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 22
            color: bluetoothButtonArea.containsMouse
                ? Theme.backgroundPrimary
                : Theme.accentPrimary
        }

        MouseArea {
            id: bluetoothButtonArea
            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: bluetoothLogic.showAt()
        }
    }

    QtObject {
        id: bluetoothLogic

        function showAt() {
            if (Bluetooth.defaultAdapter) {
                if (!Bluetooth.defaultAdapter.enabled)
                    Bluetooth.defaultAdapter.enabled = true
                if (!Bluetooth.defaultAdapter.discovering)
                    Bluetooth.defaultAdapter.discovering = true
            }
            bluetoothPanelModal.visible = true
        }
    }

    PanelWindow {
        id: bluetoothPanelModal
        implicitWidth: 480
        implicitHeight: 780
        visible: false
        color: &quot;transparent&quot;
        anchors.top: true
        anchors.right: true
        margins.right: 0
        margins.top: 0
        WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand

        onVisibleChanged: {
            if (!visible &amp;&amp; Bluetooth.defaultAdapter &amp;&amp; Bluetooth.defaultAdapter.discovering)
                Bluetooth.defaultAdapter.discovering = false
        }

        Rectangle {
            anchors.fill: parent
            color: Theme.backgroundPrimary
            radius: 24

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 32
                spacing: 0

                RowLayout {
                    Layout.fillWidth: true
                    spacing: 20
                    Layout.preferredHeight: 48
                    Layout.leftMargin: 16
                    Layout.rightMargin: 16
                    Text {
                        text: &quot;bluetooth&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 32
                        color: Theme.accentPrimary
                    }
                    Text {
                        text: &quot;Bluetooth&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: 26
                        font.bold: true
                        color: Theme.textPrimary
                        Layout.fillWidth: true
                    }
                    Rectangle {
                        width: 36; height: 36; radius: 18
                        color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                        border.color: Theme.accentPrimary
                        border.width: 1
                        Text {
                            anchors.centerIn: parent
                            text: &quot;close&quot;
                            font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 20
                            color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                        }
                        MouseArea {
                            id: closeButtonArea
                            anchors.fill: parent
                            hoverEnabled: true
                            onClicked: bluetoothPanelModal.visible = false
                            cursorShape: Qt.PointingHandCursor
                        }
                    }
                }
                Rectangle {
                    Layout.fillWidth: true
                    height: 1
                    color: Theme.outline
                    opacity: 0.12
                }

                // Content area (centered, in a card)
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 640
                    Layout.alignment: Qt.AlignHCenter
                    Layout.margins: 0
                    color: Theme.surfaceVariant
                    radius: 18
                    border.color: Theme.outline
                    border.width: 1
                    anchors.topMargin: 32

                    Rectangle {
                        id: bg
                        anchors.fill: parent
                        color: Theme.backgroundPrimary
                        radius: 12
                        border.width: 1
                        border.color: Theme.surfaceVariant
                        z: 0
                    }
                    Rectangle {
                        id: header
                        color: &quot;transparent&quot;
                    }
                    Rectangle {
                        id: listContainer
                        anchors.top: header.bottom
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.bottom: parent.bottom
                        anchors.margins: 24
                        color: &quot;transparent&quot;
                        clip: true

                        ListView {
                            id: deviceListView
                            anchors.fill: parent
                            spacing: 4
                            boundsBehavior: Flickable.StopAtBounds
                            model: Bluetooth.defaultAdapter ? Bluetooth.defaultAdapter.devices : []

                            delegate: Rectangle {
                                width: parent.width
                                height: 60
                                color: &quot;transparent&quot;
                                radius: 8

                                property bool userInitiatedDisconnect: false

                                Rectangle {
                                    anchors.fill: parent
                                    radius: 8
                                    color: modelData.connected ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.18)
                                        : (deviceMouseArea.containsMouse ? Theme.highlight : &quot;transparent&quot;)
                                }

                                RowLayout {
                                    anchors.fill: parent
                                    anchors.leftMargin: 12
                                    anchors.rightMargin: 12
                                    spacing: 12

                                    // Fixed-width icon for alignment
                                    Text {
                                        width: 28
                                        horizontalAlignment: Text.AlignHCenter
                                        verticalAlignment: Text.AlignVCenter
                                        text: modelData.connected ? &quot;bluetooth&quot; : &quot;bluetooth_disabled&quot;
                                        font.family: &quot;Material Symbols Outlined&quot;
                                        font.pixelSize: 20
                                        color: modelData.connected ? Theme.accentPrimary : Theme.textSecondary
                                    }

                                    ColumnLayout {
                                        Layout.fillWidth: true
                                        spacing: 2
                                        // Device name always fills width for alignment
                                        Text {
                                            Layout.fillWidth: true
                                            text: modelData.name || &quot;Unknown Device&quot;
                                            font.family: Theme.fontFamily
                                            color: modelData.connected ? Theme.accentPrimary : Theme.textPrimary
                                            font.pixelSize: 14
                                            elide: Text.ElideRight
                                        }
                                        Text {
                                            Layout.fillWidth: true
                                            text: modelData.address
                                            font.family: Theme.fontFamily
                                            color: modelData.connected ? Theme.accentPrimary : Theme.textSecondary
                                            font.pixelSize: 11
                                            elide: Text.ElideRight
                                        }
                                        Text {
                                            text: &quot;Paired: &quot; + modelData.paired + &quot; | Trusted: &quot; + modelData.trusted
                                            font.family: Theme.fontFamily
                                            font.pixelSize: 10
                                            color: Theme.textSecondary
                                            visible: true
                                        }
                                        // No &quot;Connected&quot; text here!
                                    }
                                    
                                    Spinner {
                                        running: modelData.pairing || modelData.state === BluetoothDeviceState.Connecting || modelData.state === BluetoothDeviceState.Disconnecting
                                        color: Theme.textPrimary
                                        size: 16
                                        visible: running
                                    }
                                }

                                MouseArea {
                                    id: deviceMouseArea
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    cursorShape: Qt.PointingHandCursor

                                    onClicked: {
                                        if (modelData.connected) {
                                            userInitiatedDisconnect = true
                                            modelData.disconnect()
                                        } else if (!modelData.paired) {
                                            modelData.pair()
                                            root.showStatus(&quot;Pairing... Please check your phone or system for a PIN dialog.&quot;)
                                        } else {
                                            modelData.connect()
                                        }
                                    }
                                }

                                Connections {
                                    target: modelData

                                    function onPairedChanged() {
                                        if (modelData.paired) {
                                            root.showStatus(&quot;Paired! Now connecting...&quot;)
                                            modelData.connect()
                                        }
                                    }
                                    function onPairingChanged() {
                                        if (!modelData.pairing &amp;&amp; !modelData.paired) {
                                            root.showStatus(&quot;Pairing failed or was cancelled.&quot;)
                                        }
                                    }
                                    function onConnectedChanged() {
                                        userInitiatedDisconnect = false
                                    }
                                    function onStateChanged() {
                                        // Optionally handle more granular feedback here
                                    }
                                }
                            }
                        }
                    }

                    Rectangle {
                        anchors.right: parent.right
                        anchors.rightMargin: 2
                        anchors.top: listContainer.top
                        anchors.bottom: listContainer.bottom
                        width: 4
                        radius: 2
                        color: Theme.textSecondary
                        opacity: deviceListView.contentHeight &gt; deviceListView.height ? 0.3 : 0
                        visible: opacity &gt; 0
                    }
                }
            }
        }

        // Status/Info popup
        Popup {
            id: statusPopup
            x: (parent.width - width) / 2
            y: 40
            width: Math.min(360, parent.width - 40)
            visible: root.statusPopupVisible
            modal: false
            focus: false
            background: Rectangle {
                color: Theme.accentPrimary // Use your theme&apos;s accent color
                radius: 8
            }
            contentItem: Text {
                text: root.statusMessage
                color: &quot;white&quot;
                wrapMode: Text.WordWrap
                padding: 12
                font.pixelSize: 14
            }
            onVisibleChanged: {
                if (visible) {
                    // Auto-hide after 3 seconds
                    statusPopupTimer.restart()
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/Music.qml">import QtQuick 
import QtQuick.Controls
import QtQuick.Layouts
import Qt5Compat.GraphicalEffects
import qs.Settings
import qs.Components
import qs.Services

Rectangle {
    id: musicCard
    width: 360
    height: 250
    color: &quot;transparent&quot;

    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18

        // Show fallback UI if no player is available
        Item {
            width: parent.width
            height: parent.height
            visible: !MusicManager.currentPlayer

            ColumnLayout {
                anchors.centerIn: parent
                spacing: 16

                Text {
                    text: &quot;music_note&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: Theme.fontSizeHeader
                    color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    Layout.alignment: Qt.AlignHCenter
                }

                Text {
                    text: MusicManager.hasPlayer ? &quot;No controllable player selected&quot; : &quot;No music player detected&quot;
                    color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.6)
                    font.family: Theme.fontFamily
                    font.pixelSize: Theme.fontSizeSmall
                    Layout.alignment: Qt.AlignHCenter
                }
            }
        }

        // Main player UI
        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 18
            spacing: 12
            visible: !!MusicManager.currentPlayer

            // Album art and spectrum
            RowLayout {
                spacing: 12
                Layout.fillWidth: true

                // Album art with spectrum
                Item {
                    id: albumArtContainer
                    width: 96; height: 96 // enough for spectrum and art (will adjust if needed)
                    Layout.alignment: Qt.AlignLeft | Qt.AlignVCenter

                    // Spectrum visualizer
                    CircularSpectrum {
                        id: spectrum
                        values: MusicManager.cavaValues
                        anchors.centerIn: parent
                        innerRadius: 30 // just outside 60x60 album art
                        outerRadius: 48 // how far bars extend
                        fillColor: Theme.accentPrimary
                        strokeColor: Theme.accentPrimary
                        strokeWidth: 0
                        z: 0
                    }

                    // Album art image
                    Rectangle {
                        id: albumArtwork
                        width: 60; height: 60
                        anchors.centerIn: parent
                        radius: 30 // circle
                        color: Qt.darker(Theme.surface, 1.1)
                        border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                        border.width: 1

                        Image {
                            id: albumArt
                            anchors.fill: parent
                            anchors.margins: 2
                            fillMode: Image.PreserveAspectCrop
                            smooth: true
                            cache: false
                            asynchronous: true
                            sourceSize.width: 60
                            sourceSize.height: 60
                            source: MusicManager.trackArtUrl
                            visible: source.toString() !== &quot;&quot;

                            // Rounded corners using layer
                            layer.enabled: true
                            layer.effect: OpacityMask {
                                cached: true
                                maskSource: Rectangle {
                                    width: albumArt.width
                                    height: albumArt.height
                                    radius: albumArt.width / 2 // circle
                                    visible: false
                                }
                            }
                        }

                        // Fallback icon
                        Text {
                            anchors.centerIn: parent
                            text: &quot;album&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: Theme.fontSizeBody
                            color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.4)
                            visible: !albumArt.visible
                        }
                    }
                }

                // Track metadata
                ColumnLayout {
                    Layout.fillWidth: true
                    spacing: 4

                    Text {
                        text: MusicManager.trackTitle
                        color: Theme.textPrimary
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeSmall
                        font.bold: true
                        elide: Text.ElideRight
                        wrapMode: Text.Wrap
                        maximumLineCount: 2
                        Layout.fillWidth: true
                    }

                    Text {
                        text: MusicManager.trackArtist
                        color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.8)
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeCaption
                        elide: Text.ElideRight
                        Layout.fillWidth: true
                    }

                    Text {
                        text: MusicManager.trackAlbum
                        color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.6)
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeCaption
                        elide: Text.ElideRight
                        Layout.fillWidth: true
                    }
                }
            }

            // Progress bar
            Rectangle {
                id: progressBarBackground
                width: parent.width
                height: 6
                radius: 3
                color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.15)
                Layout.fillWidth: true

                property real progressRatio: Math.min(1, MusicManager.trackLength &gt; 0 ? 
                                           (MusicManager.currentPosition / MusicManager.trackLength) : 0)

                Rectangle {
                    id: progressFill
                    width: progressBarBackground.progressRatio * parent.width
                    height: parent.height
                    radius: parent.radius
                    color: Theme.accentPrimary

                    Behavior on width {
                        NumberAnimation { duration: 200 }
                    }
                }

                // Interactive progress handle
                Rectangle {
                    id: progressHandle
                    width: 12
                    height: 12
                    radius: 6
                    color: Theme.accentPrimary
                    border.color: Qt.lighter(Theme.accentPrimary, 1.3)
                    border.width: 1

                    x: Math.max(0, Math.min(parent.width - width, progressFill.width - width/2))
                    anchors.verticalCenter: parent.verticalCenter

                    visible: MusicManager.trackLength &gt; 0
                    scale: progressMouseArea.containsMouse || progressMouseArea.pressed ? 1.2 : 1.0

                    Behavior on scale {
                        NumberAnimation { duration: 150 }
                    }
                }

                // Mouse area for seeking
                MouseArea {
                    id: progressMouseArea
                    anchors.fill: parent
                    hoverEnabled: true
                    cursorShape: Qt.PointingHandCursor
                    enabled: MusicManager.trackLength &gt; 0 &amp;&amp; MusicManager.canSeek

                    onClicked: function(mouse) {
                        let ratio = mouse.x / width
                        MusicManager.seekByRatio(ratio)
                    }

                    onPositionChanged: function(mouse) {
                        if (pressed) {
                            let ratio = Math.max(0, Math.min(1, mouse.x / width))
                            MusicManager.seekByRatio(ratio)
                        }
                    }
                }
            }

            // Media controls
            RowLayout {
                spacing: 4
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter

                // Previous button
                Rectangle {
                    width: 28
                    height: 28
                    radius: 14
                    color: previousButton.containsMouse ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.2) : Qt.darker(Theme.surface, 1.1)
                    border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                    border.width: 1

                    MouseArea {
                        id: previousButton
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        enabled: MusicManager.canGoPrevious
                        onClicked: MusicManager.previous()
                    }

                    Text {
                        anchors.centerIn: parent
                        text: &quot;skip_previous&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeCaption
                        color: previousButton.enabled ? Theme.accentPrimary : Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    }
                }

                // Play/Pause button
                Rectangle {
                    width: 36
                    height: 36
                    radius: 18
                    color: playButton.containsMouse ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.2) : Qt.darker(Theme.surface, 1.1)
                    border.color: Theme.accentPrimary
                    border.width: 2

                    MouseArea {
                        id: playButton
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        enabled: MusicManager.canPlay || MusicManager.canPause
                        onClicked: MusicManager.playPause()
                    }

                    Text {
                        anchors.centerIn: parent
                        text: MusicManager.isPlaying ? &quot;pause&quot; : &quot;play_arrow&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeBody
                        color: playButton.enabled ? Theme.accentPrimary : Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    }
                }

                // Next button
                Rectangle {
                    width: 28
                    height: 28
                    radius: 14
                    color: nextButton.containsMouse ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.2) : Qt.darker(Theme.surface, 1.1)
                    border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                    border.width: 1

                    MouseArea {
                        id: nextButton
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        enabled: MusicManager.canGoNext
                        onClicked: MusicManager.next()
                    }

                    Text {
                        anchors.centerIn: parent
                        text: &quot;skip_next&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeCaption
                        color: nextButton.enabled ? Theme.accentPrimary : Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/PanelPopup.qml">import QtQuick
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import Quickshell.Wayland
import qs.Settings
import qs.Widgets.Sidebar.Config
import qs.Components

PanelWithOverlay {
    id: sidebarPopup

    function showAt() {
        sidebarPopupRect.showAt();
    }

    function hidePopup() {
        sidebarPopupRect.hidePopup();
    }

    function show() {
        sidebarPopupRect.showAt();
    }

    function dismiss() {
        sidebarPopupRect.hidePopup();
    }

    Rectangle {
        id: sidebarPopupRect
        implicitWidth: 500
        implicitHeight: 800
        visible: parent.visible
        color: &quot;transparent&quot;
        anchors.top: parent.top
        anchors.right: parent.right

        // Animation properties
        property real slideOffset: width
        property bool isAnimating: false

        function showAt() {
            if (!sidebarPopup.visible) {
                sidebarPopup.visible = true;
                forceActiveFocus();
                slideAnim.from = width;
                slideAnim.to = 0;
                slideAnim.running = true;
                if (weather)
                    weather.startWeatherFetch();
                if (systemWidget)
                    systemWidget.panelVisible = true;
                if (quickAccessWidget)
                    quickAccessWidget.panelVisible = true;
            }
        }

        function hidePopup() {
            if (sidebarPopupRect.settingsModal &amp;&amp; sidebarPopupRect.settingsModal.visible) {
                sidebarPopupRect.settingsModal.visible = false;
            }
            if (sidebarPopupRect.wallpaperPanelModal &amp;&amp; sidebarPopupRect.wallpaperPanelModal.visible) {
                sidebarPopupRect.wallpaperPanelModal.visible = false;
            }
                if (sidebarPopupRect.wifiPanelModal &amp;&amp; sidebarPopupRect.wifiPanelModal.visible) {
                    sidebarPopupRect.wifiPanelModal.visible = false;
                }
                if (sidebarPopupRect.bluetoothPanelModal &amp;&amp; sidebarPopupRect.bluetoothPanelModal.visible) {
                    sidebarPopupRect.bluetoothPanelModal.visible = false;
                }
            if (sidebarPopup.visible) {
                slideAnim.from = 0;
                slideAnim.to = width;
                slideAnim.running = true;
            }
        }

        NumberAnimation {
            id: slideAnim
            target: sidebarPopupRect
            property: &quot;slideOffset&quot;
            duration: 300
            easing.type: Easing.OutCubic

            onStopped: {
                if (sidebarPopupRect.slideOffset === sidebarPopupRect.width) {
                    sidebarPopup.visible = false;
                    // Stop monitoring and background tasks when hidden
                    if (weather)
                        weather.stopWeatherFetch();
                    if (systemWidget)
                        systemWidget.panelVisible = false;
                    if (quickAccessWidget)
                        quickAccessWidget.panelVisible = false;
                }
                sidebarPopupRect.isAnimating = false;
            }

            onStarted: {
                sidebarPopupRect.isAnimating = true;
            }
        }

        property int leftPadding: 20
        property int bottomPadding: 20

        Rectangle {
            id: mainRectangle
            width: sidebarPopupRect.width - sidebarPopupRect.leftPadding
            height: sidebarPopupRect.height - sidebarPopupRect.bottomPadding
            anchors.top: sidebarPopupRect.top
            x: sidebarPopupRect.leftPadding + sidebarPopupRect.slideOffset
            y: 0
            color: Theme.backgroundPrimary
            bottomLeftRadius: 20
            z: 0

            Behavior on x {
                enabled: !sidebarPopupRect.isAnimating
                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }
            }
        }

        property alias settingsModal: settingsModal
        property alias wallpaperPanelModal: wallpaperPanelModal
        property alias wifiPanelModal: wifiPanel.panel
        property alias bluetoothPanelModal: bluetoothPanel.panel
        SettingsModal {
            id: settingsModal
        }

        Item {
            anchors.fill: mainRectangle
            x: sidebarPopupRect.slideOffset

            Behavior on x {
                enabled: !sidebarPopupRect.isAnimating
                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }
            }

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 20
                spacing: 16

                System {
                    id: systemWidget
                    Layout.alignment: Qt.AlignHCenter
                    z: 3
                }

                Weather {
                    id: weather
                    Layout.alignment: Qt.AlignHCenter
                    z: 2
                }

                // Music and System Monitor row
                RowLayout {
                    spacing: 12
                    Layout.fillWidth: true
                    Layout.alignment: Qt.AlignHCenter

                    Music {
                        z: 2
                    }

                    SystemMonitor {
                        id: systemMonitor
                        z: 2
                    }
                }

                // Power profile, Wifi and Bluetooth row
                RowLayout {
                    Layout.alignment: Qt.AlignLeft
                    Layout.preferredHeight: 80
                    spacing: 16
                    z: 3

                    PowerProfile {
                        Layout.alignment: Qt.AlignLeft
                        Layout.preferredHeight: 80
                    }

                    // Network card containing Wifi and Bluetooth
                    Rectangle {
                        Layout.preferredHeight: 80
                        Layout.preferredWidth: 140
                        Layout.fillWidth: false
                        color: Theme.surface
                        radius: 18

                        Row {
                            anchors.horizontalCenter: parent.horizontalCenter
                            anchors.verticalCenter: parent.verticalCenter
                            spacing: 20

                            // Wifi button
                            Rectangle {
                                id: wifiButton
                                width: 36
                                height: 36
                                radius: 18
                                border.color: Theme.accentPrimary
                                border.width: 1
                                color: wifiButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                                Text {
                                    anchors.centerIn: parent
                                    text: &quot;wifi&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 22
                                    color: wifiButtonArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                                    verticalAlignment: Text.AlignVCenter
                                    horizontalAlignment: Text.AlignHCenter
                                }

                                MouseArea {
                                    id: wifiButtonArea
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    cursorShape: Qt.PointingHandCursor
                                    onClicked: wifiPanel.showAt()
                                }

                                StyledTooltip {
                                    text: &quot;Wifi&quot;
                                    targetItem: wifiButtonArea
                                    tooltipVisible: wifiButtonArea.containsMouse
                                }
                            }

                            // Bluetooth button
                            Rectangle {
                                id: bluetoothButton
                                width: 36
                                height: 36
                                radius: 18
                                border.color: Theme.accentPrimary
                                border.width: 1
                                color: bluetoothButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                                Text {
                                    anchors.centerIn: parent
                                    text: &quot;bluetooth&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 22
                                    color: bluetoothButtonArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                                    verticalAlignment: Text.AlignVCenter
                                    horizontalAlignment: Text.AlignHCenter
                                }

                                MouseArea {
                                    id: bluetoothButtonArea
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    cursorShape: Qt.PointingHandCursor
                                    onClicked: bluetoothPanel.showAt()
                                }

                                StyledTooltip {
                                    text: &quot;Bluetooth&quot;
                                    targetItem: bluetoothButtonArea
                                    tooltipVisible: bluetoothButtonArea.containsMouse
                                }
                            }
                        }
                    }
                }

                // Hidden panel components for modal functionality
                WifiPanel {
                    id: wifiPanel
                    visible: false
                }
                BluetoothPanel {
                    id: bluetoothPanel
                    visible: false
                }

                Item {
                    Layout.fillHeight: true
                }

                // QuickAccess widget
                QuickAccess {
                    id: quickAccessWidget
                    Layout.alignment: Qt.AlignHCenter
                    Layout.topMargin: -16
                    z: 2
                    isRecording: sidebarPopupRect.isRecording

                    onRecordingRequested: {
                        sidebarPopupRect.startRecording();
                    }

                    onStopRecordingRequested: {
                        sidebarPopupRect.stopRecording();
                    }

                    onRecordingStateMismatch: function (actualState) {
                        isRecording = actualState;
                        quickAccessWidget.isRecording = actualState;
                    }

                    onSettingsRequested: {
                        settingsModal.visible = true;
                    }
                    onWallpaperRequested: {
                        wallpaperPanelModal.visible = true;
                    }
                }
            }
            Keys.onEscapePressed: sidebarPopupRect.hidePopup()
        }

        // Recording properties
        property bool isRecording: false

        // Start screen recording using Quickshell.execDetached
        function startRecording() {
            var currentDate = new Date();
            var hours = String(currentDate.getHours()).padStart(2, &apos;0&apos;);
            var minutes = String(currentDate.getMinutes()).padStart(2, &apos;0&apos;);
            var day = String(currentDate.getDate()).padStart(2, &apos;0&apos;);
            var month = String(currentDate.getMonth() + 1).padStart(2, &apos;0&apos;);
            var year = currentDate.getFullYear();

            var filename = hours + &quot;-&quot; + minutes + &quot;-&quot; + day + &quot;-&quot; + month + &quot;-&quot; + year + &quot;.mp4&quot;;
            var videoPath = Settings.settings.videoPath;
            if (videoPath &amp;&amp; !videoPath.endsWith(&quot;/&quot;)) {
                videoPath += &quot;/&quot;;
            }
            var outputPath = videoPath + filename;
            var command = &quot;gpu-screen-recorder -w portal -f 60 -a default_output -o &quot; + outputPath;
            Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, command]);
            isRecording = true;
            quickAccessWidget.isRecording = true;
        }

        // Stop recording using Quickshell.execDetached
        function stopRecording() {
            Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, &quot;pkill -SIGINT -f &apos;gpu-screen-recorder.*portal&apos;&quot;]);
            // Optionally, force kill after a delay
            var cleanupTimer = Qt.createQmlObject(&apos;import QtQuick; Timer { interval: 3000; running: true; repeat: false }&apos;, sidebarPopupRect);
            cleanupTimer.triggered.connect(function () {
                Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, &quot;pkill -9 -f &apos;gpu-screen-recorder.*portal&apos; 2&gt;/dev/null || true&quot;]);
                cleanupTimer.destroy();
            });
            isRecording = false;
            quickAccessWidget.isRecording = false;
        }

        // Clean up processes on destruction
        Component.onDestruction: {
            if (isRecording) {
                stopRecording();
            }
        }

        Corners {
            id: sidebarCornerLeft
            position: &quot;bottomright&quot;
            size: 1.1
            fillColor: Theme.backgroundPrimary
            anchors.top: mainRectangle.top
            offsetX: -447 + sidebarPopupRect.slideOffset
            offsetY: 0
            visible: Settings.settings.showCorners

            Behavior on offsetX {
                enabled: !sidebarPopupRect.isAnimating
                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }
            }
        }

        Corners {
            id: sidebarCornerBottom
            position: &quot;bottomright&quot;
            size: 1.1
            fillColor: Theme.backgroundPrimary
            offsetX: 33 + sidebarPopupRect.slideOffset
            offsetY: 46
            visible: Settings.settings.showCorners

            Behavior on offsetX {
                enabled: !sidebarPopupRect.isAnimating
                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }
            }
        }

        WallpaperPanel {
            id: wallpaperPanelModal
            visible: false
            Component.onCompleted: {
                if (parent) {
                    wallpaperPanelModal.anchors.top = parent.top;
                    wallpaperPanelModal.anchors.right = parent.right;
                }
            }
            // Add a close button inside WallpaperPanel.qml for user to close the modal
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/PowerProfile.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Services.UPower
import qs.Settings
import qs.Components

Rectangle {
    id: card
    width: 200
    height: 70
    color: Theme.surface
    radius: 18

    Row {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
        spacing: 20

        // Performance
        Rectangle {
            width: 36; height: 36
            radius: 18
            border.color: Theme.accentPrimary
            border.width: 1
            color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Performance)
                ? Theme.accentPrimary
                : (perfMouseArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
            opacity: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; !PowerProfiles.hasPerformanceProfile) ? 0.4 : 1

            Text {
                id: perfIcon
                anchors.centerIn: parent
                text: &quot;speed&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22
                color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Performance) || perfMouseArea.containsMouse
                    ? Theme.backgroundPrimary
                    : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: perfMouseArea
                anchors.fill: parent
                hoverEnabled: true
                enabled: typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.hasPerformanceProfile
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof PowerProfiles !== &apos;undefined&apos;)
                        PowerProfiles.profile = PowerProfile.Performance;
                }
                onEntered: perfTooltip.tooltipVisible = true
                onExited: perfTooltip.tooltipVisible = false
            }
            StyledTooltip {
                id: perfTooltip
                text: &quot;Performance Profile&quot;
                tooltipVisible: false
                targetItem: perfIcon
                delay: 200
            }
        }

        // Balanced
        Rectangle {
            width: 36; height: 36
            radius: 18
            border.color: Theme.accentPrimary
            border.width: 1
            color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Balanced)
                ? Theme.accentPrimary
                : (balMouseArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
            opacity: 1

            Text {
                id: balIcon
                anchors.centerIn: parent
                text: &quot;balance&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22
                color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Balanced) || balMouseArea.containsMouse
                    ? Theme.backgroundPrimary
                    : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: balMouseArea
                anchors.fill: parent
                hoverEnabled: true
                enabled: true
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof PowerProfiles !== &apos;undefined&apos;)
                        PowerProfiles.profile = PowerProfile.Balanced;
                }
                onEntered: balTooltip.tooltipVisible = true
                onExited: balTooltip.tooltipVisible = false
            }
            StyledTooltip {
                id: balTooltip
                text: &quot;Balanced Profile&quot;
                tooltipVisible: false
                targetItem: balIcon
                delay: 200
            }
        }

        // Power Saver
        Rectangle {
            width: 36; height: 36
            radius: 18
            border.color: Theme.accentPrimary
            border.width: 1
            color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.PowerSaver)
                ? Theme.accentPrimary
                : (saveMouseArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
            opacity: 1

            Text {
                id: saveIcon
                anchors.centerIn: parent
                text: &quot;eco&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22
                color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.PowerSaver) || saveMouseArea.containsMouse
                    ? Theme.backgroundPrimary
                    : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: saveMouseArea
                anchors.fill: parent
                hoverEnabled: true
                enabled: true
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof PowerProfiles !== &apos;undefined&apos;)
                        PowerProfiles.profile = PowerProfile.PowerSaver;
                }
                onEntered: saveTooltip.tooltipVisible = true
                onExited: saveTooltip.tooltipVisible = false
            }
            StyledTooltip {
                id: saveTooltip
                text: &quot;Power Saver Profile&quot;
                tooltipVisible: false
                targetItem: saveIcon
                delay: 200
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/QuickAccess.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Qt5Compat.GraphicalEffects
import Quickshell
import Quickshell.Io
import qs.Settings

Rectangle {
    id: quickAccessWidget
    width: 440
    height: 80
    color: &quot;transparent&quot;
    anchors.horizontalCenterOffset: -2
    
    required property bool isRecording
    
    signal recordingRequested()
    signal stopRecordingRequested()
    signal recordingStateMismatch(bool actualState)
    signal settingsRequested()
    signal wallpaperRequested()

    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18

        RowLayout {
            anchors.fill: parent
            anchors.margins: 18
            spacing: 12

            // Settings Button
            Rectangle {
                id: settingsButton
                Layout.fillWidth: true
                Layout.preferredHeight: 44
                radius: 12
                color: settingsButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                border.color: Theme.accentPrimary
                border.width: 1

                RowLayout {
                    anchors.fill: parent
                    anchors.margins: 12
                    spacing: 8

                    Text {
                        text: &quot;settings&quot;
                        font.family: settingsButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 16
                        color: settingsButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                    }

                    Text {
                        text: &quot;Settings&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: 14
                        font.bold: true
                        color: settingsButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        Layout.fillWidth: true
                    }
                }

                MouseArea {
                    id: settingsButtonArea
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    hoverEnabled: true
                    onClicked: {
                        settingsRequested()
                    }
                }
            }

            // Screen Recorder Button
            Rectangle {
                id: recorderButton
                Layout.fillWidth: true
                Layout.preferredHeight: 44
                radius: 12
                color: isRecording ? Theme.accentPrimary : 
                       (recorderButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
                border.color: Theme.accentPrimary
                border.width: 1

                RowLayout {
                    anchors.fill: parent
                    anchors.margins: 12
                    spacing: 8

                    Text {
                        text: isRecording ? &quot;radio_button_checked&quot; : &quot;radio_button_unchecked&quot;
                        font.family: (isRecording || recorderButtonArea.containsMouse) ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 16
                        color: isRecording || recorderButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                    }

                    Text {
                        text: isRecording ? &quot;End&quot; : &quot;Record&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: 14
                        font.bold: true
                        color: isRecording || recorderButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        Layout.fillWidth: true
                    }
                }

                MouseArea {
                    id: recorderButtonArea
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    hoverEnabled: true
                    onClicked: {
                        if (isRecording) {
                            stopRecordingRequested()
                        } else {
                            recordingRequested()
                        }
                    }
                }
            }

            // Wallpaper Button
            Rectangle {
                id: wallpaperButton
                Layout.fillWidth: true
                Layout.preferredHeight: 44
                radius: 12
                color: wallpaperButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                border.color: Theme.accentPrimary
                border.width: 1

                RowLayout {
                    anchors.fill: parent
                    anchors.margins: 12
                    spacing: 8

                    Text {
                        text: &quot;image&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 16
                        color: wallpaperButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                    }

                    Text {
                        text: &quot;Wallpaper&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: 14
                        font.bold: true
                        color: wallpaperButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        Layout.fillWidth: true
                    }
                }

                MouseArea {
                    id: wallpaperButtonArea
                    anchors.fill: parent
                    cursorShape: Qt.PointingHandCursor
                    hoverEnabled: true
                    onClicked: {
                        wallpaperRequested()
                    }
                }
            }
        }
    }

    // Properties
    property bool panelVisible: false

    // Timer to check if recording is active
    Timer {
        interval: 2000
        repeat: true
        running: panelVisible
        onTriggered: checkRecordingStatus()
    }

    function checkRecordingStatus() {
        if (isRecording) {
            checkRecordingProcess.running = true
        }
    }

    // Process to check if gpu-screen-recorder is running
    Process {
        id: checkRecordingProcess
        command: [&quot;pgrep&quot;, &quot;-f&quot;, &quot;gpu-screen-recorder.*portal&quot;]
        onExited: function(exitCode, exitStatus) {
            var isActuallyRecording = exitCode === 0
            if (isRecording &amp;&amp; !isActuallyRecording) {
                recordingStateMismatch(isActuallyRecording)
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/System.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Qt5Compat.GraphicalEffects
import Quickshell
import Quickshell.Io
import qs.Settings
import qs.Widgets
import qs.Helpers
import qs.Components

Rectangle {
    id: systemWidget
    width: 440
    height: 80
    color: &quot;transparent&quot;
    anchors.horizontalCenterOffset: -2

    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 18
            spacing: 12

            // User info row
            RowLayout {
                Layout.fillWidth: true
                spacing: 12

                // Profile image
                Rectangle {
                    width: 48
                    height: 48
                    radius: 24
                    color: Theme.accentPrimary

                    // Border
                    Rectangle {
                        anchors.fill: parent
                        color: &quot;transparent&quot;
                        radius: 24
                        border.color: Theme.accentPrimary
                        border.width: 2
                        z: 2
                    }

                    OpacityMask {
                        anchors.fill: parent
                        source: Image {
                            id: avatarImage
                            anchors.fill: parent
                            source: Settings.settings.profileImage !== undefined ? Settings.settings.profileImage : &quot;&quot;
                            fillMode: Image.PreserveAspectCrop
                            asynchronous: true
                            cache: false
                            sourceSize.width: 44
                            sourceSize.height: 44
                        }
                        maskSource: Rectangle {
                            width: 44
                            height: 44
                            radius: 22
                            visible: false
                        }
                        visible: Settings.settings.profileImage !== undefined &amp;&amp; Settings.settings.profileImage !== &quot;&quot;
                        z: 1
                    }

                    // Fallback icon
                    Text {
                        anchors.centerIn: parent
                        text: &quot;person&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 24
                        color: Theme.onAccent
                        visible: Settings.settings.profileImage === undefined || Settings.settings.profileImage === &quot;&quot;
                        z: 0
                    }
                }

                // User info text
                ColumnLayout {
                    spacing: 4
                    Layout.fillWidth: true

                    Text {
                        text: Quickshell.env(&quot;USER&quot;)
                        font.family: Theme.fontFamily
                        font.pixelSize: 16
                        font.bold: true
                        color: Theme.textPrimary
                    }

                    Text {
                        text: &quot;System Uptime: &quot; + uptimeText
                        font.family: Theme.fontFamily
                        font.pixelSize: 12
                        color: Theme.textSecondary
                    }
                }

                // Spacer
                Item {
                    Layout.fillWidth: true
                }

                // System menu button
                Rectangle {
                    id: systemButton
                    width: 32
                    height: 32
                    radius: 16
                    color: systemButtonArea.containsMouse || systemButtonArea.pressed ? Theme.accentPrimary : &quot;transparent&quot;
                    border.color: Theme.accentPrimary
                    border.width: 1

                    Text {
                        anchors.centerIn: parent
                        text: &quot;power_settings_new&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 16
                        color: systemButtonArea.containsMouse || systemButtonArea.pressed ? Theme.backgroundPrimary : Theme.accentPrimary
                    }

                    MouseArea {
                        id: systemButtonArea
                        anchors.fill: parent
                        cursorShape: Qt.PointingHandCursor
                        hoverEnabled: true
                        onClicked: {
                            systemMenu.visible = !systemMenu.visible;
                        }
                    }
                    StyledTooltip {
                        id: systemTooltip
                        text: &quot;System&quot;
                        targetItem: systemButton
                        tooltipVisible: systemButtonArea.containsMouse
                    }
                }
            }
        }
    }

    PanelWithOverlay {
        id: systemMenu
        anchors.top: systemButton.bottom
        anchors.right: systemButton.right
        // System menu popup
        Rectangle {

            width: 160
            height: 220
            color: Theme.surface
            radius: 8
            border.color: Theme.outline
            border.width: 1
            visible: true
            z: 9999
            anchors.top: parent.top
            anchors.right: parent.right

            // Position below system button
            anchors.rightMargin: 32
            anchors.topMargin: systemButton.y + systemButton.height + 48

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 8
                spacing: 4

                // Lock button
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36
                    radius: 6
                    color: lockButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 12
                        spacing: 8

                        Text {
                            text: &quot;lock_outline&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 16
                            color: lockButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        }

                        Text {
                            text: &quot;Lock Screen&quot;
                            font.family: Theme.fontFamily
                            font.pixelSize: 14
                            color: lockButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                            Layout.fillWidth: true
                        }
                    }

                    MouseArea {
                        id: lockButtonArea
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            lockScreen.locked = true;
                            systemMenu.visible = false;
                        }
                    }
                }

                // Suspend button
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36
                    radius: 6
                    color: suspendButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 12
                        spacing: 8

                        Text {
                            text: &quot;bedtime&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 16
                            color: suspendButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        }

                        Text {
                            text: &quot;Suspend&quot;
                            font.pixelSize: 14
                            color: suspendButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                            Layout.fillWidth: true
                        }
                    }

                    MouseArea {
                        id: suspendButtonArea
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            suspend();
                            systemMenu.visible = false;
                        }
                    }
                }

                // Reboot button
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36
                    radius: 6
                    color: rebootButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 12
                        spacing: 8

                        Text {
                            text: &quot;refresh&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 16
                            color: rebootButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        }

                        Text {
                            text: &quot;Reboot&quot;
                            font.family: Theme.fontFamily
                            font.pixelSize: 14
                            color: rebootButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                            Layout.fillWidth: true
                        }
                    }

                    MouseArea {
                        id: rebootButtonArea
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            reboot();
                            systemMenu.visible = false;
                        }
                    }
                }

                // Logout button
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36
                    radius: 6
                    color: logoutButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 12
                        spacing: 8

                        Text {
                            text: &quot;exit_to_app&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 16
                            color: logoutButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        }

                        Text {
                            text: &quot;Logout&quot;
                            font.pixelSize: 14
                            color: logoutButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                            Layout.fillWidth: true
                        }
                    }

                    MouseArea {
                        id: logoutButtonArea
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            logout();
                            systemMenu.visible = false;
                        }
                    }
                }

                // Shutdown button
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36
                    radius: 6
                    color: shutdownButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

                    RowLayout {
                        anchors.fill: parent
                        anchors.margins: 12
                        spacing: 8

                        Text {
                            text: &quot;power_settings_new&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 16
                            color: shutdownButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                        }

                        Text {
                            text: &quot;Shutdown&quot;
                            font.pixelSize: 14
                            color: shutdownButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                            Layout.fillWidth: true
                        }
                    }

                    MouseArea {
                        id: shutdownButtonArea
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            shutdown();
                            systemMenu.visible = false;
                        }
                    }
                }
            }
        }
    }

    // Properties
    property string uptimeText: &quot;--:--&quot;

    // Process to get uptime
    Process {
        id: uptimeProcess
        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;uptime | awk -F &apos;up &apos; &apos;{print $2}&apos; | awk -F &apos;,&apos; &apos;{print $1}&apos; | xargs&quot;]
        running: false
        stdout: StdioCollector {
            onStreamFinished: {
                uptimeText = this.text.trim();
                uptimeProcess.running = false;
            }
        }
    }

    Process {
        id: shutdownProcess
        command: [&quot;shutdown&quot;, &quot;-h&quot;, &quot;now&quot;]
        running: false
    }

    Process {
        id: rebootProcess
        command: [&quot;reboot&quot;]
        running: false
    }

    Process {
        id: suspendProcess
        command: [&quot;systemctl&quot;, &quot;suspend&quot;]
        running: false
    }

        Process {
        id: logoutProcessNiri
        command: [&quot;niri&quot;, &quot;msg&quot;, &quot;action&quot;, &quot;quit&quot;, &quot;--skip-confirmation&quot;]
        running: false
    }

    Process {
        id: logoutProcessHyprland
        command: [&quot;hyprctl&quot;, &quot;dispatch&quot;, &quot;exit&quot;]
        running: false
    }

    function logout() {
        if (WorkspaceManager.isNiri) {
            logoutProcessNiri.running = true;
        } else if (WorkspaceManager.isHyprland) {
            logoutProcessHyprland.running = true;
        } else {
            // fallback or error
            console.warn(&quot;No supported compositor detected for logout&quot;);
        }
    }

    function suspend() {
        suspendProcess.running = true;
    }

    function shutdown() {
        shutdownProcess.running = true;
    }

    function reboot() {
        rebootProcess.running = true;
    }


    property bool panelVisible: false

    // Trigger initial update when panel becomes visible
    onPanelVisibleChanged: {
        if (panelVisible) {
            updateSystemInfo();
        }
    }

    // Timer to update uptime - only runs when panel is visible
    Timer {
        interval: 60000 // Update every minute
        repeat: true
        running: panelVisible
        onTriggered: updateSystemInfo()
    }

    Component.onCompleted: {
        uptimeProcess.running = true;
    }

    function updateSystemInfo() {
        uptimeProcess.running = true;
    }

    // Add lockscreen instance (hidden by default)
    LockScreen {
        id: lockScreen
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/SystemMonitor.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Io
import qs.Components
import qs.Services
import qs.Settings

Rectangle {
    id: systemMonitor
    width: 70
    height: 250
    color: &quot;transparent&quot;

    property bool isVisible: false

    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 8
            spacing: 12
            Layout.alignment: Qt.AlignVCenter

            // CPU Usage
            Item {
                width: 50; height: 50
                CircularProgressBar {
                    id: cpuBar
                    progress: Sysinfo.cpuUsage / 100
                    size: 50
                    strokeWidth: 4
                    hasNotch: true
                    notchIcon: &quot;speed&quot;
                    notchIconSize: 14
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: cpuBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: cpuTooltip.tooltipVisible = true
                    onExited: cpuTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: cpuTooltip
                    text: &apos;CPU Usage: &apos; + Sysinfo.cpuUsage + &apos;%&apos;
                    tooltipVisible: false
                    targetItem: cpuBar
                    delay: 200
                }
            }

            // Cpu Temp
            Item {
                width: 50; height: 50
                CircularProgressBar {
                    id: tempBar
                    progress: Sysinfo.cpuTemp / 100
                    size: 50
                    strokeWidth: 4
                    hasNotch: true
                    units: &quot;°C&quot;
                    notchIcon: &quot;thermometer&quot;
                    notchIconSize: 14
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: tempBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: tempTooltip.tooltipVisible = true
                    onExited: tempTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: tempTooltip
                    text: &apos;CPU Temp: &apos; + Sysinfo.cpuTemp + &apos;°C&apos;
                    tooltipVisible: false
                    targetItem: tempBar
                    delay: 200
                }
            }

            // Memory Usage
            Item {
                width: 50; height: 50
                CircularProgressBar {
                    id: memBar
                    progress: Sysinfo.memoryUsagePer / 100
                    size: 50
                    strokeWidth: 4
                    hasNotch: true
                    notchIcon: &quot;memory&quot;
                    notchIconSize: 14
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: memBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: memTooltip.tooltipVisible = true
                    onExited: memTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: memTooltip
                    text: &apos;Memory Usage: &apos; + Sysinfo.memoryUsagePer + &apos;% (&apos; + Sysinfo.memoryUsageStr + &apos; used)&apos;
                    tooltipVisible: false
                    targetItem: memBar
                    delay: 200
                }
            }

            // Disk Usage
            Item {
                width: 50; height: 50
                CircularProgressBar {
                    id: diskBar
                    progress: Sysinfo.diskUsage / 100
                    size: 50
                    strokeWidth: 4
                    hasNotch: true
                    notchIcon: &quot;storage&quot;
                    notchIconSize: 14
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: diskBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: diskTooltip.tooltipVisible = true
                    onExited: diskTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: diskTooltip
                    text: &apos;Disk Usage: &apos; + Sysinfo.diskUsage + &apos;%&apos;
                    tooltipVisible: false
                    targetItem: diskBar
                    delay: 200
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/WallpaperPanel.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell
import Quickshell.Io
import Quickshell.Widgets
import Quickshell.Wayland
import qs.Settings
import qs.Services

PanelWindow {
    id: wallpaperPanelModal
    implicitWidth: 480
    implicitHeight: 780
    visible: false
    color: &quot;transparent&quot;
    anchors.top: true
    anchors.right: true
    margins.right: 0
    margins.top: 0
    WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand

    property var wallpapers: []

    Connections {
        target: WallpaperManager
        function onWallpaperListChanged() {
            wallpapers = WallpaperManager.wallpaperList
        }
    }

    onVisibleChanged: {
        if (wallpaperPanelModal.visible) {
            wallpapers = WallpaperManager.wallpaperList
        } else {
            wallpapers = []
        }
    }

    Rectangle {
        anchors.fill: parent
        color: Theme.backgroundPrimary
        radius: 24
        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 32
            spacing: 0
            RowLayout {
                Layout.fillWidth: true
                spacing: 20
                Layout.preferredHeight: 48
                Text {
                    text: &quot;image&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: Theme.fontSizeHeader
                    color: Theme.accentPrimary
                }
                Text {
                    text: &quot;Wallpapers&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: Theme.fontSizeHeader
                    font.bold: true
                    color: Theme.textPrimary
                    Layout.fillWidth: true
                }
                Rectangle {
                    width: 36
                    height: 36
                    radius: 18
                    color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                    border.color: Theme.accentPrimary
                    border.width: 1
                    Text {
                        anchors.centerIn: parent
                        text: &quot;close&quot;
                        font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeBody
                        color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                    }
                    MouseArea {
                        id: closeButtonArea
                        anchors.fill: parent
                        hoverEnabled: true
                        onClicked: wallpaperPanelModal.visible = false
                        cursorShape: Qt.PointingHandCursor
                    }
                }
            }
            Rectangle {
                Layout.fillWidth: true
                height: 1
                color: Theme.outline
                opacity: 0.12
            }
            // Wallpaper grid area
            Item {
                Layout.fillWidth: true
                Layout.fillHeight: true
                anchors.topMargin: 16
                anchors.bottomMargin: 16
                anchors.leftMargin: 0
                anchors.rightMargin: 0
                anchors.margins: 0
                clip: true
                ScrollView {
                    id: scrollView
                    anchors.fill: parent
                    clip: true
                    ScrollBar.horizontal.policy: ScrollBar.AlwaysOff
                    ScrollBar.vertical.policy: ScrollBar.AsNeeded
                    GridView {
                        id: wallpaperGrid
                        anchors.fill: parent
                        cellWidth: Math.max(120, (scrollView.width / 3) - 12)
                        cellHeight: cellWidth * 0.6
                        model: wallpapers
                        cacheBuffer: 32
                        leftMargin: 8
                        rightMargin: 8
                        topMargin: 8
                        bottomMargin: 8
                        delegate: Item {
                            width: wallpaperGrid.cellWidth - 8
                            height: wallpaperGrid.cellHeight - 8
                            ClippingRectangle {
                                id: wallpaperItem
                                anchors.fill: parent
                                anchors.margins: 4
                                color: Qt.darker(Theme.backgroundPrimary, 1.1)
                                radius: 12
                                border.color: Settings.settings.currentWallpaper === modelData ? Theme.accentPrimary : Theme.outline
                                border.width: Settings.settings.currentWallpaper === modelData ? 3 : 1
                                Image {
                                    id: wallpaperImage
                                    anchors.fill: parent
                                    source: modelData
                                    fillMode: Image.PreserveAspectCrop
                                    asynchronous: true
                                    cache: true
                                    sourceSize.width: Math.min(width, 150)
                                    sourceSize.height: Math.min(height, 90)
                                }
                                MouseArea {
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    onClicked: {
                                        WallpaperManager.changeWallpaper(modelData);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/Weather.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import qs.Settings
import &quot;../../../Helpers/Weather.js&quot; as WeatherHelper

Rectangle {
    id: weatherRoot
    width: 440
    height: 180
    color: &quot;transparent&quot;
    anchors.horizontalCenterOffset: -2

    property string city: Settings.settings.weatherCity !== undefined ? Settings.settings.weatherCity : &quot;&quot;
    property var weatherData: null
    property string errorString: &quot;&quot;
    property bool isVisible: false

    Component.onCompleted: {
        if (isVisible) {
            fetchCityWeather()
        }
    }

    function fetchCityWeather() {
        WeatherHelper.fetchCityWeather(city,
            function(result) {
                weatherData = result.weather;
                errorString = &quot;&quot;;
            },
            function(err) {
                errorString = err;
            }
        );
    }

    function startWeatherFetch() {
        isVisible = true
        fetchCityWeather()
    }

    function stopWeatherFetch() {
        isVisible = false
    }

    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 18
            spacing: 12

            // Current weather row
            RowLayout {
                spacing: 12
                Layout.fillWidth: true

                // Weather icon and basic info section
                RowLayout {
                    spacing: 12
                    Layout.preferredWidth: 140

                    // Weather icon
                    Text {
                        id: weatherIcon
                        text: weatherData &amp;&amp; weatherData.current_weather ? materialSymbolForCode(weatherData.current_weather.weathercode) : &quot;cloud&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 28
                        verticalAlignment: Text.AlignVCenter
                        color: Theme.accentPrimary
                        Layout.alignment: Qt.AlignVCenter
                    }

                    ColumnLayout {
                        spacing: 2
                        RowLayout {
                            spacing: 4
                            Text {
                                text: city
                                font.family: Theme.fontFamily
                                font.pixelSize: 14
                                font.bold: true
                                color: Theme.textPrimary
                            }
                            Text {
                                text: weatherData &amp;&amp; weatherData.timezone_abbreviation ? `(${weatherData.timezone_abbreviation})` : &quot;&quot;
                                font.family: Theme.fontFamily
                                font.pixelSize: 10
                                color: Theme.textSecondary
                                leftPadding: 2
                            }
                        }
                        Text {
                            text: weatherData &amp;&amp; weatherData.current_weather ? ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? `${Math.round(weatherData.current_weather.temperature * 9/5 + 32)}°F` : `${Math.round(weatherData.current_weather.temperature)}°C`) : ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? &quot;--°F&quot; : &quot;--°C&quot;)
                            font.family: Theme.fontFamily
                            font.pixelSize: 24
                            font.bold: true
                            color: Theme.textPrimary
                        }
                    }
                }
                // Spacer to push content to the right
                Item {
                    Layout.fillWidth: true
                }
            }

            // Separator line
            Rectangle {
                width: parent.width
                height: 1
                color: Qt.rgba(Theme.textSecondary.g, Theme.textSecondary.g, Theme.textSecondary.b, 0.12)
                Layout.fillWidth: true
                Layout.topMargin: 2
                Layout.bottomMargin: 2
            }

            // 5-day forecast row
            RowLayout {
                spacing: 12
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter
                visible: weatherData &amp;&amp; weatherData.daily &amp;&amp; weatherData.daily.time

                Repeater {
                    model: weatherData &amp;&amp; weatherData.daily &amp;&amp; weatherData.daily.time ? 5 : 0
                    delegate: ColumnLayout {
                        spacing: 2
                        Layout.alignment: Qt.AlignHCenter
                        Text {
                            // Day of the week (e.g., Mon)
                            text: Qt.formatDateTime(new Date(weatherData.daily.time[index]), &quot;ddd&quot;)
                            font.family: Theme.fontFamily
                            font.pixelSize: 12
                            color: Theme.textSecondary
                            horizontalAlignment: Text.AlignHCenter
                            Layout.alignment: Qt.AlignHCenter
                        }
                        Text {
                            // Material Symbol icon
                            text: materialSymbolForCode(weatherData.daily.weathercode[index])
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 22
                            color: Theme.accentPrimary
                            horizontalAlignment: Text.AlignHCenter
                            Layout.alignment: Qt.AlignHCenter
                        }
                        Text {
                            // High/low temp
                            text: weatherData &amp;&amp; weatherData.daily ? ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? `${Math.round(weatherData.daily.temperature_2m_max[index] * 9/5 + 32)}° / ${Math.round(weatherData.daily.temperature_2m_min[index] * 9/5 + 32)}°` : `${Math.round(weatherData.daily.temperature_2m_max[index])}° / ${Math.round(weatherData.daily.temperature_2m_min[index])}°`) : ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? &quot;--° / --°&quot; : &quot;--° / --°&quot;)
                            font.family: Theme.fontFamily
                            font.pixelSize: 12
                            color: Theme.textPrimary
                            horizontalAlignment: Text.AlignHCenter
                            Layout.alignment: Qt.AlignHCenter
                        }
                    }
                }
            }

            // Error message
            Text {
                text: errorString
                color: Theme.error
                visible: errorString !== &quot;&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 10
                horizontalAlignment: Text.AlignHCenter
                Layout.alignment: Qt.AlignHCenter
            }
        }
    }

    // Weather code to Material Symbol ligature mapping
    function materialSymbolForCode(code) {
        if (code === 0) return &quot;sunny&quot;; // Clear
        if (code === 1 || code === 2) return &quot;partly_cloudy_day&quot;; // Mainly clear/partly cloudy
        if (code === 3) return &quot;cloud&quot;; // Overcast
        if (code &gt;= 45 &amp;&amp; code &lt;= 48) return &quot;foggy&quot;; // Fog
        if (code &gt;= 51 &amp;&amp; code &lt;= 67) return &quot;rainy&quot;; // Drizzle
        if (code &gt;= 71 &amp;&amp; code &lt;= 77) return &quot;weather_snowy&quot;; // Snow
        if (code &gt;= 80 &amp;&amp; code &lt;= 82) return &quot;rainy&quot;; // Rain showers
        if (code &gt;= 95 &amp;&amp; code &lt;= 99) return &quot;thunderstorm&quot;; // Thunderstorm
        return &quot;cloud&quot;;
    }
    function weatherDescriptionForCode(code) {
        if (code === 0) return &quot;Clear sky&quot;;
        if (code === 1) return &quot;Mainly clear&quot;;
        if (code === 2) return &quot;Partly cloudy&quot;;
        if (code === 3) return &quot;Overcast&quot;;
        if (code === 45 || code === 48) return &quot;Fog&quot;;
        if (code &gt;= 51 &amp;&amp; code &lt;= 67) return &quot;Drizzle&quot;;
        if (code &gt;= 71 &amp;&amp; code &lt;= 77) return &quot;Snow&quot;;
        if (code &gt;= 80 &amp;&amp; code &lt;= 82) return &quot;Rain showers&quot;;
        if (code &gt;= 95 &amp;&amp; code &lt;= 99) return &quot;Thunderstorm&quot;;
        return &quot;Unknown&quot;;
    }
}</file><file path="quickshell/Widgets/Sidebar/Panel/WifiPanel.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Wayland
import Quickshell
import Quickshell.Io
import Quickshell.Bluetooth
import qs.Settings
import qs.Components
import qs.Helpers

Item {
    property alias panel: wifiPanelModal
    
    function showAt() {
        wifiPanelModal.visible = true;
        wifiLogic.refreshNetworks();
    }

    function signalIcon(signal) {
        if (signal &gt;= 80) return &quot;network_wifi&quot;;
        if (signal &gt;= 60) return &quot;network_wifi_3_bar&quot;;
        if (signal &gt;= 40) return &quot;network_wifi_2_bar&quot;;
        if (signal &gt;= 20) return &quot;network_wifi_1_bar&quot;;
        return &quot;wifi_0_bar&quot;;
    }

    Process {
        id: scanProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;SSID,SECURITY,SIGNAL,IN-USE&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;list&quot;]
        onRunningChanged: {
            // Removed debug log
        }
        stdout: StdioCollector {
            onStreamFinished: {
                var lines = text.split(&quot;\n&quot;);
                var nets = [];
                var seen = {};
                for (var i = 0; i &lt; lines.length; ++i) {
                    var line = lines[i].trim();
                    if (!line) continue;
                    var parts = line.split(&quot;:&quot;);
                    var ssid = parts[0];
                    var security = parts[1];
                    var signal = parseInt(parts[2]);
                    var inUse = parts[3] === &quot;*&quot;;
                    if (ssid) {
                        if (!seen[ssid]) {
                            // First time seeing this SSID
                            nets.push({ ssid: ssid, security: security, signal: signal, connected: inUse });
                            seen[ssid] = true;
                        } else {
                            // SSID already exists, update if this entry has better signal or is connected
                            for (var j = 0; j &lt; nets.length; ++j) {
                                if (nets[j].ssid === ssid) {
                                    // Update connection status if this entry is connected
                                    if (inUse) {
                                        nets[j].connected = true;
                                    }
                                    // Update signal if this entry has better signal
                                    if (signal &gt; nets[j].signal) {
                                        nets[j].signal = signal;
                                        nets[j].security = security;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                wifiLogic.networks = nets;
            }
        }
    }

    QtObject {
        id: wifiLogic
        property var networks: []
        property var anchorItem: null
        property real anchorX
        property real anchorY
        property string passwordPromptSsid: &quot;&quot;
        property string passwordInput: &quot;&quot;
        property bool showPasswordPrompt: false
        property string connectingSsid: &quot;&quot;
        property string connectStatus: &quot;&quot;
        property string connectStatusSsid: &quot;&quot;
        property string connectError: &quot;&quot;
        property string connectSecurity: &quot;&quot;
        property var pendingConnect: null
        property string detectedInterface: &quot;&quot;

        function profileNameForSsid(ssid) {
            return &quot;quickshell-&quot; + ssid.replace(/[^a-zA-Z0-9]/g, &quot;_&quot;);
        }
        function disconnectNetwork(ssid) {
            var profileName = wifiLogic.profileNameForSsid(ssid);
            disconnectProfileProcess.connectionName = profileName;
            disconnectProfileProcess.running = true;
        }
        function refreshNetworks() {
            scanProcess.running = true;
        }
        function showAt() {
            wifiPanelModal.visible = true;
            wifiLogic.refreshNetworks();
        }
        function connectNetwork(ssid, security) {
            wifiLogic.pendingConnect = {ssid: ssid, security: security, password: &quot;&quot;};
            listConnectionsProcess.running = true;
        }
        function submitPassword() {
            wifiLogic.pendingConnect = {ssid: wifiLogic.passwordPromptSsid, security: wifiLogic.connectSecurity, password: wifiLogic.passwordInput};
            listConnectionsProcess.running = true;
        }
        function doConnect() {
            var params = wifiLogic.pendingConnect;
            wifiLogic.connectingSsid = params.ssid;
            if (params.security &amp;&amp; params.security !== &quot;--&quot;) {
                getInterfaceProcess.running = true;
            } else {
                connectProcess.security = params.security;
                connectProcess.ssid = params.ssid;
                connectProcess.password = params.password;
                connectProcess.running = true;
                wifiLogic.pendingConnect = null;
            }
        }
        function isSecured(security) {
            return security &amp;&amp; security.trim() !== &quot;&quot; &amp;&amp; security.trim() !== &quot;--&quot;;
        }
    }

    // Disconnect, delete profile, refresh
    Process {
        id: disconnectProfileProcess
        property string connectionName: &quot;&quot;
        running: false
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;down&quot;, &quot;id&quot;, connectionName]
        onRunningChanged: {
            if (!running) {
                wifiLogic.refreshNetworks();
            }
        }
    }

    Process {
        id: listConnectionsProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;NAME&quot;, &quot;connection&quot;, &quot;show&quot;]
        stdout: StdioCollector {
            onStreamFinished: {
                var params = wifiLogic.pendingConnect;
                var lines = text.split(&quot;\n&quot;);
                var expectedProfile = wifiLogic.profileNameForSsid(params.ssid);
                var foundProfile = null;
                for (var i = 0; i &lt; lines.length; ++i) {
                    if (lines[i] === expectedProfile) {
                        foundProfile = lines[i];
                        break;
                    }
                }
                if (foundProfile) {
                    // Profile exists, just bring it up (no password prompt)
                    upConnectionProcess.profileName = foundProfile;
                    upConnectionProcess.running = true;
                } else {
                    // No profile: check if secured
                    if (wifiLogic.isSecured(params.security)) {
                        if (params.password &amp;&amp; params.password.length &gt; 0) {
                            // Password provided, proceed to connect
                            wifiLogic.doConnect();
                        } else {
                            // No password yet, prompt for it
                            wifiLogic.passwordPromptSsid = params.ssid;
                            wifiLogic.passwordInput = &quot;&quot;;
                            wifiLogic.showPasswordPrompt = true;
                            wifiLogic.connectStatus = &quot;&quot;;
                            wifiLogic.connectStatusSsid = &quot;&quot;;
                            wifiLogic.connectError = &quot;&quot;;
                            wifiLogic.connectSecurity = params.security;
                        }
                    } else {
                        // Open, connect directly
                        wifiLogic.doConnect();
                    }
                }
            }
        }
    }

    // Handles connecting to a Wi-Fi network, with or without password
    Process {
        id: connectProcess
        property string ssid: &quot;&quot;
        property string password: &quot;&quot;
        property string security: &quot;&quot;
        running: false
        command: {
            if (password) {
                return [&quot;nmcli&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;connect&quot;, ssid, &quot;password&quot;, password]
            } else {
                return [&quot;nmcli&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;connect&quot;, ssid]
            }
        }
        stdout: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;success&quot;;
                wifiLogic.connectStatusSsid = connectProcess.ssid;
                wifiLogic.connectError = &quot;&quot;;
                wifiLogic.refreshNetworks();
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;error&quot;;
                wifiLogic.connectStatusSsid = connectProcess.ssid;
                wifiLogic.connectError = text;
            }
        }
    }

    // Finds the correct Wi-Fi interface for connection
    Process {
        id: getInterfaceProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;DEVICE,TYPE,STATE&quot;, &quot;device&quot;]
        stdout: StdioCollector {
            onStreamFinished: {
                var lines = text.split(&quot;\n&quot;);
                for (var i = 0; i &lt; lines.length; ++i) {
                    var parts = lines[i].split(&quot;:&quot;);
                    if (parts[1] === &quot;wifi&quot; &amp;&amp; parts[2] !== &quot;unavailable&quot;) {
                        wifiLogic.detectedInterface = parts[0];
                        break;
                    }
                }
                if (wifiLogic.detectedInterface) {
                    var params = wifiLogic.pendingConnect;
                    addConnectionProcess.ifname = wifiLogic.detectedInterface;
                    addConnectionProcess.ssid = params.ssid;
                    addConnectionProcess.password = params.password;
                    addConnectionProcess.profileName = wifiLogic.profileNameForSsid(params.ssid);
                    addConnectionProcess.security = params.security;
                    addConnectionProcess.running = true;
                } else {
                    wifiLogic.connectStatus = &quot;error&quot;;
                    wifiLogic.connectStatusSsid = wifiLogic.pendingConnect.ssid;
                    wifiLogic.connectError = &quot;No Wi-Fi interface found.&quot;;
                    wifiLogic.connectingSsid = &quot;&quot;;
                    wifiLogic.pendingConnect = null;
                }
            }
        }
    }

    // Adds a new Wi-Fi connection profile
    Process {
        id: addConnectionProcess
        property string ifname: &quot;&quot;
        property string ssid: &quot;&quot;
        property string password: &quot;&quot;
        property string profileName: &quot;&quot;
        property string security: &quot;&quot;
        running: false
        command: {
            var cmd = [&quot;nmcli&quot;, &quot;connection&quot;, &quot;add&quot;, &quot;type&quot;, &quot;wifi&quot;, &quot;ifname&quot;, ifname, &quot;con-name&quot;, profileName, &quot;ssid&quot;, ssid];
            if (security &amp;&amp; security !== &quot;--&quot;) {
                cmd.push(&quot;wifi-sec.key-mgmt&quot;);
                cmd.push(&quot;wpa-psk&quot;);
                cmd.push(&quot;wifi-sec.psk&quot;);
                cmd.push(password);
            }
            return cmd;
        }
        stdout: StdioCollector {
            onStreamFinished: {
                upConnectionProcess.profileName = addConnectionProcess.profileName;
                upConnectionProcess.running = true;
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                upConnectionProcess.profileName = addConnectionProcess.profileName;
                upConnectionProcess.running = true;
            }
        }
    }

    // Brings up the new connection profile and finalizes connection state
    Process {
        id: upConnectionProcess
        property string profileName: &quot;&quot;
        running: false
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;up&quot;, &quot;id&quot;, profileName]
        stdout: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;success&quot;;
                wifiLogic.connectStatusSsid = wifiLogic.pendingConnect ? wifiLogic.pendingConnect.ssid : &quot;&quot;;
                wifiLogic.connectError = &quot;&quot;;
                wifiLogic.refreshNetworks();
                wifiLogic.pendingConnect = null;
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;error&quot;;
                wifiLogic.connectStatusSsid = wifiLogic.pendingConnect ? wifiLogic.pendingConnect.ssid : &quot;&quot;;
                wifiLogic.connectError = text;
                wifiLogic.pendingConnect = null;
            }
        }
    }

    // Wifi button (no background card)
    Rectangle {
        id: wifiButton
        width: 36; height: 36
        radius: 18
        border.color: Theme.accentPrimary
        border.width: 1
        color: wifiButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

        Text {
            anchors.centerIn: parent
            text: &quot;wifi&quot;
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 22
            color: wifiButtonArea.containsMouse
                ? Theme.backgroundPrimary
                : Theme.accentPrimary
            verticalAlignment: Text.AlignVCenter
            horizontalAlignment: Text.AlignHCenter
        }

        MouseArea {
            id: wifiButtonArea
            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: wifiLogic.showAt()
        }
    }

    PanelWindow {
        id: wifiPanelModal
        implicitWidth: 480
        implicitHeight: 780
        visible: false
        color: &quot;transparent&quot;
        anchors.top: true
        anchors.right: true
        margins.right: 0
        margins.top: 0
        WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand
        Component.onCompleted: {
            wifiLogic.refreshNetworks()
        }
        Rectangle {
            anchors.fill: parent
            color: Theme.backgroundPrimary
            radius: 24
            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 32
                spacing: 0
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 20
                    Layout.preferredHeight: 48
                    Layout.leftMargin: 16
                    Layout.rightMargin: 16
                    Text {
                        text: &quot;wifi&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 32
                        color: Theme.accentPrimary
                    }
                    Text {
                        text: &quot;Wi-Fi&quot;
                        font.pixelSize: 26
                        font.bold: true
                        color: Theme.textPrimary
                        Layout.fillWidth: true
                    }
                    Rectangle {
                        width: 36; height: 36; radius: 18
                        color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                        border.color: Theme.accentPrimary
                        border.width: 1
                        Text {
                            anchors.centerIn: parent
                            text: &quot;close&quot;
                            font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 20
                            color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                        }
                        MouseArea {
                            id: closeButtonArea
                            anchors.fill: parent
                            hoverEnabled: true
                            onClicked: wifiPanelModal.visible = false
                            cursorShape: Qt.PointingHandCursor
                        }
                    }
                }
                Rectangle {
                    Layout.fillWidth: true
                    height: 1
                    color: Theme.outline
                    opacity: 0.12
                }
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 640
                    Layout.alignment: Qt.AlignHCenter
                    Layout.margins: 0
                    color: Theme.surfaceVariant
                    radius: 18
                    border.color: Theme.outline
                    border.width: 1
                    Rectangle {
                        id: bg
                        anchors.fill: parent
                        color: Theme.backgroundPrimary
                        radius: 12
                        border.width: 1
                        border.color: Theme.surfaceVariant
                        z: 0
                    }
                    Rectangle {
                        id: header
                    }

                    Rectangle {
                        id: listContainer
                        anchors.top: header.bottom
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.bottom: parent.bottom
                        anchors.margins: 24
                        color: &quot;transparent&quot;
                        clip: true
                        ListView {
                            id: networkListView
                            anchors.fill: parent
                            spacing: 4
                            boundsBehavior: Flickable.StopAtBounds
                            model: wifiLogic.networks
                            delegate: Item {
                                id: networkEntry
                                width: parent.width
                                height: modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt ? 102 : 42
                                ColumnLayout {
                                    anchors.fill: parent
                                    spacing: 0
                                    Rectangle {
                                        Layout.fillWidth: true
                                        Layout.preferredHeight: 42
                                        radius: 8
                                        color: modelData.connected ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.44) : (networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.highlight : &quot;transparent&quot;)
                                        RowLayout {
                                            anchors.fill: parent
                                            anchors.leftMargin: 12
                                            anchors.rightMargin: 12
                                            spacing: 12
                                            Text {
                                                text: signalIcon(modelData.signal)
                                                font.family: &quot;Material Symbols Outlined&quot;
                                                font.pixelSize: 20
                                                color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                                verticalAlignment: Text.AlignVCenter
                                                Layout.alignment: Qt.AlignVCenter
                                            }
                                            ColumnLayout {
                                                Layout.fillWidth: true
                                                spacing: 2
                                                RowLayout {
                                                    Layout.fillWidth: true
                                                    spacing: 6
                                                    Text {
                                                        text: modelData.ssid || &quot;Unknown Network&quot;
                                                        color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textPrimary)
                                                        font.pixelSize: 14
                                                        elide: Text.ElideRight
                                                        Layout.fillWidth: true
                                                        Layout.alignment: Qt.AlignVCenter
                                                    }
                                                    Item {
                                                        width: 22; height: 22
                                                        visible: wifiLogic.connectStatusSsid === modelData.ssid &amp;&amp; wifiLogic.connectStatus !== &quot;&quot;
                                                        RowLayout {
                                                            anchors.fill: parent
                                                            spacing: 2
                                                            Text {
                                                                visible: wifiLogic.connectStatus === &quot;success&quot;
                                                                text: &quot;check_circle&quot;
                                                                font.family: &quot;Material Symbols Outlined&quot;
                                                                font.pixelSize: 18
                                                                color: &quot;#43a047&quot;
                                                                verticalAlignment: Text.AlignVCenter
                                                            }
                                                            Text {
                                                                visible: wifiLogic.connectStatus === &quot;error&quot;
                                                                text: &quot;error&quot;
                                                                font.family: &quot;Material Symbols Outlined&quot;
                                                                font.pixelSize: 18
                                                                color: Theme.error
                                                                verticalAlignment: Text.AlignVCenter
                                                            }
                                                        }
                                                    }
                                                }
                                                Text {
                                                    text: modelData.security &amp;&amp; modelData.security !== &quot;--&quot; ? modelData.security : &quot;Open&quot;
                                                    color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                                    font.pixelSize: 11
                                                    elide: Text.ElideRight
                                                    Layout.fillWidth: true
                                                    Layout.alignment: Qt.AlignVCenter
                                                }
                                                Text {
                                                    visible: wifiLogic.connectStatusSsid === modelData.ssid &amp;&amp; wifiLogic.connectStatus === &quot;error&quot; &amp;&amp; wifiLogic.connectError.length &gt; 0
                                                    text: wifiLogic.connectError
                                                    color: Theme.error
                                                    font.pixelSize: 11
                                                    elide: Text.ElideRight
                                                    Layout.fillWidth: true
                                                    Layout.alignment: Qt.AlignVCenter
                                                }
                                            }
                                            Text {
                                                visible: modelData.connected
                                                text: &quot;connected&quot;
                                                color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : Theme.accentPrimary
                                                font.pixelSize: 11
                                                verticalAlignment: Text.AlignVCenter
                                                Layout.alignment: Qt.AlignVCenter
                                            }
                                                                                                Item {
                                                        Layout.alignment: Qt.AlignVCenter
                                                        Layout.preferredHeight: 22
                                                        Layout.preferredWidth: 22
                                                        Spinner {
                                                            visible: wifiLogic.connectingSsid === modelData.ssid
                                                            running: wifiLogic.connectingSsid === modelData.ssid
                                                            color: Theme.accentPrimary
                                                            anchors.centerIn: parent
                                                            size: 22
                                                        }
                                                    }
                                        }
                                        MouseArea {
                                            id: networkMouseArea
                                            anchors.fill: parent
                                            hoverEnabled: true
                                            onClicked: {
                                                if (modelData.connected) {
                                                    wifiLogic.disconnectNetwork(modelData.ssid);
                                                } else {
                                                    wifiLogic.connectNetwork(modelData.ssid, modelData.security);
                                                }
                                            }
                                        }
                                    }
                                    Rectangle {
                                        visible: modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt
                                        Layout.fillWidth: true
                                        Layout.preferredHeight: 60
                                        radius: 8
                                        color: &quot;transparent&quot;
                                        anchors.leftMargin: 32
                                        anchors.rightMargin: 32
                                        z: 2
                                        RowLayout {
                                            anchors.fill: parent
                                            anchors.margins: 12
                                            spacing: 10
                                            Item {
                                                Layout.fillWidth: true
                                                Layout.preferredHeight: 36
                                                Rectangle {
                                                    anchors.fill: parent
                                                    radius: 8
                                                    color: &quot;transparent&quot;
                                                    border.color: passwordField.activeFocus ? Theme.accentPrimary : Theme.outline
                                                    border.width: 1
                                                    TextInput {
                                                        id: passwordField
                                                        anchors.fill: parent
                                                        anchors.margins: 12
                                                        text: wifiLogic.passwordInput
                                                        font.pixelSize: 13
                                                        color: Theme.textPrimary
                                                        verticalAlignment: TextInput.AlignVCenter
                                                        clip: true
                                                        focus: true
                                                        selectByMouse: true
                                                        activeFocusOnTab: true
                                                        inputMethodHints: Qt.ImhNone
                                                        echoMode: TextInput.Password
                                                        onTextChanged: wifiLogic.passwordInput = text
                                                        onAccepted: wifiLogic.submitPassword()
                                                        MouseArea {
                                                            id: passwordMouseArea
                                                            anchors.fill: parent
                                                            onClicked: passwordField.forceActiveFocus()
                                                        }
                                                    }
                                                }
                                            }
                                            Rectangle {
                                                width: 80
                                                height: 36
                                                radius: 18
                                                color: Theme.accentPrimary
                                                border.color: Theme.accentPrimary
                                                border.width: 0
                                                opacity: 1.0
                                                Behavior on color { ColorAnimation { duration: 100 } }
                                                MouseArea {
                                                    anchors.fill: parent
                                                    onClicked: wifiLogic.submitPassword()
                                                    cursorShape: Qt.PointingHandCursor
                                                    hoverEnabled: true
                                                    onEntered: parent.color = Qt.darker(Theme.accentPrimary, 1.1)
                                                    onExited: parent.color = Theme.accentPrimary
                                                }
                                                Text {
                                                    anchors.centerIn: parent
                                                    text: &quot;Connect&quot;
                                                    color: Theme.backgroundPrimary
                                                    font.pixelSize: 14
                                                    font.bold: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Sidebar/Button.qml">import QtQuick
import Quickshell
import qs.Settings
import qs.Widgets.Sidebar.Panel

Item {
    id: buttonRoot
    property Item barBackground
    property var screen
    width: iconText.implicitWidth + 0
    height: iconText.implicitHeight + 0

    property color hoverColor: Theme.rippleEffect
    property real hoverOpacity: 0.0
    property bool isActive: mouseArea.containsMouse || (sidebarPopup &amp;&amp; sidebarPopup.visible)

    property var sidebarPopup

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        hoverEnabled: true
        cursorShape: Qt.PointingHandCursor
        onClicked: {
            if (sidebarPopup.visible) {
                sidebarPopup.hidePopup();
            } else {
                sidebarPopup.showAt();
            }
        }
        onEntered: buttonRoot.hoverOpacity = 0.18
        onExited: buttonRoot.hoverOpacity = 0.0
    }

    Rectangle {
        anchors.fill: parent
        color: hoverColor
        opacity: isActive ? 0.18 : hoverOpacity
        radius: height / 2
        z: 0
        visible: (isActive ? 0.18 : hoverOpacity) &gt; 0.01
    }

    Text {
        id: iconText
        text: &quot;dashboard&quot;
        font.family: isActive ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
        font.pixelSize: 16
        color: sidebarPopup.visible ? Theme.accentPrimary : Theme.textPrimary
        anchors.centerIn: parent
        z: 1
    }

    Behavior on hoverOpacity {
        NumberAnimation {
            duration: 120
            easing.type: Easing.OutQuad
        }
    }
}</file><file path="quickshell/Widgets/SidePanel/BluetoothPanel.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Wayland
import Quickshell
import Quickshell.Bluetooth
import qs.Settings
import qs.Components
import qs.Helpers

Item {
    id: root
    property alias panel: bluetoothPanelModal


    property string statusMessage: &quot;&quot;
    property bool statusPopupVisible: false

    function showStatus(msg) {
        statusMessage = msg
        statusPopupVisible = true
    }

    function hideStatus() {
        statusPopupVisible = false
    }

    function showAt() {
        bluetoothLogic.showAt()
    }

    Rectangle {
        id: card
        width: 36; height: 36
        radius: 18
        border.color: Theme.accentPrimary
        border.width: 1
        color: bluetoothButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

        Text {
            anchors.centerIn: parent
            text: &quot;bluetooth&quot;
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 22
            color: bluetoothButtonArea.containsMouse
                ? Theme.backgroundPrimary
                : Theme.accentPrimary
        }

        MouseArea {
            id: bluetoothButtonArea
            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: bluetoothLogic.showAt()
        }
    }

    QtObject {
        id: bluetoothLogic

        function showAt() {
            if (Bluetooth.defaultAdapter) {
                if (!Bluetooth.defaultAdapter.enabled)
                    Bluetooth.defaultAdapter.enabled = true
                if (!Bluetooth.defaultAdapter.discovering)
                    Bluetooth.defaultAdapter.discovering = true
            }
            bluetoothPanelModal.visible = true
        }
    }

    PanelWindow {
        id: bluetoothPanelModal
        implicitWidth: 480
        implicitHeight: 780
        visible: false
        color: &quot;transparent&quot;
        anchors.top: true
        anchors.right: true
        margins.right: 0
        margins.top: 0
        WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand

        onVisibleChanged: {
            if (!visible &amp;&amp; Bluetooth.defaultAdapter &amp;&amp; Bluetooth.defaultAdapter.discovering)
                Bluetooth.defaultAdapter.discovering = false
        }

        Rectangle {
            anchors.fill: parent
            color: Theme.backgroundPrimary
            radius: 20

            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 32
                spacing: 0

                RowLayout {
                    Layout.fillWidth: true
                    spacing: 20
                    Layout.preferredHeight: 48
                    Layout.leftMargin: 16
                    Layout.rightMargin: 16
                    Text {
                        text: &quot;bluetooth&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 32
                        color: Theme.accentPrimary
                    }
                    Text {
                        text: &quot;Bluetooth&quot;
                        font.family: Theme.fontFamily
                        font.pixelSize: 26
                        font.bold: true
                        color: Theme.textPrimary
                        Layout.fillWidth: true
                    }
                    Rectangle {
                        width: 36; height: 36; radius: 18
                        color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                        border.color: Theme.accentPrimary
                        border.width: 1
                        Text {
                            anchors.centerIn: parent
                            text: &quot;close&quot;
                            font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 20
                            color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                        }
                        MouseArea {
                            id: closeButtonArea
                            anchors.fill: parent
                            hoverEnabled: true
                            onClicked: bluetoothPanelModal.visible = false
                            cursorShape: Qt.PointingHandCursor
                        }
                    }
                }
                Rectangle {
                    Layout.fillWidth: true
                    height: Math.max(1, 1 * Theme.scale(screen))
                    color: Theme.outline
                    opacity: 0.12
                }

        
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 640
                    Layout.alignment: Qt.AlignHCenter
                    Layout.margins: 0
                    color: Theme.surfaceVariant
                    radius: 18
                    border.color: Theme.outline
                    border.width: 1
                    anchors.topMargin: 32

                    Rectangle {
                        id: bg
                        anchors.fill: parent
                        color: Theme.backgroundPrimary
                        radius: 12
                        border.width: 1
                        border.color: Theme.surfaceVariant
                        z: 0
                    }
                    Rectangle {
                        id: header
                        color: &quot;transparent&quot;
                    }
                    Rectangle {
                        id: listContainer
                        anchors.top: header.bottom
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.bottom: parent.bottom
                        anchors.margins: 24
                        color: &quot;transparent&quot;
                        clip: true

                        ListView {
                            id: deviceListView
                            anchors.fill: parent
                            spacing: 4
                            boundsBehavior: Flickable.StopAtBounds
                            model: Bluetooth.defaultAdapter ? Bluetooth.defaultAdapter.devices : []

                            delegate: Rectangle {
                                width: parent.width
                                height: 60
                                color: &quot;transparent&quot;
                                radius: 8

                                property bool userInitiatedDisconnect: false

                                Rectangle {
                                    anchors.fill: parent
                                    radius: 8
                                    color: modelData.connected ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.18)
                                        : (deviceMouseArea.containsMouse ? Theme.highlight : &quot;transparent&quot;)
                                }

                                RowLayout {
                                    anchors.fill: parent
                                    anchors.leftMargin: 12
                                    anchors.rightMargin: 12
                                    spacing: 12

                                    // Fixed-width icon for alignment
                                    Text {
                                        width: 28
                                        horizontalAlignment: Text.AlignHCenter
                                        verticalAlignment: Text.AlignVCenter
                                        text: modelData.connected ? &quot;bluetooth&quot; : &quot;bluetooth_disabled&quot;
                                        font.family: &quot;Material Symbols Outlined&quot;
                                        font.pixelSize: 20
                                        color: modelData.connected ? Theme.accentPrimary : Theme.textSecondary
                                    }

                                    ColumnLayout {
                                        Layout.fillWidth: true
                                        spacing: 2
                                        // Device name always fills width for alignment
                                        Text {
                                            Layout.fillWidth: true
                                            text: modelData.name || &quot;Unknown Device&quot;
                                            font.family: Theme.fontFamily
                                            color: modelData.connected ? Theme.accentPrimary : Theme.textPrimary
                                            font.pixelSize: 14
                                            elide: Text.ElideRight
                                        }
                                        Text {
                                            Layout.fillWidth: true
                                            text: modelData.address
                                            font.family: Theme.fontFamily
                                            color: modelData.connected ? Theme.accentPrimary : Theme.textSecondary
                                            font.pixelSize: 11
                                            elide: Text.ElideRight
                                        }
                                        Text {
                                            text: &quot;Paired: &quot; + modelData.paired + &quot; | Trusted: &quot; + modelData.trusted
                                            font.family: Theme.fontFamily
                                            font.pixelSize: 10
                                            color: Theme.textSecondary
                                            visible: true
                                        }
                                        // No &quot;Connected&quot; text here!
                                    }
                                    
                                    Spinner {
                                        running: modelData.pairing || modelData.state === BluetoothDeviceState.Connecting || modelData.state === BluetoothDeviceState.Disconnecting
                                        color: Theme.textPrimary
                                        size: 16
                                        visible: running
                                    }
                                }

                                MouseArea {
                                    id: deviceMouseArea
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    cursorShape: Qt.PointingHandCursor

                                    onClicked: {
                                        if (modelData.connected) {
                                            userInitiatedDisconnect = true
                                            modelData.disconnect()
                                        } else if (!modelData.paired) {
                                            modelData.pair()
                                            root.showStatus(&quot;Pairing... Please check your phone or system for a PIN dialog.&quot;)
                                        } else {
                                            modelData.connect()
                                        }
                                    }
                                }

                                Connections {
                                    target: modelData

                                    function onPairedChanged() {
                                        if (modelData.paired) {
                                            root.showStatus(&quot;Paired! Now connecting...&quot;)
                                            modelData.connect()
                                        }
                                    }
                                    function onPairingChanged() {
                                        if (!modelData.pairing &amp;&amp; !modelData.paired) {
                                            root.showStatus(&quot;Pairing failed or was cancelled.&quot;)
                                        }
                                    }
                                    function onConnectedChanged() {
                                        userInitiatedDisconnect = false
                                    }
                                    function onStateChanged() {
                                        // Optionally handle more granular feedback here
                                    }
                                }
                            }
                        }
                    }

                    Rectangle {
                        anchors.right: parent.right
                        anchors.rightMargin: 2
                        anchors.top: listContainer.top
                        anchors.bottom: listContainer.bottom
                        width: 4
                        radius: 2
                        color: Theme.textSecondary
                        opacity: deviceListView.contentHeight &gt; deviceListView.height ? 0.3 : 0
                        visible: opacity &gt; 0
                    }
                }
            }
        }

        // Status/Info popup
        Popup {
            id: statusPopup
            x: (parent.width - width) / 2
            y: 40
            width: Math.min(360, parent.width - 40)
            visible: root.statusPopupVisible
            modal: false
            focus: false
            background: Rectangle {
                color: Theme.accentPrimary // Use your theme&apos;s accent color
                radius: 8
            }
            contentItem: Text {
                text: root.statusMessage
                color: &quot;white&quot;
                wrapMode: Text.WordWrap
                padding: 12
                font.pixelSize: 14
            }
            onVisibleChanged: {
                if (visible) {
                    // Auto-hide after 3 seconds
                    statusPopupTimer.restart()
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/SidePanel/Music.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import QtQuick.Layouts
import qs.Components
import qs.Services
import qs.Settings

Rectangle {
    id: musicCard

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    color: &quot;transparent&quot;

    Rectangle {
        id: card

        anchors.fill: parent
        color: Theme.surface
        radius: 18 * Theme.scale(screen)

        // Show fallback UI if no player is available
        Item {
            width: parent.width
            height: parent.height
            visible: !MusicManager.currentPlayer

            ColumnLayout {
                anchors.centerIn: parent
                spacing: 16 * Theme.scale(screen)

                Text {
                    text: &quot;music_note&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: Theme.fontSizeHeader * Theme.scale(screen)
                    color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    Layout.alignment: Qt.AlignHCenter
                }

                Text {
                    text: MusicManager.hasPlayer ? &quot;No controllable player selected&quot; : &quot;No music player detected&quot;
                    color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.6)
                    font.family: Theme.fontFamily
                    font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
                    Layout.alignment: Qt.AlignHCenter
                }

            }

        }

        // Main player UI
        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 18 * Theme.scale(screen)
            spacing: 12 * Theme.scale(screen)
            visible: !!MusicManager.currentPlayer

            // Player selector
            ComboBox {
                id: playerSelector

                Layout.fillWidth: true
                Layout.preferredHeight: 40 * Theme.scale(screen)
                visible: MusicManager.getAvailablePlayers().length &gt; 1
                model: MusicManager.getAvailablePlayers()
                textRole: &quot;identity&quot;
                currentIndex: MusicManager.selectedPlayerIndex
                onActivated: {
                    MusicManager.selectedPlayerIndex = index;
                    MusicManager.updateCurrentPlayer();
                }

                background: Rectangle {
                    implicitWidth: 120 * Theme.scale(screen)
                    implicitHeight: 40 * Theme.scale(screen)
                    color: Theme.surfaceVariant
                    border.color: playerSelector.activeFocus ? Theme.accentPrimary : Theme.outline
                    border.width: 1 * Theme.scale(screen)
                    radius: 16 * Theme.scale(screen)
                }

                contentItem: Text {
                    leftPadding: 12 * Theme.scale(screen)
                    rightPadding: playerSelector.indicator.width + playerSelector.spacing
                    text: playerSelector.displayText
                    font.pixelSize: 13 * Theme.scale(screen)
                    color: Theme.textPrimary
                    verticalAlignment: Text.AlignVCenter
                    elide: Text.ElideRight
                }

                indicator: Text {
                    x: playerSelector.width - width - 12 * Theme.scale(screen)
                    y: playerSelector.topPadding + (playerSelector.availableHeight - height) / 2
                    text: &quot;arrow_drop_down&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24 * Theme.scale(screen)
                    color: Theme.textPrimary
                }

                popup: Popup {
                    y: playerSelector.height
                    width: playerSelector.width
                    implicitHeight: contentItem.implicitHeight
                    padding: 1 * Theme.scale(screen)

                    contentItem: ListView {
                        clip: true
                        implicitHeight: contentHeight
                        model: playerSelector.popup.visible ? playerSelector.delegateModel : null
                        currentIndex: playerSelector.highlightedIndex

                        ScrollIndicator.vertical: ScrollIndicator {
                        }

                    }

                    background: Rectangle {
                        color: Theme.surfaceVariant
                        border.color: Theme.outline
                        border.width: 1 * Theme.scale(screen)
                        radius: 16
                    }

                }

                delegate: ItemDelegate {
                    width: playerSelector.width
                    highlighted: playerSelector.highlightedIndex === index

                    contentItem: Text {
                        text: modelData.identity
                        font.pixelSize: 13 * Theme.scale(screen)
                        color: Theme.textPrimary
                        verticalAlignment: Text.AlignVCenter
                        elide: Text.ElideRight
                    }

                    background: Rectangle {
                        color: highlighted ? Theme.accentPrimary.toString().replace(/#/, &quot;#1A&quot;) : &quot;transparent&quot;
                    }

                }

            }

            // Album art with spectrum visualizer
            RowLayout {
                spacing: 12 * Theme.scale(screen)
                Layout.fillWidth: true

                // Album art container with circular spectrum overlay
                Item {
                    id: albumArtContainer

                    width: 96 * Theme.scale(screen)
                    height: 96 * Theme.scale(screen) // enough for spectrum and art (will adjust if needed)
                    Layout.alignment: Qt.AlignLeft | Qt.AlignVCenter

                    // Circular spectrum visualizer around album art
                    CircularSpectrum {
                        id: spectrum

                        values: MusicManager.cavaValues
                        anchors.centerIn: parent
                        innerRadius: 30 * Theme.scale(screen) // Position just outside 60x60 album art
                        outerRadius: 48 * Theme.scale(screen) // Extend bars outward from album art
                        fillColor: Theme.accentPrimary
                        strokeColor: Theme.accentPrimary
                        strokeWidth: 0 * Theme.scale(screen)
                        z: 0
                    }

                    // Album art image
                    Rectangle {
                        id: albumArtwork

                        width: 60 * Theme.scale(screen)
                        height: 60 * Theme.scale(screen)
                        anchors.centerIn: parent
                        radius: width * 0.5
                        color: Qt.darker(Theme.surface, 1.1)
                        border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                        border.width: 1 * Theme.scale(screen)

                        Image {
                            id: albumArt

                            anchors.fill: parent
                            anchors.margins: 2 * Theme.scale(screen)
                            fillMode: Image.PreserveAspectCrop
                            smooth: true
                            mipmap: true
                            cache: false
                            asynchronous: true
                            sourceSize.width: 60 * Theme.scale(screen)
                            sourceSize.height: 60 * Theme.scale(screen)
                            source: MusicManager.trackArtUrl
                            visible: source.toString() !== &quot;&quot;
                            // Apply circular mask for rounded corners
                            layer.enabled: true

                            layer.effect: MultiEffect {
                                maskEnabled: true
                                maskSource: mask
                            }

                        }

                        Item {
                            id: mask

                            anchors.fill: albumArt
                            layer.enabled: true
                            visible: false

                            Rectangle {
                                width: albumArt.width
                                height: albumArt.height
                                radius: albumArt.width / 2 // circle
                            }

                        }

                        // Fallback icon when no album art available
                        Text {
                            anchors.centerIn: parent
                            text: &quot;album&quot;
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
                            color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.4)
                            visible: !albumArt.visible
                        }

                    }

                }

                // Track metadata
                ColumnLayout {
                    Layout.fillWidth: true
                    spacing: 4 * Theme.scale(screen)

                    Text {
                        text: MusicManager.trackTitle
                        color: Theme.textPrimary
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeSmall * Theme.scale(screen)
                        font.bold: true
                        elide: Text.ElideRight
                        wrapMode: Text.Wrap
                        maximumLineCount: 2
                        Layout.fillWidth: true
                    }

                    Text {
                        text: MusicManager.trackArtist
                        color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.8)
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeCaption * Theme.scale(screen)
                        elide: Text.ElideRight
                        Layout.fillWidth: true
                    }

                    Text {
                        text: MusicManager.trackAlbum
                        color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.6)
                        font.family: Theme.fontFamily
                        font.pixelSize: Theme.fontSizeCaption * Theme.scale(screen)
                        elide: Text.ElideRight
                        Layout.fillWidth: true
                    }

                }

            }

            // Progress bar
            Rectangle {
                id: progressBarBackground

                property real progressRatio: {
                    if (!MusicManager.currentPlayer || !MusicManager.isPlaying || MusicManager.trackLength &lt;= 0)
                        return 0;

                    return Math.min(1, MusicManager.currentPosition / MusicManager.trackLength);
                }

                width: parent.width
                height: 6 * Theme.scale(screen)
                radius: 3
                color: Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.15)
                Layout.fillWidth: true

                Rectangle {
                    id: progressFill

                    width: progressBarBackground.progressRatio * parent.width
                    height: parent.height
                    radius: parent.radius
                    color: Theme.accentPrimary

                    Behavior on width {
                        NumberAnimation {
                            duration: 200
                        }

                    }

                }

                // Interactive progress handle
                Rectangle {
                    id: progressHandle

                    width: 12 * Theme.scale(screen)
                    height: 12 * Theme.scale(screen)
                    radius: width * 0.5
                    color: Theme.accentPrimary
                    border.color: Qt.lighter(Theme.accentPrimary, 1.3)
                    border.width: 1 * Theme.scale(screen)
                    x: Math.max(0, Math.min(parent.width - width, progressFill.width - width / 2))
                    anchors.verticalCenter: parent.verticalCenter
                    visible: MusicManager.trackLength &gt; 0
                    scale: progressMouseArea.containsMouse || progressMouseArea.pressed ? 1.2 : 1

                    Behavior on scale {
                        NumberAnimation {
                            duration: 150
                        }

                    }

                }

                // Mouse area for seeking
                MouseArea {
                    id: progressMouseArea

                    anchors.fill: parent
                    hoverEnabled: true
                    cursorShape: Qt.PointingHandCursor
                    enabled: MusicManager.trackLength &gt; 0 &amp;&amp; MusicManager.canSeek
                    onClicked: function(mouse) {
                        let ratio = mouse.x / width;
                        MusicManager.seekByRatio(ratio);
                    }
                    onPositionChanged: function(mouse) {
                        if (pressed) {
                            let ratio = Math.max(0, Math.min(1, mouse.x / width));
                            MusicManager.seekByRatio(ratio);
                        }
                    }
                }

            }

            // Media controls
            RowLayout {
                spacing: 4 * Theme.scale(screen)
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter

                // Previous button
                Rectangle {
                    width: 28 * Theme.scale(screen)
                    height: 28 * Theme.scale(screen)
                    radius: width * 0.5
                    color: previousButton.containsMouse ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.2) : Qt.darker(Theme.surface, 1.1)
                    border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                    border.width: 1 * Theme.scale(screen)

                    MouseArea {
                        id: previousButton

                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        enabled: MusicManager.canGoPrevious
                        onClicked: MusicManager.previous()
                    }

                    Text {
                        anchors.centerIn: parent
                        text: &quot;skip_previous&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeCaption * Theme.scale(screen)
                        color: previousButton.enabled ? Theme.accentPrimary : Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    }

                }

                // Play/Pause button
                Rectangle {
                    width: 36 * Theme.scale(screen)
                    height: 36 * Theme.scale(screen)
                    radius: width * 0.5
                    color: playButton.containsMouse ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.2) : Qt.darker(Theme.surface, 1.1)
                    border.color: Theme.accentPrimary
                    border.width: 2 * Theme.scale(screen)

                    MouseArea {
                        id: playButton

                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        enabled: MusicManager.canPlay || MusicManager.canPause
                        onClicked: MusicManager.playPause()
                    }

                    Text {
                        anchors.centerIn: parent
                        text: MusicManager.isPlaying ? &quot;pause&quot; : &quot;play_arrow&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeBody * Theme.scale(screen)
                        color: playButton.enabled ? Theme.accentPrimary : Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    }

                }

                // Next button
                Rectangle {
                    width: 28 * Theme.scale(screen)
                    height: 28 * Theme.scale(screen)
                    radius: width * 0.5
                    color: nextButton.containsMouse ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.2) : Qt.darker(Theme.surface, 1.1)
                    border.color: Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.3)
                    border.width: 1 * Theme.scale(screen)

                    MouseArea {
                        id: nextButton

                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        enabled: MusicManager.canGoNext
                        onClicked: MusicManager.next()
                    }

                    Text {
                        anchors.centerIn: parent
                        text: &quot;skip_next&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: Theme.fontSizeCaption * Theme.scale(screen)
                        color: nextButton.enabled ? Theme.accentPrimary : Qt.rgba(Theme.textPrimary.r, Theme.textPrimary.g, Theme.textPrimary.b, 0.3)
                    }

                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SidePanel/PanelPopup.qml">import QtQuick
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import Quickshell.Wayland
import qs.Components
import qs.Settings
import qs.Widgets.SettingsWindow

PanelWithOverlay {
    id: sidebarPopup

    property var shell: null

    function showAt() {
        sidebarPopupRect.showAt();
    }

    function hidePopup() {
        sidebarPopupRect.hidePopup();
    }

    function show() {
        sidebarPopupRect.showAt();
    }

    function dismiss() {
        sidebarPopupRect.hidePopup();
    }

    // Trigger initial weather loading when component is completed
    Component.onCompleted: {
        // Load initial weather data after a short delay to ensure all components are ready
        Qt.callLater(function() {
            if (weather &amp;&amp; weather.fetchCityWeather)
                weather.fetchCityWeather();

        });
    }

    Rectangle {
        // Access the shell&apos;s SettingsWindow instead of creating a new one
        id: sidebarPopupRect

        property real slideOffset: width
        property bool isAnimating: false
        property int leftPadding: 20 * Theme.scale(screen)
        property int bottomPadding: 20 * Theme.scale(screen)
        // Recording properties
        property bool isRecording: false

        function checkRecordingStatus() {
            if (isRecording)
                checkRecordingProcess.running = true;

        }

        function showAt() {
            if (!sidebarPopup.visible) {
                sidebarPopup.visible = true;
                forceActiveFocus();
                slideAnim.from = width;
                slideAnim.to = 0;
                slideAnim.running = true;
                if (weather)
                    weather.startWeatherFetch();

                if (systemWidget)
                    systemWidget.panelVisible = true;

            }
        }

        function hidePopup() {
            if (shell &amp;&amp; shell.settingsWindow &amp;&amp; shell.settingsWindow.visible)
                shell.settingsWindow.visible = false;

            if (sidebarPopup.visible) {
                slideAnim.from = 0;
                slideAnim.to = width;
                slideAnim.running = true;
            }
        }

        // Start screen recording using Quickshell.execDetached
        function startRecording() {
            var currentDate = new Date();
            var hours = String(currentDate.getHours()).padStart(2, &apos;0&apos;);
            var minutes = String(currentDate.getMinutes()).padStart(2, &apos;0&apos;);
            var day = String(currentDate.getDate()).padStart(2, &apos;0&apos;);
            var month = String(currentDate.getMonth() + 1).padStart(2, &apos;0&apos;);
            var year = currentDate.getFullYear();
            var filename = hours + &quot;-&quot; + minutes + &quot;-&quot; + day + &quot;-&quot; + month + &quot;-&quot; + year + &quot;.mp4&quot;;
            var videoPath = Settings.settings.videoPath;
            if (videoPath &amp;&amp; !videoPath.endsWith(&quot;/&quot;))
                videoPath += &quot;/&quot;;

            var outputPath = videoPath + filename;
            var command = &quot;gpu-screen-recorder -w portal&quot; + &quot; -f &quot; + Settings.settings.recordingFrameRate + &quot; -a default_output&quot; + &quot; -k &quot; + Settings.settings.recordingCodec + &quot; -ac &quot; + Settings.settings.audioCodec + &quot; -q &quot; + Settings.settings.recordingQuality + &quot; -cursor &quot; + (Settings.settings.showCursor ? &quot;yes&quot; : &quot;no&quot;) + &quot; -cr &quot; + Settings.settings.colorRange + &quot; -o &quot; + outputPath;
            Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, command]);
            isRecording = true;
        }

        // Stop recording using Quickshell.execDetached
        function stopRecording() {
            Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, &quot;pkill -SIGINT -f &apos;gpu-screen-recorder.*portal&apos;&quot;]);
            // Optionally, force kill after a delay
            var cleanupTimer = Qt.createQmlObject(&apos;import QtQuick; Timer { interval: 3000; running: true; repeat: false }&apos;, sidebarPopupRect);
            cleanupTimer.triggered.connect(function() {
                Quickshell.execDetached([&quot;sh&quot;, &quot;-c&quot;, &quot;pkill -9 -f &apos;gpu-screen-recorder.*portal&apos; 2&gt;/dev/null || true&quot;]);
                cleanupTimer.destroy();
            });
            isRecording = false;
        }

        width: 480 * Theme.scale(screen)
        height: 660 * Theme.scale(screen)
        visible: parent.visible
        color: &quot;transparent&quot;
        anchors.top: parent.top
        anchors.right: parent.right
        // Clean up processes on destruction
        Component.onDestruction: {
            if (isRecording)
                stopRecording();

        }

        Process {
            id: checkRecordingProcess

            command: [&quot;pgrep&quot;, &quot;-f&quot;, &quot;gpu-screen-recorder.*portal&quot;]
            onExited: function(exitCode, exitStatus) {
                var isActuallyRecording = exitCode === 0;
                if (isRecording &amp;&amp; !isActuallyRecording)
                    isRecording = isActuallyRecording;

            }
        }

        // Prevent closing when clicking in the panel bg
        MouseArea {
            anchors.fill: parent
        }

        NumberAnimation {
            id: slideAnim

            target: sidebarPopupRect
            property: &quot;slideOffset&quot;
            duration: 300
            easing.type: Easing.OutCubic
            onStopped: {
                if (sidebarPopupRect.slideOffset === sidebarPopupRect.width) {
                    sidebarPopup.visible = false;
                    if (weather)
                        weather.stopWeatherFetch();

                    if (systemWidget)
                        systemWidget.panelVisible = false;

                }
                sidebarPopupRect.isAnimating = false;
            }
            onStarted: {
                sidebarPopupRect.isAnimating = true;
            }
        }

        Rectangle {
            id: mainRectangle

            // anchors.top: sidebarPopupRect.top
            width: sidebarPopupRect.width - sidebarPopupRect.leftPadding
            height: sidebarPopupRect.height - sidebarPopupRect.bottomPadding
            x: sidebarPopupRect.leftPadding + sidebarPopupRect.slideOffset
            y: 0
            color: Theme.backgroundPrimary
            bottomLeftRadius: 20

            Behavior on x {
                enabled: !sidebarPopupRect.isAnimating

                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }

            }

        }

        // SettingsIcon component
        SettingsIcon {
            id: settingsModal

            onWeatherRefreshRequested: {
                if (weather &amp;&amp; weather.fetchCityWeather)
                    weather.fetchCityWeather();

            }
        }

        Item {
            anchors.fill: mainRectangle
            x: sidebarPopupRect.slideOffset
            Keys.onEscapePressed: sidebarPopupRect.hidePopup()

            ColumnLayout {
                anchors.fill: parent
                spacing: 8 * Theme.scale(screen)

                System {
                    id: systemWidget
                    width: {
                        var w = 420;
                        var s = Theme.scale(screen);
                        var finalWidth = w * s;
                        console.log(&quot;[&quot; + screen.name + &quot;] w:&quot; + finalWidth + &quot; s: &quot; + s);
                        return finalWidth;
                    }
                    height: 80 * Theme.scale(screen)
                    settingsModal: settingsModal
                    Layout.alignment: Qt.AlignHCenter
                }

                Weather {
                    id: weather

                    width: 420 * Theme.scale(screen)
                    height: 180 * Theme.scale(screen)
                    Layout.alignment: Qt.AlignHCenter
                }

                // Music and System Monitor row
                RowLayout {
                    spacing: 8 * Theme.scale(screen)
                    Layout.fillWidth: true
                    Layout.alignment: Qt.AlignHCenter

                    Music {
                        width: 332 * Theme.scale(screen)
                        height: 250 * Theme.scale(screen)
                    }

                    SystemMonitor {
                        width: 80 * Theme.scale(screen)
                        height: 250 * Theme.scale(screen)
                    }

                }

                RowLayout {
                    spacing: 8 * Theme.scale(screen)
                    Layout.fillWidth: true
                    Layout.alignment: Qt.AlignHCenter

                    PowerProfile {
                        width: 206 * Theme.scale(screen)
                        height: 70 * Theme.scale(screen)
                        Layout.alignment: Qt.AlignVCenter
                    }

                    Shortcuts {
                        width: 206 * Theme.scale(screen)
                        height: 70 * Theme.scale(screen)
                        Layout.alignment: Qt.AlignVCenter
                    }

                }

                Rectangle {
                    height: 8 * Theme.scale(screen)
                    color: &quot;transparent&quot;
                }

            }

            Behavior on x {
                enabled: !sidebarPopupRect.isAnimating

                NumberAnimation {
                    duration: 300
                    easing.type: Easing.OutCubic
                }

            }

        }

    }

}</file><file path="quickshell/Widgets/SidePanel/PowerProfile.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Services.UPower
import qs.Settings
import qs.Components

Rectangle {
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    id: card
    color: Theme.surface
    radius: 18 * Theme.scale(screen)

    Row {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
        spacing: 20 * Theme.scale(screen)


        Rectangle {
            width: 36 * Theme.scale(screen); height: 36 * Theme.scale(screen)
            radius: width * 0.5
            border.color: Theme.accentPrimary
            border.width: 1 * Theme.scale(screen)
            color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Performance)
                ? Theme.accentPrimary
                : (perfMouseArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
            opacity: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; !PowerProfiles.hasPerformanceProfile) ? 0.4 : 1

            Text {
                id: perfIcon
                anchors.centerIn: parent
                text: &quot;speed&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22 * Theme.scale(screen)
                color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Performance) || perfMouseArea.containsMouse
                    ? Theme.backgroundPrimary
                    : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: perfMouseArea
                anchors.fill: parent
                hoverEnabled: true
                enabled: typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.hasPerformanceProfile
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof PowerProfiles !== &apos;undefined&apos;)
                        PowerProfiles.profile = PowerProfile.Performance;
                }
                onEntered: perfTooltip.tooltipVisible = true
                onExited: perfTooltip.tooltipVisible = false
            }
            StyledTooltip {
                id: perfTooltip
                text: &quot;Performance Profile&quot;
                tooltipVisible: false
                targetItem: perfIcon
                delay: 200
            }
        }


        Rectangle {
            width: 36 * Theme.scale(screen); height: 36 * Theme.scale(screen)
            radius: width * 0.5
            border.color: Theme.accentPrimary
            border.width: 1 * Theme.scale(screen)
            color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Balanced)
                ? Theme.accentPrimary
                : (balMouseArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
            opacity: 1

            Text {
                id: balIcon
                anchors.centerIn: parent
                text: &quot;balance&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22 * Theme.scale(screen)
                color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.Balanced) || balMouseArea.containsMouse
                    ? Theme.backgroundPrimary
                    : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: balMouseArea
                anchors.fill: parent
                hoverEnabled: true
                enabled: true
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof PowerProfiles !== &apos;undefined&apos;)
                        PowerProfiles.profile = PowerProfile.Balanced;
                }
                onEntered: balTooltip.tooltipVisible = true
                onExited: balTooltip.tooltipVisible = false
            }
            StyledTooltip {
                id: balTooltip
                text: &quot;Balanced Profile&quot;
                tooltipVisible: false
                targetItem: balIcon
                delay: 200
            }
        }


        Rectangle {
            width: 36 * Theme.scale(screen); height: 36 * Theme.scale(screen)
            radius: width * 0.5
            border.color: Theme.accentPrimary
            border.width: 1 * Theme.scale(screen)
            color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.PowerSaver)
                ? Theme.accentPrimary
                : (saveMouseArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)
            opacity: 1

            Text {
                id: saveIcon
                anchors.centerIn: parent
                text: &quot;eco&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22 * Theme.scale(screen)
                color: (typeof PowerProfiles !== &apos;undefined&apos; &amp;&amp; PowerProfiles.profile === PowerProfile.PowerSaver) || saveMouseArea.containsMouse
                    ? Theme.backgroundPrimary
                    : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: saveMouseArea
                anchors.fill: parent
                hoverEnabled: true
                enabled: true
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof PowerProfiles !== &apos;undefined&apos;)
                        PowerProfiles.profile = PowerProfile.PowerSaver;
                }
                onEntered: saveTooltip.tooltipVisible = true
                onExited: saveTooltip.tooltipVisible = false
            }
            StyledTooltip {
                id: saveTooltip
                text: &quot;Power Saver Profile&quot;
                tooltipVisible: false
                targetItem: saveIcon
                delay: 200
            }
        }
    }
}</file><file path="quickshell/Widgets/SidePanel/SettingsIcon.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell
import Quickshell.Wayland
import qs.Settings
import qs.Services
import qs.Widgets.SettingsWindow
import qs.Components

PanelWindow {
    id: settingsModal
    implicitWidth: 480 * Theme.scale(screen)
    implicitHeight: 780 * Theme.scale(screen)
    visible: false
    color: &quot;transparent&quot;
    anchors.top: true
    anchors.right: true
    margins.right: 0
    margins.top: 0
    WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand

    // Signal to request weather refresh
    signal weatherRefreshRequested()

    // Property to track the settings window instance
    property var settingsWindow: null

    // Function to open the modal and initialize temp values
    function openSettings(initialTabIndex) {        
        if (!settingsWindow) {
            // Create new window
            settingsWindow = settingsComponent.createObject(null); // No parent to avoid dependency issues
            if (settingsWindow) {
                // Set the initial tab if provided
                if (typeof initialTabIndex === &apos;number&apos; &amp;&amp; initialTabIndex &gt;= 0 &amp;&amp; initialTabIndex &lt;= 8) {
                    settingsWindow.activeTabIndex = initialTabIndex;
                }
                settingsWindow.visible = true;
                
                // Show wallpaper selector if opening wallpaper tab (after window is visible)
                if (typeof initialTabIndex === &apos;number&apos; &amp;&amp; initialTabIndex === 6) {
                    Qt.callLater(function() {
                        if (settingsWindow &amp;&amp; settingsWindow.showWallpaperSelector) {
                            settingsWindow.showWallpaperSelector();
                        }
                    }, 100); // Small delay to ensure window is fully loaded
                }
                // Handle window closure
                settingsWindow.visibleChanged.connect(function() {
                    if (settingsWindow &amp;&amp; !settingsWindow.visible) {
                        // Trigger weather refresh when settings close
                        weatherRefreshRequested();
                        var windowToDestroy = settingsWindow;
                        settingsWindow = null;
                        windowToDestroy.destroy();
                    }
                });
            }
            sidebarPopup.dismiss();
        } else if (settingsWindow.visible) {
            // Close and destroy window
            var windowToDestroy = settingsWindow;
            settingsWindow = null;
            windowToDestroy.visible = false;
            windowToDestroy.destroy();
        }
    }

    // Function to close the modal and release focus
    function closeSettings() {
        if (settingsWindow) {
            var windowToDestroy = settingsWindow;
            settingsWindow = null;
            windowToDestroy.visible = false;
            windowToDestroy.destroy();
        }
    }

    Component {
        id: settingsComponent
        SettingsWindow {}
    }

    // Clean up on destruction
    Component.onDestruction: {
        if (settingsWindow) {
            var windowToDestroy = settingsWindow;
            settingsWindow = null;
            windowToDestroy.destroy();
        }
    }

}</file><file path="quickshell/Widgets/SidePanel/Shortcuts.qml">import QtQuick
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import Quickshell.Wayland
import qs.Components
import qs.Settings
import qs.Widgets.SettingsWindow

// Record and Wallpaper card
Rectangle {
    color: Theme.surface
    radius: 18 * Theme.scale(screen)

    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    Row {
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
        spacing: 20 * Theme.scale(screen)

        // Record button
        Rectangle {
            id: recordButton

            width: 36 * Theme.scale(screen)
            height: 36 * Theme.scale(screen)
            radius: width * 0.5
            border.color: Theme.accentPrimary
            border.width: 1 * Theme.scale(screen)
            color: sidebarPopupRect.isRecording ? Theme.accentPrimary : (recordButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;)

            Text {
                anchors.centerIn: parent
                text: &quot;photo_camera&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22 * Theme.scale(screen)
                color: sidebarPopupRect.isRecording || recordButtonArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: recordButtonArea

                anchors.fill: parent
                hoverEnabled: true
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (sidebarPopupRect.isRecording) {
                        sidebarPopupRect.stopRecording();
                        sidebarPopup.dismiss();
                    } else {
                        sidebarPopupRect.startRecording();
                        sidebarPopup.dismiss();
                    }
                }
            }

            StyledTooltip {
                text: sidebarPopupRect.isRecording ? &quot;Stop Recording&quot; : &quot;Start Recording&quot;
                targetItem: recordButtonArea
                tooltipVisible: recordButtonArea.containsMouse
            }

        }

        // Wallpaper button
        Rectangle {
            id: wallpaperButton

            width: 36 * Theme.scale(screen)
            height: 36 * Theme.scale(screen)
            radius: width * 0.5
            border.color: Theme.accentPrimary
            border.width: 1 * Theme.scale(screen)
            color: wallpaperButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

            Text {
                anchors.centerIn: parent
                text: &quot;image&quot;
                font.family: &quot;Material Symbols Outlined&quot;
                font.pixelSize: 22 * Theme.scale(screen)
                color: wallpaperButtonArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
                verticalAlignment: Text.AlignVCenter
                horizontalAlignment: Text.AlignHCenter
            }

            MouseArea {
                id: wallpaperButtonArea

                anchors.fill: parent
                hoverEnabled: true
                cursorShape: Qt.PointingHandCursor
                onClicked: {
                    if (typeof settingsModal !== &apos;undefined&apos; &amp;&amp; settingsModal &amp;&amp; settingsModal.openSettings) {
                        settingsModal.openSettings(6);
                        sidebarPopup.dismiss();
                    }
                }
            }

            StyledTooltip {
                text: &quot;Wallpaper&quot;
                targetItem: wallpaperButtonArea
                tooltipVisible: wallpaperButtonArea.containsMouse
            }

        }

    }

}</file><file path="quickshell/Widgets/SidePanel/System.qml">import QtQuick
import QtQuick.Controls
import QtQuick.Effects
import QtQuick.Layouts
import Quickshell
import Quickshell.Io
import Quickshell.Widgets
import qs.Components
import qs.Helpers
import qs.Services
import qs.Settings
import qs.Widgets
import qs.Widgets.LockScreen
 
Rectangle {
    id: systemWidget
 
    property string uptimeText: &quot;--:--&quot;
    property bool panelVisible: false
    property var settingsModal: null
 
    function logout() {
        if (WorkspaceManager.isNiri)
            logoutProcessNiri.running = true;
        else if (WorkspaceManager.isHyprland)
            logoutProcessHyprland.running = true;
        else
            console.warn(&quot;No supported compositor detected for logout&quot;);
    }
 
    function suspend() {
        suspendProcess.running = true;
    }
 
    function shutdown() {
        shutdownProcess.running = true;
    }
 
    function reboot() {
        rebootProcess.running = true;
    }
 
    function updateSystemInfo() {
        uptimeProcess.running = true;
    }
 
    width: 440 * Theme.scale(screen)
    height: 80 * Theme.scale(screen)
    color: &quot;transparent&quot;
    anchors.horizontalCenterOffset: -2
    onPanelVisibleChanged: {
        if (panelVisible)
            updateSystemInfo();
 
    }
    Component.onCompleted: {
        uptimeProcess.running = true;
    }
 
    Rectangle {
        id: card
 
        anchors.fill: parent
        color: Theme.surface
        radius: 18 * Theme.scale(screen)
 
        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 18 * Theme.scale(screen)
            spacing: 12 * Theme.scale(screen)
 
            RowLayout {
                Layout.fillWidth: true
                spacing: 12 * Theme.scale(screen)
 
                Rectangle {
                    width: 48 * Theme.scale(screen)
                    height: 48 * Theme.scale(screen)
                    radius: width * 0.5
                    color: Theme.accentPrimary
 
                    Rectangle {
                        anchors.fill: parent
                        color: &quot;transparent&quot;
                        radius: width * 0.5
                        border.color: Theme.accentPrimary
                        border.width: 2 * Theme.scale(screen)
                        z: 2
                    }
 
                    Avatar {
                    }
 
                }
 
                ColumnLayout {
                    spacing: 4 * Theme.scale(screen)
                    Layout.fillWidth: true
 
                    Text {
                        text: Quickshell.env(&quot;USER&quot;)
                        font.family: Theme.fontFamily
                        font.pixelSize: 16 * Theme.scale(screen)
                        font.bold: true
                        color: Theme.textPrimary
                    }
 
                    Text {
                        text: &quot;System Uptime: &quot; + uptimeText
                        font.family: Theme.fontFamily
                        font.pixelSize: 12 * Theme.scale(screen)
                        color: Theme.textSecondary
                    }
 
                }
 
                Item {
                    Layout.fillWidth: true
                }
 
                Rectangle {
                    id: settingsButton
 
                    width: 32 * Theme.scale(screen)
                    height: 32 * Theme.scale(screen)
                    radius: width * 0.5
                    color: settingsButtonArea.containsMouse || settingsButtonArea.pressed ? Theme.accentPrimary : &quot;transparent&quot;
                    border.color: Theme.accentPrimary
                    border.width: 1 * Theme.scale(screen)
 
                    Text {
                        anchors.fill: parent
                        text: &quot;settings&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 16 * Theme.scale(screen)
                        color: settingsButtonArea.containsMouse || settingsButtonArea.pressed ? Theme.backgroundPrimary : Theme.accentPrimary
                        horizontalAlignment: Text.AlignHCenter
                        verticalAlignment: Text.AlignVCenter
                    }
 
                    MouseArea {
                        id: settingsButtonArea
 
                        anchors.fill: parent
                        cursorShape: Qt.PointingHandCursor
                        hoverEnabled: true
                        onClicked: {
                            if (typeof settingsModal !== &apos;undefined&apos; &amp;&amp; settingsModal &amp;&amp; settingsModal.openSettings)
                                settingsModal.openSettings();
 
                        }
                    }
 
                    StyledTooltip {
                        id: settingsTooltip
 
                        text: &quot;Settings&quot;
                        targetItem: settingsButton
                        tooltipVisible: settingsButtonArea.containsMouse
                    }
 
                }
 
                Rectangle {
                    id: systemButton
 
                    width: 32 * Theme.scale(screen)
                    height: 32 * Theme.scale(screen)
                    radius: width * 0.5
                    color: systemButtonArea.containsMouse || systemButtonArea.pressed ? Theme.accentPrimary : &quot;transparent&quot;
                    border.color: Theme.accentPrimary
                    border.width: 1 * Theme.scale(screen)
 
                    Text {
                        anchors.fill: parent
                        text: &quot;power_settings_new&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 16 * Theme.scale(screen)
                        color: systemButtonArea.containsMouse || systemButtonArea.pressed ? Theme.backgroundPrimary : Theme.accentPrimary
                        horizontalAlignment: Text.AlignHCenter
                        verticalAlignment: Text.AlignVCenter
                    }
 
                    MouseArea {
                        id: systemButtonArea
 
                        anchors.fill: parent
                        cursorShape: Qt.PointingHandCursor
                        hoverEnabled: true
                        onClicked: {
                            systemMenu.visible = !systemMenu.visible;
                        }
                    }
 
                    StyledTooltip {
                        id: systemTooltip
 
                        text: &quot;Power Menu&quot;
                        targetItem: systemButton
                        tooltipVisible: systemButtonArea.containsMouse
                    }
 
                }
 
            }
 
        }
 
    }
 
    PanelWithOverlay {
        id: systemMenu
 
        anchors.top: systemButton.bottom
        anchors.right: systemButton.right
 
        Rectangle {
            width: 160 * Theme.scale(screen)
            height: 220 * Theme.scale(screen)
            color: Theme.surface
            radius: 8 * Theme.scale(screen)
            border.color: Theme.outline
            border.width: 1 * Theme.scale(screen)
            visible: true
            z: 9999
            anchors.top: parent.top
            anchors.right: parent.right
            anchors.rightMargin: 32 * Theme.scale(screen)
            anchors.topMargin: systemButton.y + systemButton.height + 48 * Theme.scale(screen)
 
            // Prevent closing when clicking in the panel bg
            MouseArea {
                anchors.fill: parent
            }
 
            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 8 * Theme.scale(screen)
                spacing: 4 * Theme.scale(screen)
 
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36 * Theme.scale(screen)
                    radius: 6 * Theme.scale(screen)
                    color: lockButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
 
                    Item {
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.verticalCenter: parent.verticalCenter
                        anchors.leftMargin: 12 * Theme.scale(screen)
                        anchors.rightMargin: 12 * Theme.scale(screen)
 
                        Row {
                            id: lockRow
                            spacing: 8 * Theme.scale(screen)
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.verticalCenter: parent.verticalCenter
 
                            Text {
                                text: &quot;lock_outline&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 16 * Theme.scale(screen)
                                color: lockButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
 
                            Text {
                                text: &quot;Lock Screen&quot;
                                font.family: Theme.fontFamily
                                font.pixelSize: 14 * Theme.scale(screen)
                                color: lockButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
                        }
                    }
 
                    MouseArea {
                        id: lockButtonArea
 
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            lockScreen.locked = true;
                            systemMenu.visible = false;
                        }
                    }
 
                }
 
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36 * Theme.scale(screen)
                    radius: 6 * Theme.scale(screen)
                    color: suspendButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
 
                    Item {
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.verticalCenter: parent.verticalCenter
                        anchors.leftMargin: 12 * Theme.scale(screen)
                        anchors.rightMargin: 12 * Theme.scale(screen)
 
                        Row {
                            id: suspendRow
                            spacing: 8 * Theme.scale(screen)
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.verticalCenter: parent.verticalCenter
 
                            Text {
                                text: &quot;bedtime&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 16 * Theme.scale(screen)
                                color: suspendButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
 
                            Text {
                                text: &quot;Suspend&quot;
                                font.pixelSize: 14 * Theme.scale(screen)
                                color: suspendButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
                        }
                    }
 
                    MouseArea {
                        id: suspendButtonArea
 
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            suspend();
                            systemMenu.visible = false;
                        }
                    }
 
                }
 
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36 * Theme.scale(screen)
                    radius: 6 * Theme.scale(screen)
                    color: rebootButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
 
                    Item {
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.verticalCenter: parent.verticalCenter
                        anchors.leftMargin: 12 * Theme.scale(screen)
                        anchors.rightMargin: 12 * Theme.scale(screen)
 
                        Row {
                            id: rebootRow
                            spacing: 8 * Theme.scale(screen)
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.verticalCenter: parent.verticalCenter
 
                            Text {
                                text: &quot;refresh&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 16 * Theme.scale(screen)
                                color: rebootButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
 
                            Text {
                                text: &quot;Reboot&quot;
                                font.family: Theme.fontFamily
                                font.pixelSize: 14 * Theme.scale(screen)
                                color: rebootButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
                        }
                    }
 
                    MouseArea {
                        id: rebootButtonArea
 
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            reboot();
                            systemMenu.visible = false;
                        }
                    }
 
                }
 
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36 * Theme.scale(screen)
                    radius: 6 * Theme.scale(screen)
                    color: logoutButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
 
                    Item {
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.verticalCenter: parent.verticalCenter
                        anchors.leftMargin: 12 * Theme.scale(screen)
                        anchors.rightMargin: 12 * Theme.scale(screen)
 
                        Row {
                            id: logoutRow
                            spacing: 8 * Theme.scale(screen)
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.verticalCenter: parent.verticalCenter
 
                            Text {
                                text: &quot;exit_to_app&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 16 * Theme.scale(screen)
                                color: logoutButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
 
                            Text {
                                text: &quot;Logout&quot;
                                font.pixelSize: 14 * Theme.scale(screen)
                                color: logoutButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
                        }
                    }
 
                    MouseArea {
                        id: logoutButtonArea
 
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            logout();
                            systemMenu.visible = false;
                        }
                    }
 
                }
 
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 36 * Theme.scale(screen)
                    radius: 6 * Theme.scale(screen)
                    color: shutdownButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
 
                    Item {
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.verticalCenter: parent.verticalCenter
                        anchors.leftMargin: 12 * Theme.scale(screen)
                        anchors.rightMargin: 12 * Theme.scale(screen)
 
                        Row {
                            id: shutdownRow
                            spacing: 8 * Theme.scale(screen)
                            anchors.left: parent.left
                            anchors.right: parent.right
                            anchors.verticalCenter: parent.verticalCenter
 
                            Text {
                                text: &quot;power_settings_new&quot;
                                font.family: &quot;Material Symbols Outlined&quot;
                                font.pixelSize: 16 * Theme.scale(screen)
                                color: shutdownButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
 
                            Text {
                                text: &quot;Shutdown&quot;
                                font.pixelSize: 14 * Theme.scale(screen)
                                color: shutdownButtonArea.containsMouse ? Theme.onAccent : Theme.textPrimary
                                verticalAlignment: Text.AlignVCenter
                                anchors.verticalCenter: parent.verticalCenter
                                anchors.verticalCenterOffset: 1 * Theme.scale(screen)
                            }
                        }
                    }
 
                    MouseArea {
                        id: shutdownButtonArea
 
                        anchors.fill: parent
                        hoverEnabled: true
                        cursorShape: Qt.PointingHandCursor
                        onClicked: {
                            shutdown();
                            systemMenu.visible = false;
                        }
                    }
 
                }
 
            }
 
        }
 
    }
 
    Process {
    id: uptimeProcess
    command: [&quot;cat&quot;, &quot;/proc/uptime&quot;]
    running: false

    stdout: StdioCollector {
        onStreamFinished: {
            var uptimeSeconds = parseFloat(this.text.trim().split(&apos; &apos;)[0]);
            
            var minutes = Math.floor(uptimeSeconds / 60) % 60;
            var hours = Math.floor(uptimeSeconds / 3600) % 24;
            var days = Math.floor(uptimeSeconds / 86400);
            
            // Format the output
            if (days &gt; 0) {
                uptimeText = days + &quot;d &quot; + hours + &quot;h&quot;;
            } else if (hours &gt; 0) {
                uptimeText = hours + &quot;h &quot; + minutes + &quot;m&quot;;
            } else {
                uptimeText = minutes + &quot;m&quot;;
            }
            
            uptimeProcess.running = false;
            }
        }
    }
 
    Process {
        id: shutdownProcess
 
        command: [&quot;shutdown&quot;, &quot;-h&quot;, &quot;now&quot;]
        running: false
    }
 
    Process {
        id: rebootProcess
 
        command: [&quot;reboot&quot;]
        running: false
    }
 
    Process {
        id: suspendProcess
 
        command: [&quot;systemctl&quot;, &quot;suspend&quot;]
        running: false
    }
 
    Process {
        id: logoutProcessNiri
 
        command: [&quot;niri&quot;, &quot;msg&quot;, &quot;action&quot;, &quot;quit&quot;, &quot;--skip-confirmation&quot;]
        running: false
    }
 
    Process {
        id: logoutProcessHyprland
 
        command: [&quot;hyprctl&quot;, &quot;dispatch&quot;, &quot;exit&quot;]
        running: false
    }
 
    Process {
        id: logoutProcess
 
        command: [&quot;loginctl&quot;, &quot;terminate-user&quot;, Quickshell.env(&quot;USER&quot;)]
        running: false
    }
 
    Timer {
        interval: 60000
        repeat: true
        running: panelVisible
        onTriggered: updateSystemInfo()
    }
 
    LockScreen {
        id: lockScreen
    }
 
}</file><file path="quickshell/Widgets/SidePanel/SystemMonitor.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Io
import qs.Components
import qs.Services
import qs.Settings

Rectangle {
    id: systemMonitor
    color: &quot;transparent&quot;

    // Track visibility state for panel integration
    property bool isVisible: false
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)

    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18 * Theme.scale(screen)

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 8 * Theme.scale(screen)
            spacing: 12 * Theme.scale(screen)
            Layout.alignment: Qt.AlignVCenter

    
            // CPU usage indicator with circular progress bar
            Item {
                width: 50 * Theme.scale(screen)
                height: 50 * Theme.scale(screen)
                CircularProgressBar {
                    id: cpuBar
                    progress: Sysinfo.cpuUsage / 100
                    size: 50 * Theme.scale(screen)
                    strokeWidth: 4 * Theme.scale(screen)
                    hasNotch: true
                    notchIcon: &quot;speed&quot;
                    notchIconSize: 14 * Theme.scale(screen)
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: cpuBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: cpuTooltip.tooltipVisible = true
                    onExited: cpuTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: cpuTooltip
                    text: &apos;CPU Usage: &apos; + Sysinfo.cpuUsage + &apos;%&apos;
                    tooltipVisible: false
                    targetItem: cpuBar
                    delay: 200
                }
            }

    
            // CPU temperature indicator with circular progress bar
            Item {
                width: 50 * Theme.scale(screen); height: 50 * Theme.scale(screen)
                CircularProgressBar {
                    id: tempBar
                    progress: Sysinfo.cpuTemp / 100
                    size: 50 * Theme.scale(screen)
                    strokeWidth: 4 * Theme.scale(screen)
                    hasNotch: true
                    units: &quot;°C&quot;
                    notchIcon: &quot;thermometer&quot;
                    notchIconSize: 14 * Theme.scale(screen)
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: tempBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: tempTooltip.tooltipVisible = true
                    onExited: tempTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: tempTooltip
                    text: &apos;CPU Temp: &apos; + Sysinfo.cpuTemp + &apos;°C&apos;
                    tooltipVisible: false
                    targetItem: tempBar
                    delay: 200
                }
            }

    
            // Memory usage indicator with circular progress bar
            Item {
                width: 50 * Theme.scale(screen); height: 50 * Theme.scale(screen)
                CircularProgressBar {
                    id: memBar
                    progress: Sysinfo.memoryUsagePer / 100
                    size: 50 * Theme.scale(screen)
                    strokeWidth: 4 * Theme.scale(screen)
                    hasNotch: true
                    notchIcon: &quot;memory&quot;
                    notchIconSize: 14 * Theme.scale(screen)
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: memBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: memTooltip.tooltipVisible = true
                    onExited: memTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: memTooltip
                    text: &apos;Memory Usage: &apos; + Sysinfo.memoryUsagePer + &apos;% (&apos; + Sysinfo.memoryUsageStr + &apos; used)&apos;
                    tooltipVisible: false
                    targetItem: memBar
                    delay: 200
                }
            }

    
            // Disk usage indicator with circular progress bar
            Item {
                width: 50 * Theme.scale(screen); height: 50 * Theme.scale(screen)
                CircularProgressBar {
                    id: diskBar
                    progress: Sysinfo.diskUsage / 100
                    size: 50 * Theme.scale(screen)
                    strokeWidth: 4 * Theme.scale(screen)
                    hasNotch: true
                    notchIcon: &quot;storage&quot;
                    notchIconSize: 14 * Theme.scale(screen)
                    Layout.alignment: Qt.AlignHCenter
                }
                MouseArea {
                    id: diskBarMouse
                    anchors.fill: parent
                    hoverEnabled: true
                    onEntered: diskTooltip.tooltipVisible = true
                    onExited: diskTooltip.tooltipVisible = false
                }
                StyledTooltip {
                    id: diskTooltip
                    text: &apos;Disk Usage: &apos; + Sysinfo.diskUsage + &apos;%&apos;
                    tooltipVisible: false
                    targetItem: diskBar
                    delay: 200
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/SidePanel/Weather.qml">import QtQuick 
import QtQuick.Layouts
import QtQuick.Controls
import qs.Settings
import qs.Components
import &quot;../../Helpers/Weather.js&quot; as WeatherHelper
 
Rectangle {
    id: weatherRoot
    width: 440 * Theme.scale(screen)
    height: 180 * Theme.scale(screen)
    color: &quot;transparent&quot;
    anchors.horizontalCenterOffset: -2
 
    property var screen: (typeof modelData !== &apos;undefined&apos; ? modelData : null)
    property string city: Settings.settings.weatherCity !== undefined ? Settings.settings.weatherCity : &quot;&quot;
    property var weatherData: null
    property string errorString: &quot;&quot;
    property bool isVisible: false
    property int lastFetchTime: 0
    property bool isLoading: false
 
    // Auto-refetch weather when city changes
    Connections {
        target: Settings.settings
        function onWeatherCityChanged() {
            if (isVisible &amp;&amp; city !== &quot;&quot;) {
                // Force refresh when city changes
                lastFetchTime = 0;
                fetchCityWeather();
            }
        }
    }
 
    Component.onCompleted: {
        if (isVisible) {
            fetchCityWeather()
        }
    }
 
    function fetchCityWeather() {
        if (!city || city.trim() === &quot;&quot;) {
            errorString = &quot;No city configured&quot;;
            return;
        }
 
        // Check if we should fetch new data (avoid fetching too frequently)
        var currentTime = Date.now();
        var timeSinceLastFetch = currentTime - lastFetchTime;
 
        // Only skip if we have recent data AND lastFetchTime is not 0 (initial state)
        if (lastFetchTime &gt; 0 &amp;&amp; timeSinceLastFetch &lt; 60000) { // 1 minute
            return; // Skip if last fetch was less than 1 minute ago
        }
 
        isLoading = true;
        errorString = &quot;&quot;;
 
        WeatherHelper.fetchCityWeather(city,
            function(result) {
                weatherData = result.weather;
                lastFetchTime = currentTime;
                errorString = &quot;&quot;;
                isLoading = false;
            },
            function(err) {
                errorString = err;
                isLoading = false;
            }
        );
    }
 
    function startWeatherFetch() {
        isVisible = true
        // Force refresh when panel opens, regardless of time check
        lastFetchTime = 0;
        fetchCityWeather();
    }
 
    function stopWeatherFetch() {
        isVisible = false
    }
 
    Rectangle {
        id: card
        anchors.fill: parent
        color: Theme.surface
        radius: 18 * Theme.scale(screen)
 
        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 18 * Theme.scale(screen)
            spacing: 12 * Theme.scale(screen)
 
 
            RowLayout {
                spacing: 12 * Theme.scale(screen)
                Layout.fillWidth: true
 
 
                RowLayout {
                    spacing: 12 * Theme.scale(screen)
                    Layout.preferredWidth: 140 * Theme.scale(screen)
 
 
                    Spinner {
                        id: loadingSpinner
                        running: isLoading
                        color: Theme.accentPrimary
                        size: 28 * Theme.scale(screen)
                        Layout.alignment: Qt.AlignVCenter
                        visible: isLoading
                    }

                    Text {
                        id: weatherIcon
                        visible: !isLoading
                        text: weatherData &amp;&amp; weatherData.current_weather ? materialSymbolForCode(weatherData.current_weather.weathercode) : &quot;cloud&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 28 * Theme.scale(screen)
                        verticalAlignment: Text.AlignVCenter
                        color: Theme.accentPrimary
                        Layout.alignment: Qt.AlignVCenter
                    }
 
                    ColumnLayout {
                        spacing: 2 * Theme.scale(screen)
                        RowLayout {
                            spacing: 4 * Theme.scale(screen)
                            Text {
                                text: city
                                font.family: Theme.fontFamily
                                font.pixelSize: 14 * Theme.scale(screen)
                                font.bold: true
                                color: Theme.textPrimary
                            }
                            Text {
                                text: weatherData &amp;&amp; weatherData.timezone_abbreviation ? `(${weatherData.timezone_abbreviation})` : &quot;&quot;
                                font.family: Theme.fontFamily
                                font.pixelSize: 10 * Theme.scale(screen)
                                color: Theme.textSecondary
                                leftPadding: 2 * Theme.scale(screen)
                            }
                        }
                        Text {
                            text: weatherData &amp;&amp; weatherData.current_weather ? ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? `${Math.round(weatherData.current_weather.temperature * 9/5 + 32)}°F` : `${Math.round(weatherData.current_weather.temperature)}°C`) : ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? &quot;--°F&quot; : &quot;--°C&quot;)
                            font.family: Theme.fontFamily
                            font.pixelSize: 24 * Theme.scale(screen)
                            font.bold: true
                            color: Theme.textPrimary
                        }
                    }
                }
 
                Item {
                    Layout.fillWidth: true
                }
            }
 
 
            Rectangle {
                width: parent.width
                height: 1 * Theme.scale(screen)
                color: Qt.rgba(Theme.textSecondary.g, Theme.textSecondary.g, Theme.textSecondary.b, 0.12)
                Layout.fillWidth: true
                Layout.topMargin: 2 * Theme.scale(screen)
                Layout.bottomMargin: 2 * Theme.scale(screen)
            }
 
 
            RowLayout {
                spacing: 12 * Theme.scale(screen)
                Layout.fillWidth: true
                Layout.alignment: Qt.AlignHCenter
                visible: weatherData &amp;&amp; weatherData.daily &amp;&amp; weatherData.daily.time
 
                Repeater {
                    model: weatherData &amp;&amp; weatherData.daily &amp;&amp; weatherData.daily.time ? 5 : 0
                    delegate: ColumnLayout {
                        spacing: 2 * Theme.scale(screen)
                        Layout.alignment: Qt.AlignHCenter
                        Text {
 
                            text: Qt.formatDateTime(new Date(weatherData.daily.time[index]), &quot;ddd&quot;)
                            font.family: Theme.fontFamily
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textSecondary
                            horizontalAlignment: Text.AlignHCenter
                            Layout.alignment: Qt.AlignHCenter
                        }
                        Text {
 
                            text: materialSymbolForCode(weatherData.daily.weathercode[index])
                            font.family: &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 22 * Theme.scale(screen)
                            color: Theme.accentPrimary
                            horizontalAlignment: Text.AlignHCenter
                            Layout.alignment: Qt.AlignHCenter
                        }
                        Text {
 
                            text: weatherData &amp;&amp; weatherData.daily ? ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? `${Math.round(weatherData.daily.temperature_2m_max[index] * 9/5 + 32)}° / ${Math.round(weatherData.daily.temperature_2m_min[index] * 9/5 + 32)}°` : `${Math.round(weatherData.daily.temperature_2m_max[index])}° / ${Math.round(weatherData.daily.temperature_2m_min[index])}°`) : ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? &quot;--° / --°&quot; : &quot;--° / --°&quot;)
                            font.family: Theme.fontFamily
                            font.pixelSize: 12 * Theme.scale(screen)
                            color: Theme.textPrimary
                            horizontalAlignment: Text.AlignHCenter
                            Layout.alignment: Qt.AlignHCenter
                        }
                    }
                }
            }
 
 
            Text {
                text: errorString
                color: Theme.error
                visible: errorString !== &quot;&quot;
                font.family: Theme.fontFamily
                font.pixelSize: 10 * Theme.scale(screen)
                horizontalAlignment: Text.AlignHCenter
                Layout.alignment: Qt.AlignHCenter
            }
        }
    }
 
 
    function materialSymbolForCode(code) {
        if (code === 0) return &quot;sunny&quot;;
        if (code === 1 || code === 2) return &quot;partly_cloudy_day&quot;;
        if (code === 3) return &quot;cloud&quot;;
        if (code &gt;= 45 &amp;&amp; code &lt;= 48) return &quot;foggy&quot;;
        if (code &gt;= 51 &amp;&amp; code &lt;= 67) return &quot;rainy&quot;;
        if (code &gt;= 71 &amp;&amp; code &lt;= 77) return &quot;weather_snowy&quot;;
        if (code &gt;= 80 &amp;&amp; code &lt;= 82) return &quot;rainy&quot;;
        if (code &gt;= 95 &amp;&amp; code &lt;= 99) return &quot;thunderstorm&quot;;
        return &quot;cloud&quot;;
    }
    function weatherDescriptionForCode(code) {
        if (code === 0) return &quot;Clear sky&quot;;
        if (code === 1) return &quot;Mainly clear&quot;;
        if (code === 2) return &quot;Partly cloudy&quot;;
        if (code === 3) return &quot;Overcast&quot;;
        if (code === 45 || code === 48) return &quot;Fog&quot;;
        if (code &gt;= 51 &amp;&amp; code &lt;= 67) return &quot;Drizzle&quot;;
        if (code &gt;= 71 &amp;&amp; code &lt;= 77) return &quot;Snow&quot;;
        if (code &gt;= 80 &amp;&amp; code &lt;= 82) return &quot;Rain showers&quot;;
        if (code &gt;= 95 &amp;&amp; code &lt;= 99) return &quot;Thunderstorm&quot;;
        return &quot;Unknown&quot;;
    }
}</file><file path="quickshell/Widgets/SidePanel/WifiPanel.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell.Wayland
import Quickshell
import Quickshell.Io
import Quickshell.Bluetooth
import qs.Settings
import qs.Components
import qs.Helpers

Item {
    property alias panel: wifiPanelModal

    function showAt() {
        wifiPanelModal.visible = true;
        wifiLogic.refreshNetworks();
    }

    Component.onCompleted: {
        existingNetwork.running = true;
    }

    function signalIcon(signal) {
        if (signal &gt;= 80)
            return &quot;network_wifi&quot;;
        if (signal &gt;= 60)
            return &quot;network_wifi_3_bar&quot;;
        if (signal &gt;= 40)
            return &quot;network_wifi_2_bar&quot;;
        if (signal &gt;= 20)
            return &quot;network_wifi_1_bar&quot;;
        return &quot;wifi_0_bar&quot;;
    }

    Process {
        id: existingNetwork
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;NAME,TYPE&quot;, &quot;connection&quot;, &quot;show&quot;]
        stdout: StdioCollector {
            onStreamFinished: {
                const lines = text.split(&quot;\n&quot;);
                const networksMap = {};

                refreshIndicator.running = true;
                refreshIndicator.visible = true;

                for (let i = 0; i &lt; lines.length; ++i) {
                    const line = lines[i].trim();
                    if (!line)
                        continue;

                    const parts = line.split(&quot;:&quot;);
                    if (parts.length &lt; 2) {
                        console.warn(&quot;Malformed nmcli output line:&quot;, line);
                        continue;
                    }

                    const ssid = wifiLogic.replaceQuickshell(parts[0]);
                    const type = parts[1];

                    if (ssid) {
                        networksMap[ssid] = {
                            ssid: ssid,
                            type: type
                        };
                    }
                }
                scanProcess.existingNetwork = networksMap;
                scanProcess.running = true;
            }
        }
    }

    Process {
        id: scanProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;SSID,SECURITY,SIGNAL,IN-USE&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;list&quot;]

        property var existingNetwork

        stdout: StdioCollector {
            onStreamFinished: {
                const lines = text.split(&quot;\n&quot;);
                const networksMap = {};

                for (let i = 0; i &lt; lines.length; ++i) {
                    const line = lines[i].trim();
                    if (!line)
                        continue;

                    const parts = line.split(&quot;:&quot;);
                    if (parts.length &lt; 4) {
                        console.warn(&quot;Malformed nmcli output line:&quot;, line);
                        continue;
                    }
                    const ssid = parts[0];
                    const security = parts[1];
                    const signal = parseInt(parts[2]);
                    const inUse = parts[3] === &quot;*&quot;;

                    if (ssid) {
                        if (!networksMap[ssid]) {
                            networksMap[ssid] = {
                                ssid: ssid,
                                security: security,
                                signal: signal,
                                connected: inUse,
                                existing: ssid in scanProcess.existingNetwork
                            };
                        } else {
                            const existingNet = networksMap[ssid];
                            if (inUse) {
                                existingNet.connected = true;
                            }
                            if (signal &gt; existingNet.signal) {
                                existingNet.signal = signal;
                                existingNet.security = security;
                            }
                        }
                    }
                }

                
                wifiLogic.networks = networksMap;
                scanProcess.existingNetwork = {};
                refreshIndicator.running = false;
                refreshIndicator.visible = false;
            }
        }
    }

    QtObject {
        id: wifiLogic
        property var networks: {}
        property var anchorItem: null
        property real anchorX
        property real anchorY
        property string passwordPromptSsid: &quot;&quot;
        property string passwordInput: &quot;&quot;
        property bool showPasswordPrompt: false
        property string connectingSsid: &quot;&quot;
        property string connectStatus: &quot;&quot;
        property string connectStatusSsid: &quot;&quot;
        property string connectError: &quot;&quot;
        property string connectSecurity: &quot;&quot;
        property var pendingConnect: null
        property string detectedInterface: &quot;&quot;
        property string actionPanelSsid: &quot;&quot;

        function replaceQuickshell(ssid: string): string {
            const newName = ssid.replace(&quot;quickshell-&quot;, &quot;&quot;);
            
            if (!ssid.startsWith(&quot;quickshell-&quot;)) {
                return newName;
            }

            if (wifiLogic.networks &amp;&amp; newName in wifiLogic.networks) {
                console.log(`Quickshell ${newName} already exists, deleting old profile`)
                deleteProfileProcess.connName = ssid;
                deleteProfileProcess.running = true;
            }

            console.log(`Changing from ${ssid} to ${newName}`)
            renameConnectionProcess.oldName = ssid;
            renameConnectionProcess.newName = newName;
            renameConnectionProcess.running = true;

            return newName;
        }

        function disconnectNetwork(ssid) {
            const profileName = ssid;
            disconnectProfileProcess.connectionName = profileName;
            disconnectProfileProcess.running = true;
        }
        function refreshNetworks() {
            existingNetwork.running = true;
        }
        function showAt() {
            wifiPanelModal.visible = true;
            wifiLogic.refreshNetworks();
        }
        function connectNetwork(ssid, security) {
            wifiLogic.pendingConnect = {
                ssid: ssid,
                security: security,
                password: &quot;&quot;
            };
            wifiLogic.doConnect();
        }
        function submitPassword() {
            wifiLogic.pendingConnect = {
                ssid: wifiLogic.passwordPromptSsid,
                security: wifiLogic.connectSecurity,
                password: wifiLogic.passwordInput
            };
            wifiLogic.doConnect();
        }
        function doConnect() {
            const params = wifiLogic.pendingConnect;
            if (!params)
                return;

            wifiLogic.connectingSsid = params.ssid;


            const targetNetwork = wifiLogic.networks[params.ssid];


            if (targetNetwork &amp;&amp; targetNetwork.existing) {

                upConnectionProcess.profileName = params.ssid;
                upConnectionProcess.running = true;
                wifiLogic.pendingConnect = null;
                return;
            }


            if (params.security &amp;&amp; params.security !== &quot;--&quot;) {
                getInterfaceProcess.running = true;
                return;
            }
            connectProcess.security = params.security;
            connectProcess.ssid = params.ssid;
            connectProcess.password = params.password;
            connectProcess.running = true;
            wifiLogic.pendingConnect = null;
        }
        function isSecured(security) {
            return security &amp;&amp; security.trim() !== &quot;&quot; &amp;&amp; security.trim() !== &quot;--&quot;;
        }
    }

    
    Process {
        id: disconnectProfileProcess
        property string connectionName: &quot;&quot;
        running: false
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;down&quot;, connectionName]
        onRunningChanged: {
            if (!running) {
                wifiLogic.refreshNetworks();
            }
        }
    }

    // Process to rename a connection
    Process {
        id: renameConnectionProcess
        running: false
        property string oldName: &quot;&quot;
        property string newName: &quot;&quot;
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;modify&quot;, oldName, &quot;connection.id&quot;, newName]

        stdout: StdioCollector {
            onStreamFinished: {
                console.log(&quot;Successfully renamed connection &apos;&quot; + 
                        renameConnectionProcess.oldName + &quot;&apos; to &apos;&quot; + 
                        renameConnectionProcess.newName + &quot;&apos;&quot;);
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                if (text.trim() !== &quot;&quot; &amp;&amp; !text.toLowerCase().includes(&quot;warning&quot;)) {
                    console.error(&quot;Error renaming connection:&quot;, text);
                }
            }
        }
    }



    // Process to rename a connection
    Process {
        id: deleteProfileProcess
        running: false
        property string connName: &quot;&quot;
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;delete&quot;, `&apos;${connName}&apos;`]

        stdout: StdioCollector {
            onStreamFinished: {
                console.log(&quot;Deleted connection &apos;&quot; + deleteProfileProcess.connName + &quot;&apos;&quot;);
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                console.error(&quot;Error deleting connection &apos;&quot; + deleteProfileProcess.connName + &quot;&apos;:&quot;, text);
            }
        }
    }


    
    Process {
        id: connectProcess
        property string ssid: &quot;&quot;
        property string password: &quot;&quot;
        property string security: &quot;&quot;
        running: false
        onStarted: {
            refreshIndicator.running = true;
        }
        onExited: (exitCode, exitStatus) =&gt; {
            refreshIndicator.running = false;
        }
        command: {
            if (password) {
                return [&quot;nmcli&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;connect&quot;, `&apos;${ssid}&apos;`, &quot;password&quot;, password];
            } else {
                return [&quot;nmcli&quot;, &quot;device&quot;, &quot;wifi&quot;, &quot;connect&quot;, `&apos;${ssid}&apos;`];
            }
        }
        stdout: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;success&quot;;
                wifiLogic.connectStatusSsid = connectProcess.ssid;
                wifiLogic.connectError = &quot;&quot;;
                wifiLogic.refreshNetworks();
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;error&quot;;
                wifiLogic.connectStatusSsid = connectProcess.ssid;
                wifiLogic.connectError = text;
            }
        }
    }

    
    Process {
        id: getInterfaceProcess
        running: false
        command: [&quot;nmcli&quot;, &quot;-t&quot;, &quot;-f&quot;, &quot;DEVICE,TYPE,STATE&quot;, &quot;device&quot;]
        stdout: StdioCollector {
            onStreamFinished: {
                var lines = text.split(&quot;\n&quot;);
                for (var i = 0; i &lt; lines.length; ++i) {
                    var parts = lines[i].split(&quot;:&quot;);
                    if (parts[1] === &quot;wifi&quot; &amp;&amp; parts[2] !== &quot;unavailable&quot;) {
                        wifiLogic.detectedInterface = parts[0];
                        break;
                    }
                }
                if (wifiLogic.detectedInterface) {
                    var params = wifiLogic.pendingConnect;
                    addConnectionProcess.ifname = wifiLogic.detectedInterface;
                    addConnectionProcess.ssid = params.ssid;
                    addConnectionProcess.password = params.password;
                    addConnectionProcess.profileName = params.ssid;
                    addConnectionProcess.security = params.security;
                    addConnectionProcess.running = true;
                } else {
                    wifiLogic.connectStatus = &quot;error&quot;;
                    wifiLogic.connectStatusSsid = wifiLogic.pendingConnect.ssid;
                    wifiLogic.connectError = &quot;No Wi-Fi interface found.&quot;;
                    wifiLogic.connectingSsid = &quot;&quot;;
                    wifiLogic.pendingConnect = null;
                }
            }
        }
    }

    
    Process {
        id: addConnectionProcess
        property string ifname: &quot;&quot;
        property string ssid: &quot;&quot;
        property string password: &quot;&quot;
        property string profileName: &quot;&quot;
        property string security: &quot;&quot;
        running: false
        command: {
            var cmd = [&quot;nmcli&quot;, &quot;connection&quot;, &quot;add&quot;, &quot;type&quot;, &quot;wifi&quot;, &quot;ifname&quot;, ifname, &quot;con-name&quot;, profileName, &quot;ssid&quot;, ssid];
            if (security &amp;&amp; security !== &quot;--&quot;) {
                cmd.push(&quot;wifi-sec.key-mgmt&quot;);
                cmd.push(&quot;wpa-psk&quot;);
                cmd.push(&quot;wifi-sec.psk&quot;);
                cmd.push(password);
            }
            return cmd;
        }
        stdout: StdioCollector {
            onStreamFinished: {
                upConnectionProcess.profileName = addConnectionProcess.profileName;
                upConnectionProcess.running = true;
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                upConnectionProcess.profileName = addConnectionProcess.profileName;
                upConnectionProcess.running = true;
            }
        }
    }

    
    Process {
        id: upConnectionProcess
        property string profileName: &quot;&quot;
        running: false
        command: [&quot;nmcli&quot;, &quot;connection&quot;, &quot;up&quot;, &quot;id&quot;, profileName]
        stdout: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;success&quot;;
                wifiLogic.connectStatusSsid = wifiLogic.pendingConnect ? wifiLogic.pendingConnect.ssid : &quot;&quot;;
                wifiLogic.connectError = &quot;&quot;;
                wifiLogic.refreshNetworks();
                wifiLogic.pendingConnect = null;
            }
        }
        stderr: StdioCollector {
            onStreamFinished: {
                wifiLogic.connectingSsid = &quot;&quot;;
                wifiLogic.showPasswordPrompt = false;
                wifiLogic.passwordPromptSsid = &quot;&quot;;
                wifiLogic.passwordInput = &quot;&quot;;
                wifiLogic.connectStatus = &quot;error&quot;;
                wifiLogic.connectStatusSsid = wifiLogic.pendingConnect ? wifiLogic.pendingConnect.ssid : &quot;&quot;;
                wifiLogic.connectError = text;
                wifiLogic.pendingConnect = null;
            }
        }
    }

    
    Rectangle {
        id: wifiButton
        width: 36
        height: 36
        radius: 18
        border.color: Theme.accentPrimary
        border.width: 1
        color: wifiButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;

        Text {
            anchors.centerIn: parent
            text: &quot;wifi&quot;
            font.family: &quot;Material Symbols Outlined&quot;
            font.pixelSize: 22
            color: wifiButtonArea.containsMouse ? Theme.backgroundPrimary : Theme.accentPrimary
            verticalAlignment: Text.AlignVCenter
            horizontalAlignment: Text.AlignHCenter
        }

        MouseArea {
            id: wifiButtonArea
            anchors.fill: parent
            hoverEnabled: true
            cursorShape: Qt.PointingHandCursor
            onClicked: wifiLogic.showAt()
        }
    }

    PanelWindow {
        id: wifiPanelModal
        implicitWidth: 480
        implicitHeight: 780
        visible: false
        color: &quot;transparent&quot;
        anchors.top: true
        anchors.right: true
        margins.right: 0
        margins.top: 0
        WlrLayershell.keyboardFocus: WlrKeyboardFocus.OnDemand
        Component.onCompleted: {
            wifiLogic.refreshNetworks();
        }
        Rectangle {
            anchors.fill: parent
            color: Theme.backgroundPrimary
            radius: 20
            ColumnLayout {
                anchors.fill: parent
                anchors.margins: 32
                spacing: 0
                RowLayout {
                    Layout.fillWidth: true
                    spacing: 20
                    Layout.preferredHeight: 48
                    Layout.leftMargin: 16
                    Layout.rightMargin: 16
                    Text {
                        text: &quot;wifi&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 32
                        color: Theme.accentPrimary
                    }
                    Text {
                        text: &quot;Wi-Fi&quot;
                        font.pixelSize: 26
                        font.bold: true
                        color: Theme.textPrimary
                        Layout.fillWidth: true
                    }
                    Item {
                        Layout.fillWidth: true
                    }
                    Spinner {
                        id: refreshIndicator
                        Layout.preferredWidth: 24
                        Layout.preferredHeight: 24
                        Layout.alignment: Qt.AlignVCenter
                        visible: false
                        running: false
                                    color: Theme.accentPrimary
            size: 22
                    }
                    IconButton {
                        id: refreshButton
                        icon: &quot;refresh&quot;
                        onClicked: wifiLogic.refreshNetworks()
                    }

                    Rectangle {
                        implicitWidth: 36
                        implicitHeight: 36
                        radius: 18
                        color: closeButtonArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                        border.color: Theme.accentPrimary
                        border.width: 1
                        Text {
                            anchors.centerIn: parent
                            text: &quot;close&quot;
                            font.family: closeButtonArea.containsMouse ? &quot;Material Symbols Rounded&quot; : &quot;Material Symbols Outlined&quot;
                            font.pixelSize: 20
                            color: closeButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                        }
                        MouseArea {
                            id: closeButtonArea
                            anchors.fill: parent
                            hoverEnabled: true
                            onClicked: wifiPanelModal.visible = false
                            cursorShape: Qt.PointingHandCursor
                        }
                    }
                }
                Rectangle {
                    Layout.fillWidth: true
                    height: Math.max(1, 1 * Theme.scale(screen))
                    color: Theme.outline
                    opacity: 0.12
                }
                Rectangle {
                    Layout.fillWidth: true
                    Layout.preferredHeight: 640
                    Layout.alignment: Qt.AlignHCenter
                    Layout.margins: 0
                    color: Theme.surfaceVariant
                    radius: 18
                    border.color: Theme.outline
                    border.width: 1
                    Rectangle {
                        id: bg
                        anchors.fill: parent
                        color: Theme.backgroundPrimary
                        radius: 12
                        border.width: 1
                        border.color: Theme.surfaceVariant
                        z: 0
                    }
                    Rectangle {
                        id: header
                    }

                    Rectangle {
                        id: listContainer
                        anchors.top: header.bottom
                        anchors.left: parent.left
                        anchors.right: parent.right
                        anchors.bottom: parent.bottom
                        anchors.margins: 24
                        color: &quot;transparent&quot;
                        clip: true
                        ListView {
                            id: networkListView
                            anchors.fill: parent
                            spacing: 4
                            boundsBehavior: Flickable.StopAtBounds
                            model: wifiLogic.networks ? Object.values(wifiLogic.networks) : null
                            delegate: Item {
                                id: networkEntry

                                required property var modelData
                                property var signalIcon: wifiPanel.signalIcon

                                width: parent.width
                                height: (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt ? 102 : 42) + (modelData.ssid === wifiLogic.actionPanelSsid ? 60 : 0)
                                ColumnLayout {
                                    anchors.fill: parent
                                    spacing: 0
                                    Rectangle {
                                        Layout.fillWidth: true
                                        Layout.preferredHeight: 42
                                        radius: 8
                                        color: modelData.connected ? Qt.rgba(Theme.accentPrimary.r, Theme.accentPrimary.g, Theme.accentPrimary.b, 0.44) : (networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.highlight : &quot;transparent&quot;)
                                        RowLayout {
                                            anchors.fill: parent
                                            anchors.leftMargin: 12
                                            anchors.rightMargin: 12
                                            spacing: 12
                                            Text {
                                                text: signalIcon(modelData.signal)
                                                font.family: &quot;Material Symbols Outlined&quot;
                                                font.pixelSize: 20
                                                color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                                verticalAlignment: Text.AlignVCenter
                                                Layout.alignment: Qt.AlignVCenter
                                            }
                                            ColumnLayout {
                                                Layout.fillWidth: true
                                                spacing: 2
                                                RowLayout {
                                                    Layout.fillWidth: true
                                                    spacing: 6
                                                    Text {
                                                        text: modelData.ssid || &quot;Unknown Network&quot;
                                                        color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textPrimary)
                                                        font.pixelSize: 14
                                                        elide: Text.ElideRight
                                                        Layout.fillWidth: true
                                                        Layout.alignment: Qt.AlignVCenter
                                                    }
                                                    Item {
                                                        width: 22
                                                        height: 22
                                                        visible: wifiLogic.connectStatusSsid === modelData.ssid &amp;&amp; wifiLogic.connectStatus !== &quot;&quot;
                                                        RowLayout {
                                                            anchors.fill: parent
                                                            spacing: 2
                                                            Text {
                                                                visible: wifiLogic.connectStatus === &quot;success&quot;
                                                                text: &quot;check_circle&quot;
                                                                font.family: &quot;Material Symbols Outlined&quot;
                                                                font.pixelSize: 18
                                                                color: &quot;#43a047&quot;
                                                                verticalAlignment: Text.AlignVCenter
                                                            }
                                                            Text {
                                                                visible: wifiLogic.connectStatus === &quot;error&quot;
                                                                text: &quot;error&quot;
                                                                font.family: &quot;Material Symbols Outlined&quot;
                                                                font.pixelSize: 18
                                                                color: Theme.error
                                                                verticalAlignment: Text.AlignVCenter
                                                            }
                                                        }
                                                    }
                                                }
                                                Text {
                                                    text: modelData.security &amp;&amp; modelData.security !== &quot;--&quot; ? modelData.security : &quot;Open&quot;
                                                    color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : (modelData.connected ? Theme.accentPrimary : Theme.textSecondary)
                                                    font.pixelSize: 11
                                                    elide: Text.ElideRight
                                                    Layout.fillWidth: true
                                                    Layout.alignment: Qt.AlignVCenter
                                                }
                                                Text {
                                                    visible: wifiLogic.connectStatusSsid === modelData.ssid &amp;&amp; wifiLogic.connectStatus === &quot;error&quot; &amp;&amp; wifiLogic.connectError.length &gt; 0
                                                    text: wifiLogic.connectError
                                                    color: Theme.error
                                                    font.pixelSize: 11
                                                    elide: Text.ElideRight
                                                    Layout.fillWidth: true
                                                    Layout.alignment: Qt.AlignVCenter
                                                }
                                            }
                                            Text {
                                                visible: modelData.connected
                                                text: &quot;connected&quot;
                                                color: networkMouseArea.containsMouse || (modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt) ? Theme.backgroundPrimary : Theme.accentPrimary
                                                font.pixelSize: 11
                                                verticalAlignment: Text.AlignVCenter
                                                Layout.alignment: Qt.AlignVCenter
                                            }
                                            Item {
                                                Layout.alignment: Qt.AlignVCenter
                                                Layout.preferredHeight: 22
                                                Layout.preferredWidth: 22
                                                Spinner {
                                                    visible: wifiLogic.connectingSsid === modelData.ssid
                                                    running: wifiLogic.connectingSsid === modelData.ssid
                                                    color: Theme.accentPrimary
                                                    anchors.centerIn: parent
                                                    size: 22
                                                }
                                            }
                                        }
                                        MouseArea {
                                            id: networkMouseArea
                                            anchors.fill: parent
                                            hoverEnabled: true
                                            onClicked: {
                                        
                                                if (wifiLogic.actionPanelSsid === modelData.ssid) {
                                                    wifiLogic.actionPanelSsid = &quot;&quot;; // Close if already open
                                                } else {
                                                    wifiLogic.actionPanelSsid = modelData.ssid; // Open for this network
                                                }
                                            }
                                        }
                                    }
                                    Rectangle {
                                        visible: modelData.ssid === wifiLogic.passwordPromptSsid &amp;&amp; wifiLogic.showPasswordPrompt
                                        Layout.fillWidth: true
                                        Layout.preferredHeight: 60
                                        radius: 8
                                        color: &quot;transparent&quot;
                                        Layout.alignment: Qt.AlignLeft
                                        Layout.leftMargin: 32
                                        Layout.rightMargin: 32
                                        z: 2
                                        RowLayout {
                                            anchors.fill: parent
                                            anchors.margins: 12
                                            spacing: 10
                                            Item {
                                                Layout.fillWidth: true
                                                Layout.preferredHeight: 36
                                                Rectangle {
                                                    anchors.fill: parent
                                                    radius: 8
                                                    color: &quot;transparent&quot;
                                                    border.color: passwordField.activeFocus ? Theme.accentPrimary : Theme.outline
                                                    border.width: 1
                                                    TextInput {
                                                        id: passwordField
                                                        anchors.fill: parent
                                                        anchors.margins: 12
                                                        text: wifiLogic.passwordInput
                                                        font.pixelSize: 13
                                                        color: Theme.textPrimary
                                                        verticalAlignment: TextInput.AlignVCenter
                                                        clip: true
                                                        focus: true
                                                        selectByMouse: true
                                                        activeFocusOnTab: true
                                                        inputMethodHints: Qt.ImhNone
                                                        echoMode: TextInput.Password
                                                        onTextChanged: wifiLogic.passwordInput = text
                                                        onAccepted: wifiLogic.submitPassword()
                                                        MouseArea {
                                                            id: passwordMouseArea
                                                            anchors.fill: parent
                                                            onClicked: passwordField.forceActiveFocus()
                                                        }
                                                    }
                                                }
                                            }
                                            Rectangle {
                                                Layout.preferredWidth: 80
                                                Layout.preferredHeight: 36
                                                radius: 18
                                                color: Theme.accentPrimary
                                                border.color: Theme.accentPrimary
                                                border.width: 0
                                                opacity: 1.0
                                                Behavior on color {
                                                    ColorAnimation {
                                                        duration: 100
                                                    }
                                                }
                                                MouseArea {
                                                    anchors.fill: parent
                                                    onClicked: wifiLogic.submitPassword()
                                                    cursorShape: Qt.PointingHandCursor
                                                    hoverEnabled: true
                                                    onEntered: parent.color = Qt.darker(Theme.accentPrimary, 1.1)
                                                    onExited: parent.color = Theme.accentPrimary
                                                }
                                                Text {
                                                    anchors.centerIn: parent
                                                    text: &quot;Connect&quot;
                                                    color: Theme.backgroundPrimary
                                                    font.pixelSize: 14
                                                    font.bold: true
                                                }
                                            }
                                        }
                                    }
                            
                                    Rectangle {
                                        visible: modelData.ssid === wifiLogic.actionPanelSsid
                                        Layout.fillWidth: true
                                        Layout.preferredHeight: 60
                                        radius: 8
                                        color: &quot;transparent&quot;
                                        Layout.alignment: Qt.AlignLeft
                                        Layout.leftMargin: 32
                                        Layout.rightMargin: 32
                                        z: 2
                                        RowLayout {
                                            anchors.fill: parent
                                            anchors.margins: 12
                                            spacing: 10
                                
                                            Item {
                                                Layout.fillWidth: true
                                                Layout.preferredHeight: 36
                                                visible: wifiLogic.isSecured(modelData.security) &amp;&amp; !modelData.connected &amp;&amp; !modelData.existing
                                                Rectangle {
                                                    anchors.fill: parent
                                                    radius: 8
                                                    color: &quot;transparent&quot;
                                                    border.color: actionPanelPasswordField.activeFocus ? Theme.accentPrimary : Theme.outline
                                                    border.width: 1
                                                    TextInput {
                                                        id: actionPanelPasswordField
                                                        anchors.fill: parent
                                                        anchors.margins: 12
                                                        font.pixelSize: 13
                                                        color: Theme.textPrimary
                                                        verticalAlignment: TextInput.AlignVCenter
                                                        clip: true
                                                        selectByMouse: true
                                                        activeFocusOnTab: true
                                                        inputMethodHints: Qt.ImhNone
                                                        echoMode: TextInput.Password
                                                        onAccepted: {
                                                
                                                            wifiLogic.pendingConnect = {
                                                                ssid: modelData.ssid,
                                                                security: modelData.security,
                                                                password: text
                                                            };
                                                            wifiLogic.doConnect();

                                                            wifiLogic.actionPanelSsid = &quot;&quot;; // Close the panel
                                                        }
                                                    }
                                                }
                                            }
                                
                                            Rectangle {
                                                Layout.preferredWidth: 80
                                                Layout.preferredHeight: 36
                                                radius: 18
                                                color: modelData.connected ? Theme.error : Theme.accentPrimary
                                                border.color: modelData.connected ? Theme.error : Theme.accentPrimary
                                                border.width: 0
                                                opacity: 1.0
                                                Behavior on color {
                                                    ColorAnimation {
                                                        duration: 100
                                                    }
                                                }
                                                MouseArea {
                                                    anchors.fill: parent
                                                    onClicked: {
                                                        if (modelData.connected) {
                                            
                                                            wifiLogic.disconnectNetwork(modelData.ssid);
                                                        } else {
                                            
                                                            if (wifiLogic.isSecured(modelData.security) &amp;&amp; !modelData.existing) {
                                                
                                                                if (actionPanelPasswordField.text.length &gt; 0) {
                                                                    wifiLogic.pendingConnect = {
                                                                        ssid: modelData.ssid,
                                                                        security: modelData.security,
                                                                        password: actionPanelPasswordField.text
                                                                    };
                                                                    wifiLogic.doConnect();
                                                                }
                                                                
                                                            } else {
                                                
                                                                wifiLogic.connectNetwork(modelData.ssid, modelData.security);
                                                            }
                                                        }
                                                        wifiLogic.actionPanelSsid = &quot;&quot;; // Close the panel
                                                    }
                                                    cursorShape: Qt.PointingHandCursor
                                                    hoverEnabled: true
                                                    onEntered: parent.color = modelData.connected ? Qt.darker(Theme.error, 1.1) : Qt.darker(Theme.accentPrimary, 1.1)
                                                    onExited: parent.color = modelData.connected ? Theme.error : Theme.accentPrimary
                                                }
                                                Text {
                                                    anchors.centerIn: parent
                                                    text: modelData.connected ? &quot;wifi_off&quot; : &quot;check&quot;
                                                    font.family: &quot;Material Symbols Outlined&quot;
                                                    font.pixelSize: 20
                                                    color: Theme.backgroundPrimary
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Background.qml">import QtQuick
import Quickshell
import Quickshell.Wayland
import qs.Services
import qs.Settings

ShellRoot {
    property string wallpaperSource: WallpaperManager.currentWallpaper !== &quot;&quot; &amp;&amp; !Settings.settings.useSWWW ? WallpaperManager.currentWallpaper : &quot;&quot;

    Variants {
        model: Quickshell.screens

        PanelWindow {
            required property ShellScreen modelData

            visible: wallpaperSource !== &quot;&quot;
            anchors {
                bottom: true
                top: true
                right: true
                left: true
            }
            margins {
                top: 0
            }
            color: &quot;transparent&quot;
            screen: modelData
            WlrLayershell.layer: WlrLayer.Background
            WlrLayershell.exclusionMode: ExclusionMode.Ignore
            WlrLayershell.namespace: &quot;quickshell-wallpaper&quot;
            Image {
                anchors.fill: parent
                fillMode: Image.PreserveAspectCrop
                source: wallpaperSource
                visible: wallpaperSource !== &quot;&quot;
                cache: true
                smooth: true
                mipmap: false
            }
        }
    }


}</file><file path="quickshell/Widgets/Dock.qml">import QtQuick
import QtQuick.Controls
import Quickshell
import Quickshell.Wayland
import Quickshell.Widgets
import qs.Settings
import qs.Components


Variants {
    model: Quickshell.screens

    Item {
        property var modelData  

        // Auto-hide properties
        property bool autoHide: true
        property bool hidden: true
        property int hideDelay: 500
        property int showDelay: 100
        property int hideAnimationDuration: 200
        property int showAnimationDuration: 150
        property int peekHeight: 2
        property int fullHeight: dockContainer.height

        // Track hover state
        property bool dockHovered: false
        property bool anyAppHovered: false

        // Context menu properties
        property bool contextMenuVisible: false
        property var contextMenuTarget: null
        property var contextMenuToplevel: null

        PanelWindow {

            id: dockWindow
            visible: Settings.settings.showDock &amp;&amp; 
                    (Settings.settings.dockMonitors.includes(modelData.name) ||
                                        (Settings.settings.dockMonitors.length === 0))
            screen: modelData
            exclusionMode: ExclusionMode.Ignore
            anchors.bottom: true
            anchors.left: true
            anchors.right: true
            focusable: false
            color: &quot;transparent&quot;
            implicitHeight: 43

            // Timer for auto-hide delay
            Timer {
                id: hideTimer
                interval: hideDelay
                onTriggered: if (autoHide &amp;&amp; !dockHovered &amp;&amp; !anyAppHovered &amp;&amp; !contextMenuVisible) hidden = true
            }

            // Timer for show delay
            Timer {
                id: showTimer
                interval: showDelay
                onTriggered: hidden = false
            }

            // Behavior for smooth hide/show animations
            Behavior on margins.bottom {
                NumberAnimation {
                    duration: hidden ? hideAnimationDuration : showAnimationDuration
                    easing.type: Easing.InOutQuad
                }
            }

            // Mouse area at screen bottom to detect entry and keep dock visible
            MouseArea {
                id: screenEdgeMouseArea
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.bottom: parent.bottom
                height: 10 * Theme.scale(dockWindow.screen)
                hoverEnabled: true
                propagateComposedEvents: true

                onEntered: if (autoHide &amp;&amp; hidden) showTimer.start()
                onExited: if (autoHide &amp;&amp; !hidden &amp;&amp; !dockHovered &amp;&amp; !anyAppHovered &amp;&amp; !contextMenuVisible) hideTimer.start()
            }

            margins.bottom: hidden ? -(fullHeight - peekHeight) : 0

            Rectangle {
                id: dockContainer
                width: dock.width + 40
                height: Settings.settings.taskbarIconSize + 20
                topLeftRadius: 16
                topRightRadius: 16
                color: Theme.backgroundSecondary
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.bottom: parent.bottom

                MouseArea {
                    id: dockMouseArea
                    anchors.fill: parent
                    hoverEnabled: true
                    propagateComposedEvents: true

                    onEntered: {
                        dockHovered = true
                        if (autoHide) {
                            showTimer.stop()
                            hideTimer.stop()
                            hidden = false
                        }
                    }
                    onExited: {
                        dockHovered = false
                        if (autoHide &amp;&amp; !anyAppHovered &amp;&amp; !contextMenuVisible) hideTimer.start()
                    }
                }

                Item {
                    id: dock
                    width: runningAppsRow.width
                    height: parent.height - 10
                    anchors.centerIn: parent

                    StyledTooltip { id: styledTooltip }

                    function getAppIcon(toplevel: Toplevel): string {
                        if (!toplevel) return &quot;&quot;;
                        let icon = Quickshell.iconPath(toplevel.appId?.toLowerCase(), true);
                        if (!icon) icon = Quickshell.iconPath(toplevel.appId, true);
                        if (!icon) icon = Quickshell.iconPath(toplevel.title?.toLowerCase(), true);
                        if (!icon) icon = Quickshell.iconPath(toplevel.title, true);
                        return icon || Quickshell.iconPath(&quot;application-x-executable&quot;, true);
                    }

                    Row {
                        id: runningAppsRow
                        spacing: 12
                        height: parent.height
                        anchors.centerIn: parent

                        Repeater {
                            model: ToplevelManager ? ToplevelManager.toplevels : null

                            delegate: Rectangle {
                                id: appButton
                                width: Settings.settings.taskbarIconSize + 8
                                height: Settings.settings.taskbarIconSize + 8
                                radius: Math.max(6, Settings.settings.taskbarIconSize * 0.3)
                                color: isActive ? Theme.accentPrimary : (hovered ? Theme.surfaceVariant : &quot;transparent&quot;)
                                border.color: isActive ? Qt.darker(Theme.accentPrimary, 1.2) : &quot;transparent&quot;
                                border.width: 1

                                property bool isActive: ToplevelManager.activeToplevel &amp;&amp; ToplevelManager.activeToplevel === modelData
                                property bool hovered: appMouseArea.containsMouse
                                property string appId: modelData ? modelData.appId : &quot;&quot;
                                property string appTitle: modelData ? modelData.title : &quot;&quot;

                                Behavior on color { ColorAnimation { duration: 150 } }
                                Behavior on border.color { ColorAnimation { duration: 150 } }

                                IconImage {
                                    id: appIcon
                                    width: Math.max(20, Settings.settings.taskbarIconSize * 0.75)
                                    height: Math.max(20, Settings.settings.taskbarIconSize * 0.75)
                                    anchors.centerIn: parent
                                    source: dock.getAppIcon(modelData)
                                    visible: source.toString() !== &quot;&quot;
                                }

                                Text {
                                    anchors.centerIn: parent
                                    visible: !appIcon.visible
                                    text: appButton.appId ? appButton.appId.charAt(0).toUpperCase() : &quot;?&quot;
                                    font.family: Theme.fontFamily
                                    font.pixelSize: Math.max(14, Settings.settings.taskbarIconSize * 0.5)
                                    font.bold: true
                                    color: appButton.isActive ? Theme.onAccent : Theme.textPrimary
                                }

                                MouseArea {
                                    id: appMouseArea
                                    anchors.fill: parent
                                    hoverEnabled: true
                                    cursorShape: Qt.PointingHandCursor
                                    acceptedButtons: Qt.LeftButton | Qt.RightButton | Qt.MiddleButton

                                    onEntered: {
                                        anyAppHovered = true
                                        if (!contextMenuVisible) {
                                            styledTooltip.text = appTitle || appId;
                                            styledTooltip.targetItem = appButton;
                                            styledTooltip.positionAbove = true;
                                            styledTooltip.tooltipVisible = true;
                                        }
                                        if (autoHide) {
                                            showTimer.stop()
                                            hideTimer.stop()
                                            hidden = false
                                        }
                                    }
                                    onExited: {
                                        anyAppHovered = false
                                        if (!contextMenuVisible) {
                                            styledTooltip.tooltipVisible = false;
                                        }
                                        if (autoHide &amp;&amp; !dockHovered &amp;&amp; !contextMenuVisible) hideTimer.start()
                                    }
                                    onClicked: function(mouse) {
                                        if (mouse.button === Qt.MiddleButton &amp;&amp; modelData?.close) {
                                            modelData.close();
                                        }
                                        if (mouse.button === Qt.LeftButton &amp;&amp; modelData?.activate) {
                                            modelData.activate();
                                        }
                                        if (mouse.button === Qt.RightButton) {
                                            styledTooltip.tooltipVisible = false;
                                            contextMenuTarget = appButton;
                                            contextMenuToplevel = modelData;
                                            contextMenuVisible = true;
                                        }
                                    }
                                }

                                Rectangle {
                                    visible: isActive
                                    width: 6
                                    height: 6
                                    radius: 3
                                    color: Theme.onAccent
                                    anchors.bottom: parent.bottom
                                    anchors.horizontalCenter: parent.horizontalCenter
                                    anchors.bottomMargin: -8
                                }
                            }
                        }
                    }
                }
            }

            // Context Menu
            PanelWindow {
                id: contextMenuWindow
                visible: contextMenuVisible
                screen: dockWindow.screen
                exclusionMode: ExclusionMode.Ignore
                anchors.bottom: true
                anchors.left: true
                anchors.right: true
                color: &quot;transparent&quot;
                focusable: false

                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        contextMenuVisible = false;
                        contextMenuTarget = null;
                        contextMenuToplevel = null;
                        hidden = true; // Hide dock when context menu closes
                    }
                }

                Rectangle {
                    id: contextMenuContainer
                    width: 80
                    height: contextMenuColumn.height + 0
                    radius: 16
                    color: Theme.backgroundPrimary
                    border.color: Theme.outline
                    border.width: 1

                    x: {
                        if (!contextMenuTarget) return 0;
                        // Get position relative to screen
                        const pos = contextMenuTarget.mapToItem(null, 0, 0);
                        // Center horizontally above the icon
                        let xPos = pos.x + (contextMenuTarget.width - width) / 2;
                        // Constrain to screen edges
                        return Math.max(0, Math.min(xPos, dockWindow.width - width));
                    }

                    y: {
                        if (!contextMenuTarget) return 0;
                        // Position above the dock
                        const pos = contextMenuTarget.mapToItem(null, 0, 0);
                        return pos.y - height + 32;
                    }

                    Column {
                        id: contextMenuColumn
                        anchors.centerIn: parent
                        spacing: 4
                        width: parent.width


                        Rectangle {
                            width: parent.width
                            height: 32
                            radius: 16
                            color: closeMouseArea.containsMouse ? Theme.surfaceVariant : &quot;transparent&quot;
                            border.color: Theme.outline
                            border.width: 1

                            Row {
                                anchors.left: parent.left
                                anchors.leftMargin: 12
                                anchors.verticalCenter: parent.verticalCenter
                                spacing: 4

                                Text {
                                    anchors.verticalCenter: parent.verticalCenter
                                    text: &quot;close&quot;
                                    font.family: &quot;Material Symbols Outlined&quot;
                                    font.pixelSize: 14 * Theme.scale(dockWindow.screen)
                                    color: Theme.textPrimary
                                }

                                Text {
                                    anchors.verticalCenter: parent.verticalCenter
                                    text: &quot;Close&quot;
                                    font.family: Theme.fontFamily
                                    font.pixelSize: 14 * Theme.scale(dockWindow.screen)
                                    color: Theme.textPrimary
                                }
                            }

                            MouseArea {
                                id: closeMouseArea
                                anchors.fill: parent
                                hoverEnabled: true
                                cursorShape: Qt.PointingHandCursor

                                onClicked: {
                                    if (contextMenuToplevel?.close) contextMenuToplevel.close();
                                    contextMenuVisible = false;
                                    hidden = true;
                                }
                            }
                        }
                    }

                    // Animation
                    scale: contextMenuVisible ? 1 : 0.9
                    opacity: contextMenuVisible ? 1 : 0
                    transformOrigin: Item.Bottom

                    Behavior on scale {
                        NumberAnimation {
                            duration: 150
                            easing.type: Easing.OutBack
                        }
                    }

                    Behavior on opacity {
                        NumberAnimation { duration: 100 }
                    }
                }
            }
        }

    }
}</file><file path="quickshell/Widgets/LockScreen.qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import QtQuick.Effects
import Qt5Compat.GraphicalEffects
import Quickshell.Wayland
import Quickshell
import Quickshell.Services.Pam
import Quickshell.Io
import qs.Settings
import qs.Services
import qs.Components
import &quot;../Helpers/Weather.js&quot; as WeatherHelper

WlSessionLock {
    id: lock

    property string errorMessage: &quot;&quot;
    property bool authenticating: false
    property string password: &quot;&quot;
    property bool pamAvailable: typeof PamContext !== &quot;undefined&quot;
    property string weatherCity: Settings.settings.weatherCity
    property var weatherData: null
    property string weatherError: &quot;&quot;
    property string weatherInfo: &quot;&quot;
    property string weatherIcon: &quot;&quot;
    property double currentTemp: 0
    locked: false

    // Request to fetch weather with a little delay to ensure weatherCity is properly loaded.
    Component.onCompleted: {
        Qt.callLater(function () {
            fetchWeatherData();
        })
    }

    function fetchWeatherData() {
        WeatherHelper.fetchCityWeather(weatherCity, function (result) {
            weatherData = result.weather;
            weatherError = &quot;&quot;;
        }, function (err) {
            weatherError = err;
        });
    }

    function materialSymbolForCode(code) {
        if (code === 0)
            return &quot;sunny&quot;;
        if (code === 1 || code === 2)
            return &quot;partly_cloudy_day&quot;;
        if (code === 3)
            return &quot;cloud&quot;;
        if (code &gt;= 45 &amp;&amp; code &lt;= 48)
            return &quot;foggy&quot;;
        if (code &gt;= 51 &amp;&amp; code &lt;= 67)
            return &quot;rainy&quot;;
        if (code &gt;= 71 &amp;&amp; code &lt;= 77)
            return &quot;weather_snowy&quot;;
        if (code &gt;= 80 &amp;&amp; code &lt;= 82)
            return &quot;rainy&quot;;
        if (code &gt;= 95 &amp;&amp; code &lt;= 99)
            return &quot;thunderstorm&quot;;
        return &quot;cloud&quot;;
    }

    function unlockAttempt() {
        console.log(&quot;Unlock attempt started&quot;);
        if (!pamAvailable) {
            lock.errorMessage = &quot;PAM authentication not available.&quot;;
            console.log(&quot;PAM not available&quot;);
            return;
        }
        if (!lock.password) {
            lock.errorMessage = &quot;Password required.&quot;;
            console.log(&quot;No password entered&quot;);
            return;
        }
        console.log(&quot;Starting PAM authentication...&quot;);
        lock.authenticating = true;
        lock.errorMessage = &quot;&quot;;

        console.log(&quot;[LockScreen] About to create PAM context with userName:&quot;, Quickshell.env(&quot;USER&quot;));
        var pam = Qt.createQmlObject(&apos;import Quickshell.Services.Pam; PamContext { config: &quot;login&quot;; user: &quot;&apos; + Quickshell.env(&quot;USER&quot;) + &apos;&quot; }&apos;, lock);
        console.log(&quot;PamContext created&quot;, pam);

        pam.onCompleted.connect(function (result) {
            console.log(&quot;PAM completed with result:&quot;, result);
            lock.authenticating = false;
            if (result === PamResult.Success) {
                console.log(&quot;Authentication successful, unlocking...&quot;);
                lock.locked = false;
                lock.password = &quot;&quot;;
                lock.errorMessage = &quot;&quot;;
            } else {
                console.log(&quot;Authentication failed&quot;);
                lock.errorMessage = &quot;Authentication failed.&quot;;
                lock.password = &quot;&quot;;
            }
            pam.destroy();
        });

        pam.onError.connect(function (error) {
            console.log(&quot;PAM error:&quot;, error);
            lock.authenticating = false;
            lock.errorMessage = pam.message || &quot;Authentication error.&quot;;
            lock.password = &quot;&quot;;
            pam.destroy();
        });

        pam.onPamMessage.connect(function () {
            console.log(&quot;PAM message:&quot;, pam.message, &quot;isError:&quot;, pam.messageIsError);
            if (pam.messageIsError) {
                lock.errorMessage = pam.message;
            }
        });

        pam.onResponseRequiredChanged.connect(function () {
            console.log(&quot;PAM response required:&quot;, pam.responseRequired);
            if (pam.responseRequired &amp;&amp; lock.authenticating) {
                console.log(&quot;Responding to PAM with password&quot;);
                pam.respond(lock.password);
            }
        });

        var started = pam.start();
        console.log(&quot;PAM start result:&quot;, started);
    }

    WlSessionLockSurface {
        // Wallpaper image to blur
        Image {
            id: lockBgImage
            anchors.fill: parent
            fillMode: Image.PreserveAspectCrop
            source: WallpaperManager.currentWallpaper !== &quot;&quot; ? WallpaperManager.currentWallpaper : &quot;&quot;
            cache: true
            smooth: false
            visible: true // source for MultiEffect
        }

        MultiEffect {
            id: lockBgBlur
            anchors.fill: parent
            source: lockBgImage
            blurEnabled: true
            blur: 0.48   // controls blur strength (0 to 1)
            blurMax: 128 // max blur radius in pixels
        }

        ColumnLayout {
            anchors.centerIn: parent
            spacing: 30
            width: Math.min(parent.width * 0.8, 400)

            Rectangle {
                Layout.alignment: Qt.AlignHCenter
                width: 80
                height: 80
                radius: 40
                color: Theme.accentPrimary

                Image {
                    id: avatarImage
                    anchors.fill: parent
                    anchors.margins: 4
                    source: Settings.settings.profileImage
                    fillMode: Image.PreserveAspectCrop
                    visible: false
                    asynchronous: true
                }
                OpacityMask {
                    anchors.fill: avatarImage
                    source: avatarImage
                    maskSource: Rectangle {
                        width: avatarImage.width
                        height: avatarImage.height
                        radius: avatarImage.width / 2
                        visible: false
                    }
                    visible: Settings.settings.profileImage !== &quot;&quot;
                }
                Text {
                    anchors.centerIn: parent
                    text: &quot;person&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 32
                    color: Theme.onAccent
                    visible: Settings.settings.profileImage === &quot;&quot;
                }
                layer.enabled: true
                layer.effect: Glow {
                    color: Theme.accentPrimary
                    radius: 8
                    samples: 16
                }
            }

            Text {
                Layout.alignment: Qt.AlignHCenter
                text: Quickshell.env(&quot;USER&quot;)
                font.family: Theme.fontFamily
                font.pixelSize: 24
                font.weight: Font.Medium
                color: Theme.textPrimary
            }

            Rectangle {
                Layout.fillWidth: true
                height: 50
                radius: 25
                color: Theme.surface
                opacity: passwordInput.activeFocus ? 0.8 : 0.3
                border.color: passwordInput.activeFocus ? Theme.accentPrimary : Theme.outline
                border.width: 2

                TextInput {
                    id: passwordInput
                    anchors.fill: parent
                    anchors.margins: 15
                    verticalAlignment: TextInput.AlignVCenter
                    horizontalAlignment: TextInput.AlignHCenter
                    font.family: Theme.fontFamily
                    font.pixelSize: 16
                    color: Theme.textPrimary
                    echoMode: TextInput.Password
                    passwordCharacter: &quot;●&quot;
                    passwordMaskDelay: 0

                    text: lock.password
                    onTextChanged: lock.password = text

                    Text {
                        anchors.centerIn: parent
                        text: &quot;Enter password...&quot;
                        color: Theme.textSecondary
                        font.family: Theme.fontFamily
                        font.pixelSize: 16
                        visible: !passwordInput.text &amp;&amp; !passwordInput.activeFocus
                    }

                    Keys.onPressed: function (event) {
                        if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                            lock.unlockAttempt();
                        }
                    }

                    Component.onCompleted: {
                        forceActiveFocus();
                    }
                }
            }

            Rectangle {
                id: errorMessageRect
                Layout.alignment: Qt.AlignHCenter
                width: parent.width * 0.8
                height: 44
                color: Theme.overlay
                radius: 22
                visible: lock.errorMessage !== &quot;&quot;

                Text {
                    anchors.centerIn: parent
                    text: lock.errorMessage
                    color: Theme.error
                    font.family: Theme.fontFamily
                    font.pixelSize: 14
                    opacity: 1
                    visible: lock.errorMessage !== &quot;&quot;
                }
            }

            Rectangle {
                Layout.alignment: Qt.AlignHCenter
                width: 120
                height: 44
                radius: 22
                opacity: unlockButtonArea.containsMouse ? 0.8 : 0.5
                color: unlockButtonArea.containsMouse ? Theme.accentPrimary : Theme.surface
                border.color: Theme.accentPrimary
                border.width: 2
                enabled: !lock.authenticating

                Text {
                    id: unlockButtonText
                    anchors.centerIn: parent
                    text: lock.authenticating ? &quot;...&quot; : &quot;Unlock&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: 16
                    font.bold: true
                    color: unlockButtonArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                }

                MouseArea {
                    id: unlockButtonArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        if (!lock.authenticating) {
                            lock.unlockAttempt();
                        }
                    }
                }

                Behavior on opacity {
                    NumberAnimation {
                        duration: 200
                    }
                }
            }
        }

        Corners {
            id: topRightCorner
            position: &quot;bottomleft&quot;
            size: 1.3
            fillColor: (Theme.backgroundPrimary !== undefined &amp;&amp; Theme.backgroundPrimary !== null) ? Theme.backgroundPrimary : &quot;#222&quot;
            offsetX: screen.width / 2 + 30
            offsetY: 0
            anchors.top: parent.top
            visible: Settings.settings.showCorners
            z: 50
        }

        Corners {
            id: topLeftCorner
            position: &quot;bottomright&quot;
            size: 1.3
            fillColor: (Theme.backgroundPrimary !== undefined &amp;&amp; Theme.backgroundPrimary !== null) ? Theme.backgroundPrimary : &quot;#222&quot;
            offsetX: - Screen.width / 2 - 30
            offsetY: 0
            anchors.top: parent.top
            visible: Settings.settings.showCorners
            z: 51
        }

        Rectangle {
            width: infoColumn.width + 32
            height: infoColumn.height + 8
            color: (Theme.backgroundPrimary !== undefined &amp;&amp; Theme.backgroundPrimary !== null) ? Theme.backgroundPrimary : &quot;#222&quot;
            anchors.horizontalCenter: parent.horizontalCenter
            bottomLeftRadius: 20
            bottomRightRadius: 20

            ColumnLayout {
                id: infoColumn
                anchors.top: parent.top
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.topMargin: 0
                spacing: 8

                Text {
                    id: timeText
                    text: Qt.formatDateTime(new Date(), &quot;HH:mm&quot;)
                    font.family: Theme.fontFamily
                    font.pixelSize: 48
                    font.bold: true
                    color: Theme.textPrimary
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                }
                Text {
                    id: dateText
                    text: Qt.formatDateTime(new Date(), &quot;dddd, MMMM d&quot;)
                    font.family: Theme.fontFamily
                    font.pixelSize: 16
                    color: Theme.textSecondary
                    opacity: 0.8
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                }

                RowLayout {
                    spacing: 6
                    Layout.alignment: Qt.AlignHCenter
                    anchors.horizontalCenter: parent.horizontalCenter
                    visible: weatherData &amp;&amp; weatherData.current_weather

                    Text {
                        text: weatherData &amp;&amp; weatherData.current_weather ? materialSymbolForCode(weatherData.current_weather.weathercode) : &quot;cloud&quot;
                        font.family: &quot;Material Symbols Outlined&quot;
                        font.pixelSize: 28
                        color: Theme.accentPrimary
                        verticalAlignment: Text.AlignVCenter
                    }

                    Text {
                        text: weatherData &amp;&amp; weatherData.current_weather ? ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? `${Math.round(weatherData.current_weather.temperature * 9 / 5 + 32)}°F` : `${Math.round(weatherData.current_weather.temperature)}°C`) : ((Settings.settings.useFahrenheit !== undefined ? Settings.settings.useFahrenheit : false) ? &quot;--°F&quot; : &quot;--°C&quot;)
                        font.family: Theme.fontFamily
                        font.pixelSize: 18
                        color: Theme.textSecondary
                        verticalAlignment: Text.AlignVCenter
                    }
                }

                Text {
                    text: weatherError
                    color: Theme.error
                    visible: weatherError !== &quot;&quot;
                    font.family: Theme.fontFamily
                    font.pixelSize: 10
                    horizontalAlignment: Text.AlignHCenter
                    Layout.alignment: Qt.AlignHCenter
                }
            }
        }

        Timer {
            interval: 1000
            running: true
            repeat: true
            onTriggered: {
                timeText.text = Qt.formatDateTime(new Date(), &quot;HH:mm&quot;);
                dateText.text = Qt.formatDateTime(new Date(), &quot;dddd, MMMM d&quot;);
            }
        }

        Timer {
            interval: 600000 // 10 minutes
            running: true
            repeat: true
            onTriggered: {
                fetchWeatherData();
            }
        }

        ColumnLayout {
            anchors.right: parent.right
            anchors.bottom: parent.bottom
            anchors.margins: 32
            spacing: 12

            Rectangle {
                width: 48
                height: 48
                radius: 24
                color: shutdownArea.containsMouse ? Theme.error : &quot;transparent&quot;
                border.color: Theme.error
                border.width: 1

                MouseArea {
                    id: shutdownArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        Qt.createQmlObject(&apos;import Quickshell.Io; Process { command: [&quot;shutdown&quot;, &quot;-h&quot;, &quot;now&quot;]; running: true }&apos;, lock);
                    }
                }

                Text {
                    anchors.centerIn: parent
                    text: &quot;power_settings_new&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24
                    color: shutdownArea.containsMouse ? Theme.onAccent : Theme.error
                }
            }

            Rectangle {
                width: 48
                height: 48
                radius: 24
                color: rebootArea.containsMouse ? Theme.accentPrimary : &quot;transparent&quot;
                border.color: Theme.accentPrimary
                border.width: 1

                MouseArea {
                    id: rebootArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        Qt.createQmlObject(&apos;import Quickshell.Io; Process { command: [&quot;reboot&quot;]; running: true }&apos;, lock);
                    }
                }

                Text {
                    anchors.centerIn: parent
                    text: &quot;refresh&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24
                    color: rebootArea.containsMouse ? Theme.onAccent : Theme.accentPrimary
                }
            }

            Rectangle {
                width: 48
                height: 48
                radius: 24
                color: logoutArea.containsMouse ? Theme.accentSecondary : &quot;transparent&quot;
                border.color: Theme.accentSecondary
                border.width: 1

                MouseArea {
                    id: logoutArea
                    anchors.fill: parent
                    hoverEnabled: true
                    onClicked: {
                        Qt.createQmlObject(&apos;import Quickshell.Io; Process { command: [&quot;loginctl&quot;, &quot;terminate-user&quot;, &quot;&apos; + Quickshell.env(&quot;USER&quot;) + &apos;&quot;]; running: true }&apos;, lock);
                    }
                }

                Text {
                    anchors.centerIn: parent
                    text: &quot;exit_to_app&quot;
                    font.family: &quot;Material Symbols Outlined&quot;
                    font.pixelSize: 24
                    color: logoutArea.containsMouse ? Theme.onAccent : Theme.accentSecondary
                }
            }
        }
    }
}</file><file path="quickshell/Widgets/Overview.qml">import QtQuick
import QtQuick.Effects
import Quickshell
import Quickshell.Wayland
import qs.Services
import qs.Settings

ShellRoot {
    property string wallpaperSource: WallpaperManager.currentWallpaper !== &quot;&quot; &amp;&amp; !Settings.settings.useSWWW ? WallpaperManager.currentWallpaper : &quot;&quot;

    Variants {
        model: Quickshell.screens

        PanelWindow {
            required property ShellScreen modelData

            visible: wallpaperSource !== &quot;&quot;
            anchors {
                top: true
                bottom: true
                right: true
                left: true
            }
            color: &quot;transparent&quot;
            screen: modelData
            WlrLayershell.layer: WlrLayer.Background
            WlrLayershell.exclusionMode: ExclusionMode.Ignore
            WlrLayershell.namespace: &quot;quickshell-overview&quot;
            Image {
                id: bgImage
                anchors.fill: parent
                fillMode: Image.PreserveAspectCrop
                source: wallpaperSource
                cache: true
                smooth: true
                mipmap: false
                visible: wallpaperSource !== &quot;&quot;
            }
            MultiEffect {
                id: overviewBgBlur
                anchors.fill: parent
                source: bgImage
                blurEnabled: true
                            blur: 0.48
            blurMax: 128
            }
            Rectangle {
                anchors.fill: parent
                color: Qt.rgba(
                    Theme.backgroundPrimary.r,
                    Theme.backgroundPrimary.g,
                    Theme.backgroundPrimary.b, 0.5)
            }
        }
    }
}</file><file path="quickshell/.gitignore">.qmlls.ini
notification_history.json</file><file path="quickshell/LICENSE">MIT License

Copyright (c) 2025 Ly-sec

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</file><file path="quickshell/README.md"># Noctalia

**_quiet by design_**

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://github.com/Ly-sec/Noctalia/commits&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/last-commit/Ly-sec/Noctalia?style=for-the-badge&amp;labelColor=0C0D11&amp;color=A8AEFF&quot; alt=&quot;Last commit&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/Ly-sec/Noctalia/stargazers&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/stars/Ly-sec/Noctalia?style=for-the-badge&amp;labelColor=0C0D11&amp;color=A8AEFF&quot; alt=&quot;GitHub stars&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://github.com/Ly-sec/Noctalia/graphs/contributors&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/contributors/Ly-sec/Noctalia?style=for-the-badge&amp;labelColor=0C0D11&amp;color=A8AEFF&quot; alt=&quot;GitHub contributors&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;https://discord.gg/7JFFYWzWRn&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/badge/Discord-5865F2?style=for-the-badge&amp;labelColor=0C0D11&amp;color=A8AEFF&amp;logo=discord&amp;logoColor=white&quot; alt=&quot;Discord&quot; /&gt;
  &lt;/a&gt;



&lt;/p&gt;

A sleek, minimal, and thoughtfully crafted setup for Wayland using **Quickshell**. This setup includes a status bar, notification system, control panel, wifi &amp; bluetooth support, power profiles, lockscreen, tray, workspaces, and more — all styled with a warm lavender palette.

## Preview

&lt;details&gt;
&lt;summary&gt;Click to expand preview images&lt;/summary&gt;

![Main](https://i.imgur.com/5mOIGD2.jpeg)  
&lt;/br&gt;

![Control Panel](https://i.imgur.com/fJmCV6m.jpeg)  
&lt;/br&gt;

![Applauncher](https://i.imgur.com/9OPV30q.jpeg)

&lt;/details&gt;
&lt;br&gt;

---

&gt; ⚠️ **Note:**  
&gt; This setup currently only supports **Niri** and **Hyprland** (for the most part), mostly due to the workspace integration. For anything else you will have to add your own workspace logic.

---

## Features

- **Status Bar:** Modular and informative with smooth animations.
- **Notifications:** Non-intrusive alerts styled to blend naturally.
- **Control Panel:** Centralized system controls for quick adjustments.
- **Connectivity:** Easy management of WiFi and Bluetooth devices.
- **Power Profiles:** Quick toggles for CPU performance.
- **Lockscreen:** Secure and visually consistent lock experience.
- **Tray &amp; Workspaces:** Efficient workspace switching and tray icons.
- **Applauncher:** Stylized Applauncher to fit into the setup.

---

&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Theme Colors&lt;/strong&gt;&lt;/summary&gt;

| Color Role           | Color       | Description                |
| -------------------- | ----------- | -------------------------- |
| Background Primary   | `#0C0D11`   | Deep indigo-black          |
| Background Secondary | `#151720`   | Slightly lifted dark       |
| Background Tertiary  | `#1D202B`   | Soft contrast surface      |
| Surface              | `#1A1C26`   | Material-like base layer   |
| Surface Variant      | `#2A2D3A`   | Lightly elevated           |
| Text Primary         | `#CACEE2`   | Gentle off-white           |
| Text Secondary       | `#B7BBD0`   | Muted lavender-blue        |
| Text Disabled        | `#6B718A`   | Dimmed blue-gray           |
| Accent Primary       | `#A8AEFF`   | Light enchanted lavender   |
| Accent Secondary     | `#9EA0FF`   | Softer lavender hue        |
| Accent Tertiary      | `#8EABFF`   | Warm golden glow           |
| Error                | `#FF6B81`   | Soft rose red              |
| Warning              | `#FFBB66`   | Candlelight amber-orange   |
| Highlight            | `#E3C2FF`   | Bright magical lavender    |
| Ripple Effect        | `#F3DEFF`   | Gentle soft splash         |
| On Accent            | `#1A1A1A`   | Text on accent background  |
| Outline              | `#44485A`   | Subtle bluish-gray line    |
| Shadow               | `#000000B3` | Standard soft black shadow |
| Overlay              | `#11121ACC` | Deep bluish overlay        |

&lt;/details&gt;

---

## Installation &amp; Usage

&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/summary&gt;

Install quickshell:

```
yay -S quickshell-git
```

or use any other way of installing quickshell-git (flake, paru etc).

_Download and install the latest release:_

```
mkdir -p ~/.config/quickshell &amp;&amp; curl -sL https://github.com/Ly-sec/Noctalia/releases/latest/download/noctalia-latest.tar.gz | tar -xz --strip-components=1 -C ~/.config/quickshell/
```

Or download manually from [releases](https://github.com/Ly-sec/Noctalia/releases) and extract:

```
mkdir -p ~/.config/quickshell &amp;&amp; tar -xzf noctalia-*.tar.gz --strip-components=1 -C ~/.config/quickshell/
```

### _niri only_

Add this to your `layout` section:

`background-color &quot;transparent&quot;`

That is to make swww work properly.

&lt;/details&gt;
&lt;/br&gt;

&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/summary&gt;

### Start quickshell:

```
qs
```

(If you want to autostart it, just add it to your niri configuration.)

It is recommended to set the following in your Niri configuration (hyprland equivalent):

```
window-rule {
    geometry-corner-radius 20
    clip-to-geometry true
}
```

### Settings:

To make the weather widget, wallpaper manager and record button work you will have to open up the settings menu in to right panel (top right button to open panel) and edit said things accordingly.

### Launcher:

The launcher supports special commands for math calculation and clipboard history.
Once the launcher open you can invoke those special command by typing &quot;&gt;&quot;
* \&gt;calc : lets you do simple math
* \&gt;clip : shows clipboard history

&lt;/details&gt;

&lt;/br&gt;
&lt;details&gt;
&lt;summary&gt;&lt;strong&gt;Keybinds&lt;/strong&gt;&lt;/summary&gt;

### Toggle Applauncher:

```
 qs ipc call globalIPC toggleLauncher
```

### Toggle Lockscreen:

```
 qs ipc call globalIPC toggleLock
```

### Toggle Notification Popup:

```
qs ipc call globalIPC toggleNotificationPopup
```

### Toggle Idle Inhibitor:

```
qs ipc call globalIPC toggleIdleInhibitor
```
&lt;/details&gt;

---

## Dependencies

You will need to install a few things to get everything working:

- `cava` so the audio visualizer works
- `gpu-screen-recorder` so that the record button works
- `xdg-desktop-portal-gnome` or any other xdg-desktop-portal (for `gpu-screen-recorder`)
- `material-symbols-git` so the icons properly show up
- `swww` to add fancy wallpaper animations (optional)
- `wallust` to theme the setup based on wallpaper (optional)

## zigstat and zigbrightness

The zigstat and zigbrightness utilities are automatically built from source during release creation. Source code can be found [here](https://git.pika-os.com/wm-packages/pikabar/src/branch/main/src).

## Known issues

It is perfect now

---

## 💜 Credits

Huge thanks to [**@ferrreo**](https://github.com/ferrreo) and [**@quadbyte**](https://github.com/quadbyte) for all the changes they did and all the cool features they added!

---

## Contributing

Contributions are welcome! Feel free to open issues or submit pull requests.

---

#### Donation

---
While I actually didn&apos;t want to accept donations, more and more people are asking to donate so... I don&apos;t know, if you really feel like donating then I obviously highly appreciate it but **PLEASE** never feel forced to donate or anything. It won&apos;t change how I work on Noctalia, it&apos;s a project that I work on for fun in the end.

[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/R6R01IX85B)

---

#### Special Thanks

Thank you to everyone who supports me and this project 💜!
* Gohma

---

## License

This project is licensed under the terms of the [MIT License](./LICENSE).</file><file path="quickshell/shell.qml">import QtCore
import QtQuick
import Quickshell
import Quickshell.Io
import Quickshell.Services.Notifications
import Quickshell.Services.Pipewire
import qs.Bar
import qs.Bar.Modules
import qs.Helpers
import qs.Settings
import qs.Widgets
import qs.Widgets.LockScreen
import qs.Widgets.Notification
import qs.Widgets.SettingsWindow

Scope {
    id: root

    property var notificationHistoryWin: notificationHistoryLoader.active ? notificationHistoryLoader.item : null
    property var settingsWindow: null
    property bool pendingReload: false
    // Volume property reflecting current audio volume in 0-100
    // Will be kept in sync dynamically below
    property int volume: (defaultAudioSink &amp;&amp; defaultAudioSink.audio &amp;&amp; !defaultAudioSink.audio.muted) ? Math.round(defaultAudioSink.audio.volume * 100) : 0
    // Reference to the default audio sink from Pipewire
    property var defaultAudioSink: Pipewire.defaultAudioSink
    property bool isReady: false

    // Function to load notification history
    function loadNotificationHistory() {
        if (!notificationHistoryLoader.active)
            notificationHistoryLoader.loading = true;

        return notificationHistoryLoader;
    }

    // Helper function to round value to nearest step
    function roundToStep(value, step) {
        return Math.round(value / step) * step;
    }

    // Function to update volume with clamping, stepping, and applying to audio sink
    function updateVolume(vol) {
        var clamped = Math.max(0, Math.min(100, vol));
        var stepped = roundToStep(clamped, 5);
        if (defaultAudioSink &amp;&amp; defaultAudioSink.audio)
            defaultAudioSink.audio.volume = stepped / 100;

        volume = stepped;
    }

    // Function to safely show/hide settings window
    function toggleSettingsWindow() {
        if (!settingsWindowLoader.active)
            settingsWindowLoader.loading = true;

        if (settingsWindowLoader.item)
            settingsWindowLoader.item.visible = !settingsWindowLoader.item.visible;

    }

    Component.onCompleted: {
        Quickshell.shell = root;
        Qt.callLater(function() {
            root.isReady = true;
        });
    }

    // Keep the Background off the main loader, this will initialize the Settings singleton
    Background {
    }

    // LazyLoader for NotificationHistory - only load when needed
    LazyLoader {
        id: notificationHistoryLoader

        loading: false

        component: NotificationHistory {
        }

    }

    // Centralized LazyLoader for SettingsWindow - prevents crashes on multiple opens
    LazyLoader {
        id: settingsWindowLoader

        loading: false

        component: SettingsWindow {
            Component.onCompleted: {
                root.settingsWindow = this;
            }
        }

    }

    Connections {
        function onReloadCompleted() {
            Quickshell.inhibitReloadPopup();
        }

        function onReloadFailed() {
            Quickshell.inhibitReloadPopup();
        }

        target: Quickshell
    }

    
    Loader {
        id: mainLoader
        

        active: isReady

        sourceComponent: Item {
            Overview {
            }

            Bar {
                id: bar
                property var notificationHistoryWin: notificationHistoryLoader.active ? notificationHistoryLoader.item : null

                shell: root
            }

            Dock {
                id: dock
            }

            Applauncher {
                id: appLauncherPanel

                visible: false
            }

            LockScreen {
                id: lockScreen

                onLockedChanged: {
                    if (!locked &amp;&amp; root.pendingReload) {
                        reloadTimer.restart();
                        root.pendingReload = false;
                    }
                }
            }

            IdleInhibitor {
                id: idleInhibitor
            }

            NotificationServer {
                // Add notification to the popup manager

                id: notificationServer

                onNotification: function(notification) {
                    console.log(&quot;[Notification] Received notification:&quot;, notification.appName, &quot;-&quot;, notification.summary);
                    notification.tracked = true;
                    if (notificationPopup.notificationsVisible)
                        notificationPopup.addNotification(notification);

                    if (notificationHistoryLoader.active &amp;&amp; notificationHistoryLoader.item)
                        notificationHistoryLoader.item.addToHistory({
                        &quot;id&quot;: notification.id,
                        &quot;appName&quot;: notification.appName || &quot;Notification&quot;,
                        &quot;summary&quot;: notification.summary || &quot;&quot;,
                        &quot;body&quot;: notification.body || &quot;&quot;,
                        &quot;urgency&quot;: notification.urgency,
                        &quot;timestamp&quot;: Date.now()
                    });

                }
            }

            NotificationPopup {
                id: notificationPopup
            }

            PwObjectTracker {
                objects: [Pipewire.defaultAudioSink]
            }

            IPCHandlers {
                appLauncherPanel: appLauncherPanel
                lockScreen: lockScreen
                idleInhibitor: idleInhibitor
                notificationPopup: notificationPopup
            }

            // moved reload popup suppression Connections to root scope so it is active outside Loader

            Connections {
                // ^commented out for now to fix QS crash on monitor wake.
                // if it reintroduces the notification bug (https://github.com/Ly-sec/Noctalia/issues/32)...
                // we need to find a different fix
                /*else {
                reloadTimer.restart();
            } */

                function onScreensChanged() {
                    if (lockScreen.locked)
                        pendingReload = true;

                }

                target: Quickshell
            }

            Connections {
                function onVolumeChanged() {
                    if (defaultAudioSink.audio &amp;&amp; !defaultAudioSink.audio.muted) {
                        volume = Math.round(defaultAudioSink.audio.volume * 100);
                        console.log(&quot;Volume changed externally to:&quot;, volume);
                    }
                }

                function onMutedChanged() {
                    if (defaultAudioSink.audio) {
                        if (defaultAudioSink.audio.muted) {
                            volume = 0;
                            console.log(&quot;Audio muted, volume set to 0&quot;);
                        } else {
                            volume = Math.round(defaultAudioSink.audio.volume * 100);
                            console.log(&quot;Audio unmuted, volume restored to:&quot;, volume);
                        }
                    }
                }

                target: defaultAudioSink ? defaultAudioSink.audio : null
            }

        }

    }

}</file><file path="dotmanager.sh">#!/usr/bin/env bash

set -euo pipefail

# ─── CONFIG ────────────────────────────────────────────────────────────────

DOTFILES_DIR=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;&amp; pwd)&quot;
CONFIG_DIR=&quot;$HOME/.config&quot;
BACKUP_DIR=&quot;$HOME/.config_backup&quot;
GITHUB_REPO=&quot;GitHub: https://github.com/Ly-sec/dotfiles&quot;

# ─── STYLING ───────────────────────────────────────────────────────────────

YELLOW=&quot;\033[1;33m&quot;
GREEN=&quot;\033[1;32m&quot;
RED=&quot;\033[1;31m&quot;
BLUE=&quot;\033[1;34m&quot;
RESET=&quot;\033[0m&quot;
INFO=&quot;➜&quot;
CHECK=&quot;✔&quot;
CROSS=&quot;✖&quot;
WARN=&quot;⚠&quot;

# ─── FLAGS ─────────────────────────────────────────────────────────────────

DRY_RUN=false

# ─── FUNCTIONS ─────────────────────────────────────────────────────────────

print_header() {
    local width=90
    printf &quot;${BLUE}${RESET} Dotfiles Symlink Setup Script${RESET}&quot;
    printf &quot;%*s${BLUE}${RESET}\n&quot; $((width - 27)) &quot;&quot;

    printf &quot;${BLUE}${RESET} Safely replaces configs in ~/.config with links from: ${DOTFILES_DIR}${RESET}&quot;
    printf &quot;%*s${BLUE}${RESET}\n&quot; $((width - 53)) &quot;&quot;

    printf &quot;${BLUE}${RESET} ${GITHUB_REPO}${RESET}&quot;
    printf &quot;%*s${BLUE}${RESET}\n&quot; $((width - 44)) &quot;&quot;
}

parse_flags() {
    while [[ $# -gt 0 ]]; do
        case &quot;$1&quot; in
            --dry-run) DRY_RUN=true ;;
            *) echo -e &quot;${RED}${CROSS}${RESET} Unknown option: $1&quot; &amp;&amp; exit 1 ;;
        esac
        shift
    done
}

is_git_clean() {
    if git -C &quot;$DOTFILES_DIR&quot; diff --quiet &amp;&amp; \
       git -C &quot;$DOTFILES_DIR&quot; diff --cached --quiet &amp;&amp; \
       ! git -C &quot;$DOTFILES_DIR&quot; ls-files --others --exclude-standard | grep -q &apos;.&apos;; then
        return 0
    fi
    return 1
}

show_git_changes() {
    echo -e &quot;\n${YELLOW} ${INFO}${RESET} Git status summary in ${DOTFILES_DIR}:&quot;

    local unstaged staged untracked

    staged=$(git -C &quot;$DOTFILES_DIR&quot; diff --cached --name-only)
    unstaged=$(git -C &quot;$DOTFILES_DIR&quot; diff --name-only)
    untracked=$(git -C &quot;$DOTFILES_DIR&quot; ls-files --others --exclude-standard)

    [[ -n &quot;$staged&quot; ]] &amp;&amp; {
        echo -e &quot; ${GREEN}Staged but uncommitted:${RESET}&quot;
        echo &quot;$staged&quot; | sed &apos;s/^/  - /&apos;
    }

    [[ -n &quot;$unstaged&quot; ]] &amp;&amp; {
        echo -e &quot; ${YELLOW}Modified (unstaged):${RESET}&quot;
        echo &quot;$unstaged&quot; | sed &apos;s/^/  - /&apos;
    }

    [[ -n &quot;$untracked&quot; ]] &amp;&amp; {
        echo -e &quot; ${RED}Untracked files:${RESET}&quot;
        echo &quot;$untracked&quot; | sed &apos;s/^/  - /&apos;
    }

    echo
}

is_git_behind_remote() {
    local behind
    behind=$(git -C &quot;$DOTFILES_DIR&quot; rev-list --left-right --count origin/HEAD...HEAD 2&gt;/dev/null || echo &quot;&quot;)
    if [[ &quot;$behind&quot; =~ ^([0-9]+)[[:space:]]([0-9]+)$ ]]; then
        local behind_count=${BASH_REMATCH[1]}
        if (( behind_count &gt; 0 )); then
            return 0
        fi
    fi
    return 1
}

prompt_pull() {
    while true; do
        read -rp &quot;Local branch is behind remote. Pull latest changes now? [Y/n]: &quot; yn
        case &quot;$yn&quot; in
            [Yy]* | &quot;&quot;) 
                echo -e &quot; ${INFO} Pulling latest changes...&quot;
                git -C &quot;$DOTFILES_DIR&quot; pull --ff-only
                return 0
                ;;
            [Nn]* )
                echo -e &quot; ${WARN} Skipping pull. You might be working with outdated files.&quot;
                return 1
                ;;
            * ) echo &quot;Please answer yes or no.&quot; ;;
        esac
    done
}

choose_folders() {
    mapfile -t FOLDERS &lt; &lt;(
        find &quot;$DOTFILES_DIR&quot; -mindepth 1 -maxdepth 1 -type d -printf &apos;%f\n&apos; |
        grep -vE &apos;^\.&apos; |  # exclude dotfolders
        sort
    )
}

prompt_backup_or_skip() {
    local target=&quot;$1&quot;
    local choice

    while true; do
        read -rp &quot;\&quot;$target\&quot; exists and is not a symlink. Back up and replace? [y/N]: &quot; yn
        case &quot;$yn&quot; in
            [Yy]*) choice=&quot;Backup &amp; replace&quot;; break ;;
            [Nn]*|&quot;&quot;) choice=&quot;Skip&quot;; break ;;
            *) echo &quot;Please answer yes or no.&quot; ;;
        esac
    done

    echo &quot;$choice&quot;
}

perform_symlinks() {
    echo -e &quot;${YELLOW} ${INFO}${RESET} Preparing to link ${#FOLDERS[@]} folders from ${DOTFILES_DIR}\n&quot;
    echo

    for folder in &quot;${FOLDERS[@]}&quot;; do
        local source=&quot;$DOTFILES_DIR/$folder&quot;
        local target=&quot;$CONFIG_DIR/$folder&quot;

        if [ ! -d &quot;$source&quot; ]; then
            echo -e &quot; ${RED} ${CROSS}${RESET} Source not found: $source&quot;
            continue
        fi

        echo -e &quot;${BLUE}Folder:${RESET} $folder&quot;

        if ! git -C &quot;$DOTFILES_DIR&quot; ls-files --error-unmatch &quot;$folder&quot; &amp;&gt;/dev/null; then
            echo -e &quot; ${WARN} Warning: Not tracked in git&quot;
        fi

        if [ -e &quot;$target&quot; ]; then
            if [ -L &quot;$target&quot; ]; then
                echo -e &quot; ${INFO} Removing existing symlink: $target&quot;
                $DRY_RUN || rm &quot;$target&quot;
            else
                local action
                action=$(prompt_backup_or_skip &quot;$target&quot;)
                if [[ &quot;$action&quot; == &quot;Backup &amp; replace&quot; ]]; then
                    mkdir -p &quot;$BACKUP_DIR&quot;
                    echo -e &quot; ${INFO} Backing up $target → $BACKUP_DIR/&quot;
                    $DRY_RUN || mv &quot;$target&quot; &quot;$BACKUP_DIR/&quot;
                else
                    echo -e &quot; ${CROSS} Skipping: $target exists and is not a symlink.&quot;
                    continue
                fi
            fi
        fi

        echo -e &quot; ${INFO} Linking: ~/.config/$folder → ~/$(basename &quot;$DOTFILES_DIR&quot;)/$folder&quot;
        $DRY_RUN || ln -sfn &quot;$source&quot; &quot;$target&quot;
        echo -e &quot;   ${GREEN} ${CHECK}${RESET} Linked successfully&quot;
        echo
    done

    echo -e &quot;${GREEN} ${CHECK}${RESET} All dotfiles processed.&quot;
}

main() {
    print_header
    parse_flags &quot;$@&quot;

    if [ ! -d &quot;$DOTFILES_DIR/.git&quot; ]; then
        echo -e &quot;${WARN} Warning: &apos;${DOTFILES_DIR}&apos; is not a git repository. Git checks will be limited.&quot;
    else
        if ! is_git_clean; then
            echo -e &quot;${WARN} Warning: You have uncommitted changes or untracked files in your dotfiles directory.&quot;
            show_git_changes
        fi

        if is_git_behind_remote; then
            echo -e &quot;${RED}${WARN} Warning: Your local branch is behind the remote repository.${RESET}&quot;
            prompt_pull
        fi
    fi

    choose_folders

    echo -e &quot;${YELLOW} ${INFO}${RESET} Found ${#FOLDERS[@]} folders to process in dotfiles:&quot;
    for folder in &quot;${FOLDERS[@]}&quot;; do
        printf &quot; - \033[1m%s\033[0m\n&quot; &quot;$folder&quot;
    done
    echo

    read -rp &quot; Proceed with creating symlinks for these folders? [Y/n]: &quot; proceed
    case &quot;$proceed&quot; in
        [Nn]*) echo &quot;Aborted by user.&quot;; exit 1 ;;
        *) echo -e &quot; ${INFO} Proceeding with symlink creation...&quot; ;;
    esac

    perform_symlinks
}

main &quot;$@&quot;</file><file path="README.md"># dotfiles</file></files></repomix>